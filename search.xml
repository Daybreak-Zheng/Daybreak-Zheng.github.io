<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>YOLOV3训练自己的数据集（PyTorch版本）</title>
    <url>/2020/02/20/YOLOV3%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86%EF%BC%88PyTorch%E7%89%88%E6%9C%AC%EF%BC%89/</url>
    <content><![CDATA[<h1 id="YOLOV3训练自己的数据集（PyTorch版本）"><a href="#YOLOV3训练自己的数据集（PyTorch版本）" class="headerlink" title="YOLOV3训练自己的数据集（PyTorch版本）"></a>YOLOV3训练自己的数据集（PyTorch版本）</h1><h2 id="一、数据集"><a href="#一、数据集" class="headerlink" title="一、数据集"></a>一、数据集</h2><h4 id="首先我们要对自己的数据集进行标注-标注的工具LabeIImg"><a href="#首先我们要对自己的数据集进行标注-标注的工具LabeIImg" class="headerlink" title="首先我们要对自己的数据集进行标注,标注的工具LabeIImg."></a>首先我们要对自己的数据集进行标注,标注的工具LabeIImg.</h4><h4 id="得到标注后的xml文件"><a href="#得到标注后的xml文件" class="headerlink" title="得到标注后的xml文件."></a>得到标注后的xml文件.</h4><h2 id="二、训练代码"><a href="#二、训练代码" class="headerlink" title="二、训练代码"></a>二、训练代码</h2><h4 id="我们使用yolo-v3-pytorch-github下载地址为-https-github-com-ultralytics-yolov3-clone下来，目录如下"><a href="#我们使用yolo-v3-pytorch-github下载地址为-https-github-com-ultralytics-yolov3-clone下来，目录如下" class="headerlink" title="我们使用yolo v3 pytorch,github下载地址为:https://github.com/ultralytics/yolov3 clone下来，目录如下"></a>我们使用yolo v3 pytorch,github下载地址为:<a href="https://github.com/ultralytics/yolov3" target="_blank" rel="noopener">https://github.com/ultralytics/yolov3</a> clone下来，目录如下</h4><p><img src="http://img.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132267590166496250.PNG" alt="图片"></p>
<h2 id="三、数据预处理"><a href="#三、数据预处理" class="headerlink" title="三、数据预处理"></a>三、数据预处理</h2><h4 id="为了能够用clone下来的工程进行训练和预测，我们需要对数据进行处理，以适应相应的接口。"><a href="#为了能够用clone下来的工程进行训练和预测，我们需要对数据进行处理，以适应相应的接口。" class="headerlink" title="为了能够用clone下来的工程进行训练和预测，我们需要对数据进行处理，以适应相应的接口。"></a>为了能够用clone下来的工程进行训练和预测，我们需要对数据进行处理，以适应相应的接口。</h4><h4 id="1-将细胞数据Annotations和JPEGImages放入data目录下，并新建文件ImageSets，labels，复制JPEGImages，重命名images："><a href="#1-将细胞数据Annotations和JPEGImages放入data目录下，并新建文件ImageSets，labels，复制JPEGImages，重命名images：" class="headerlink" title="1.将细胞数据Annotations和JPEGImages放入data目录下，并新建文件ImageSets，labels，复制JPEGImages，重命名images："></a>1.将细胞数据Annotations和JPEGImages放入data目录下，并新建文件ImageSets，labels，复制JPEGImages，重命名images：</h4><p><img src="http://img.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132267619333058750.PNG" alt="图片"></p>
<h4 id="2-将数据集分成训练集，测试集和验证集，其中比例可以在代码中设定，代码如下，复制到根目录下并新建为makeTxt-py。代码如下"><a href="#2-将数据集分成训练集，测试集和验证集，其中比例可以在代码中设定，代码如下，复制到根目录下并新建为makeTxt-py。代码如下" class="headerlink" title="2.将数据集分成训练集，测试集和验证集，其中比例可以在代码中设定，代码如下，复制到根目录下并新建为makeTxt.py。代码如下:"></a>2.将数据集分成训练集，测试集和验证集，其中比例可以在代码中设定，代码如下，复制到根目录下并新建为makeTxt.py。代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">trainval_percent = 0.1</span><br><span class="line">train_percent = 0.9</span><br><span class="line">xmlfilepath = &apos;data/Annotations&apos;</span><br><span class="line">txtsavepath = &apos;data/ImageSets&apos;</span><br><span class="line">total_xml = os.listdir(xmlfilepath)</span><br><span class="line"></span><br><span class="line">num = len(total_xml)</span><br><span class="line">list = range(num)</span><br><span class="line">tv = int(num * trainval_percent)</span><br><span class="line">tr = int(tv * train_percent)</span><br><span class="line">trainval = random.sample(list, tv)</span><br><span class="line">train = random.sample(trainval, tr)</span><br><span class="line"></span><br><span class="line">ftrainval = open(&apos;data/ImageSets/trainval.txt&apos;, &apos;w&apos;)</span><br><span class="line">ftest = open(&apos;data/ImageSets/test.txt&apos;, &apos;w&apos;)</span><br><span class="line">ftrain = open(&apos;data/ImageSets/train.txt&apos;, &apos;w&apos;)</span><br><span class="line">fval = open(&apos;data/ImageSets/val.txt&apos;, &apos;w&apos;)</span><br><span class="line"></span><br><span class="line">for i in list:</span><br><span class="line">    name = total_xml[i][:-4] + &apos;\n&apos;</span><br><span class="line">    if i in trainval:</span><br><span class="line">        ftrainval.write(name)</span><br><span class="line">        if i in train:</span><br><span class="line">            ftest.write(name)</span><br><span class="line">        else:</span><br><span class="line">            fval.write(name)</span><br><span class="line">    else:</span><br><span class="line">        ftrain.write(name)</span><br><span class="line"></span><br><span class="line">ftrainval.close()</span><br><span class="line">ftrain.close()</span><br><span class="line">fval.close()</span><br><span class="line">ftest.close()</span><br></pre></td></tr></table></figure>

<h4 id="运行makeTxt-py"><a href="#运行makeTxt-py" class="headerlink" title="运行makeTxt.py"></a>运行makeTxt.py</h4><p><img src="http://img.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132267624336340000.PNG" alt="图片"></p>
<h4 id="在ImageSets得到四个文件，其中我们主要关注的是train-txt，test-txt，val-txt，文件里主要存储图片名称。"><a href="#在ImageSets得到四个文件，其中我们主要关注的是train-txt，test-txt，val-txt，文件里主要存储图片名称。" class="headerlink" title="在ImageSets得到四个文件，其中我们主要关注的是train.txt，test.txt，val.txt，文件里主要存储图片名称。"></a>在ImageSets得到四个文件，其中我们主要关注的是train.txt，test.txt，val.txt，文件里主要存储图片名称。</h4><p><img src="http://img.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132267635299152500.PNG" alt="图片"></p>
<h4 id="3-得到labels的具体内容以及data目录下的train-txt，test-txt，val-txt，这里的train-txt与之前的区别在于，不仅仅得到文件名，还有文件的具体路径。代码如下-复制到根目录并新建为voc-label-py"><a href="#3-得到labels的具体内容以及data目录下的train-txt，test-txt，val-txt，这里的train-txt与之前的区别在于，不仅仅得到文件名，还有文件的具体路径。代码如下-复制到根目录并新建为voc-label-py" class="headerlink" title="3.得到labels的具体内容以及data目录下的train.txt，test.txt，val.txt，这里的train.txt与之前的区别在于，不仅仅得到文件名，还有文件的具体路径。代码如下,复制到根目录并新建为voc_label.py."></a>3.得到labels的具体内容以及data目录下的train.txt，test.txt，val.txt，这里的train.txt与之前的区别在于，不仅仅得到文件名，还有文件的具体路径。代码如下,复制到根目录并新建为voc_label.py.</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import xml.etree.ElementTree as ET</span><br><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line">from os import listdir, getcwd</span><br><span class="line">from os.path import join</span><br><span class="line"></span><br><span class="line">sets = [&apos;train&apos;, &apos;test&apos;, &apos;val&apos;]</span><br><span class="line"></span><br><span class="line">classes = [&quot;hat&quot;,&quot;person&quot;]  # 我们只是检测安全帽，因此只有一个类别</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def convert(size, box):</span><br><span class="line">    dw = 1. / size[0]</span><br><span class="line">    dh = 1. / size[1]</span><br><span class="line">    x = (box[0] + box[1]) / 2.0</span><br><span class="line">    y = (box[2] + box[3]) / 2.0</span><br><span class="line">    w = box[1] - box[0]</span><br><span class="line">    h = box[3] - box[2]</span><br><span class="line">    x = x * dw</span><br><span class="line">    w = w * dw</span><br><span class="line">    y = y * dh</span><br><span class="line">    h = h * dh</span><br><span class="line">    return (x, y, w, h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def convert_annotation(image_id):</span><br><span class="line">    in_file = open(&apos;data/Annotations/%s.xml&apos; % (image_id))</span><br><span class="line">    out_file = open(&apos;data/labels/%s.txt&apos; % (image_id), &apos;w&apos;)</span><br><span class="line">    tree = ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(&apos;size&apos;)</span><br><span class="line">    w = int(size.find(&apos;width&apos;).text)</span><br><span class="line">    h = int(size.find(&apos;height&apos;).text)</span><br><span class="line"></span><br><span class="line">    for obj in root.iter(&apos;object&apos;):</span><br><span class="line">        difficult = obj.find(&apos;difficult&apos;).text</span><br><span class="line">        cls = obj.find(&apos;name&apos;).text</span><br><span class="line">        if cls not in classes or int(difficult) == 1:</span><br><span class="line">            continue</span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(&apos;bndbox&apos;)</span><br><span class="line">        b = (float(xmlbox.find(&apos;xmin&apos;).text), float(xmlbox.find(&apos;xmax&apos;).text), float(xmlbox.find(&apos;ymin&apos;).text),</span><br><span class="line">             float(xmlbox.find(&apos;ymax&apos;).text))</span><br><span class="line">        bb = convert((w, h), b)</span><br><span class="line">        out_file.write(str(cls_id) + &quot; &quot; + &quot; &quot;.join([str(a) for a in bb]) + &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wd = getcwd()</span><br><span class="line">print(wd)</span><br><span class="line">for image_set in sets:</span><br><span class="line">    if not os.path.exists(&apos;data/labels/&apos;):</span><br><span class="line">        os.makedirs(&apos;data/labels/&apos;)</span><br><span class="line">    image_ids = open(&apos;data/ImageSets/%s.txt&apos; % (image_set)).read().strip().split()</span><br><span class="line">    list_file = open(&apos;data/%s.txt&apos; % (image_set), &apos;w&apos;)</span><br><span class="line">    for image_id in image_ids:</span><br><span class="line">        list_file.write(&apos;data/images/%s.jpg\n&apos; % (image_id))</span><br><span class="line">        convert_annotation(image_id)</span><br><span class="line">    list_file.close()</span><br></pre></td></tr></table></figure>

<h4 id="labels文件下的具体labels信息"><a href="#labels文件下的具体labels信息" class="headerlink" title="labels文件下的具体labels信息"></a>labels文件下的具体labels信息</h4><p><img src="http://img.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132267633144465000.PNG" alt="图片"></p>
<h3 id="四、配置文件"><a href="#四、配置文件" class="headerlink" title="四、配置文件"></a>四、配置文件</h3><h4 id="1-在data目录下新建hat-data，配置训练的数据，内容如下"><a href="#1-在data目录下新建hat-data，配置训练的数据，内容如下" class="headerlink" title="1.在data目录下新建hat.data，配置训练的数据，内容如下"></a>1.在data目录下新建hat.data，配置训练的数据，内容如下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classes=2</span><br><span class="line">train=data/train.txt</span><br><span class="line">valid=data/test.txt</span><br><span class="line">names=data/rbc.names</span><br><span class="line">backup=backup/</span><br><span class="line">eval=coco</span><br></pre></td></tr></table></figure>

<p><img src="http://img.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132267641818527500.PNG" alt="图片"></p>
<h4 id="2-在data目录下新建hat-names，配置预测的类别，内容如下"><a href="#2-在data目录下新建hat-names，配置预测的类别，内容如下" class="headerlink" title="2.在data目录下新建hat.names，配置预测的类别，内容如下"></a>2.在data目录下新建hat.names，配置预测的类别，内容如下</h4><p><img src="http://img.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132267643431340000.PNG" alt="图片"></p>
<h4 id="3-网络结构配置，在原工程下cfg目录下有很多的yolov3网络结构，我们本次采用的是yolov3-tiny-cfg，只是估计了两个类，所以需要对cfg文件进行修改，yolov3-tiny-cfg"><a href="#3-网络结构配置，在原工程下cfg目录下有很多的yolov3网络结构，我们本次采用的是yolov3-tiny-cfg，只是估计了两个类，所以需要对cfg文件进行修改，yolov3-tiny-cfg" class="headerlink" title="3.网络结构配置，在原工程下cfg目录下有很多的yolov3网络结构，我们本次采用的是yolov3-tiny.cfg，只是估计了两个类，所以需要对cfg文件进行修改，yolov3-tiny.cfg"></a>3.网络结构配置，在原工程下cfg目录下有很多的yolov3网络结构，我们本次采用的是yolov3-tiny.cfg，只是估计了两个类，所以需要对cfg文件进行修改，yolov3-tiny.cfg</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filters=18 #3*(class + 4 + 1)</span><br></pre></td></tr></table></figure>

<h4 id="注：修改的地方主要是filter，因为我们每一个网格就预测3个anchor结果，所以filter-3-（2-5）-21"><a href="#注：修改的地方主要是filter，因为我们每一个网格就预测3个anchor结果，所以filter-3-（2-5）-21" class="headerlink" title="注：修改的地方主要是filter，因为我们每一个网格就预测3个anchor结果，所以filter =3*（2+ 5）=21"></a>注：修改的地方主要是filter，因为我们每一个网格就预测3个anchor结果，所以filter =3*（2+ 5）=21</h4><h4 id="4-获取官网已经训练好的网络参数yolov3-tiny-weights。下载链接https-pjreddie-com-media-files-yolov3-tiny-weights-，导入weights目录下，由于需要进行fine-tune，所以需要对yolov3-tiny-weights进行改造，-这里，我直接提供yolov3-tiny-conv-15下载地址。"><a href="#4-获取官网已经训练好的网络参数yolov3-tiny-weights。下载链接https-pjreddie-com-media-files-yolov3-tiny-weights-，导入weights目录下，由于需要进行fine-tune，所以需要对yolov3-tiny-weights进行改造，-这里，我直接提供yolov3-tiny-conv-15下载地址。" class="headerlink" title="4.获取官网已经训练好的网络参数yolov3-tiny.weights。下载链接https://pjreddie.com/media/files/yolov3-tiny.weights ，导入weights目录下，由于需要进行fine-tune，所以需要对yolov3-tiny.weights进行改造，  这里，我直接提供yolov3-tiny.conv.15下载地址。"></a>4.获取官网已经训练好的网络参数yolov3-tiny.weights。下载链接<a href="https://pjreddie.com/media/files/yolov3-tiny.weights" target="_blank" rel="noopener">https://pjreddie.com/media/files/yolov3-tiny.weights</a> ，导入weights目录下，由于需要进行fine-tune，所以需要对yolov3-tiny.weights进行改造，  这里，我直接提供yolov3-tiny.conv.15下载地址。</h4><h4 id="如果是其他结构的网络，那么可以参考download-yolov3-weights-sh中的说明，里面有详细的介绍。"><a href="#如果是其他结构的网络，那么可以参考download-yolov3-weights-sh中的说明，里面有详细的介绍。" class="headerlink" title="如果是其他结构的网络，那么可以参考download_yolov3_weights.sh中的说明，里面有详细的介绍。"></a>如果是其他结构的网络，那么可以参考download_yolov3_weights.sh中的说明，里面有详细的介绍。</h4><h3 id="五、训练"><a href="#五、训练" class="headerlink" title="五、训练"></a>五、训练</h3><h4 id="一切准备妥当，我们就可以开始训练了，训练脚本如下"><a href="#一切准备妥当，我们就可以开始训练了，训练脚本如下" class="headerlink" title="一切准备妥当，我们就可以开始训练了，训练脚本如下"></a>一切准备妥当，我们就可以开始训练了，训练脚本如下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python train.py --data-cfg data/hat.data --cfg cfg/yolov3-tiny.cfg --epochs 10000</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>目标检测</tag>
      </tags>
  </entry>
  <entry>
    <title>latex入门(一)</title>
    <url>/2020/02/12/latex%20%E5%85%A5%E9%97%A8(%E4%B8%80)/</url>
    <content><![CDATA[<h4 id="1-在cmd-中输入命令查看ctex-宏集手册"><a href="#1-在cmd-中输入命令查看ctex-宏集手册" class="headerlink" title="1.在cmd 中输入命令查看ctex 宏集手册"></a>1.在cmd 中输入命令查看ctex 宏集手册</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">texdoc ctex</span><br></pre></td></tr></table></figure>

<h4 id="2-文章基本格式"><a href="#2-文章基本格式" class="headerlink" title="2.文章基本格式"></a>2.文章基本格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% 导言区</span><br><span class="line"></span><br><span class="line">\documentclass&#123;article&#125;  %文件的格式</span><br><span class="line"></span><br><span class="line">\title&#123;My First Document&#125;   %题目</span><br><span class="line">\author&#123;Daybreak-Zheng&#125;         %作者</span><br><span class="line">\date&#123;\today&#125;               %日期</span><br><span class="line"></span><br><span class="line">% 正文区</span><br><span class="line">\begin&#123;document&#125;            %正文格式</span><br><span class="line">    \maketitle</span><br><span class="line">    Hello World!</span><br><span class="line"></span><br><span class="line">    $f(x)=3x^2+x-1$         %数学公式</span><br><span class="line"></span><br><span class="line">    $$f(x)=3x^2+x-1$$ which is a polynomial of degree 2.</span><br><span class="line">    </span><br><span class="line">    \quad  %空格</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://img.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132270250484308750.PNG" alt="图片"></p>
<h4 id="2-英文字体的设置"><a href="#2-英文字体的设置" class="headerlink" title="2.英文字体的设置"></a>2.英文字体的设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;document&#125;            %正文格式</span><br><span class="line">    \maketitle</span><br><span class="line">    % 字体族设置(罗马字体、无衬线字体、打字机字体)</span><br><span class="line">    \textrm&#123;Roman Family&#125;</span><br><span class="line"></span><br><span class="line">    \textsf&#123;Sans Serif Family&#125;</span><br><span class="line"></span><br><span class="line">    \texttt&#123;Typewriter Family&#125;</span><br><span class="line"></span><br><span class="line">    &#123;\textrm For each test case, you should output </span><br><span class="line">    the sum of a and b in one line.&#125; </span><br><span class="line">    % 字体系列设置(粗细 宽度)</span><br><span class="line"></span><br><span class="line">    \textmd&#123;Medium Series&#125;</span><br><span class="line"></span><br><span class="line">    \textbf&#123;Boldface Series&#125;</span><br><span class="line"></span><br><span class="line">    %字体形状设计(直立、斜体、伪斜体、小型大写)</span><br><span class="line"></span><br><span class="line">    \textup&#123;Upright Shape&#125;</span><br><span class="line"></span><br><span class="line">    \textit&#123;Italic Shape&#125;</span><br><span class="line"></span><br><span class="line">    \textsl&#123;Slanted Shape&#125;</span><br><span class="line"></span><br><span class="line">    \textsc&#123;Small Caps Shape&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://img.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132270270020715000.PNG" alt="图片"></p>
<h4 id="注意中文字体需要在导言区添加代码如下"><a href="#注意中文字体需要在导言区添加代码如下" class="headerlink" title="注意中文字体需要在导言区添加代码如下:"></a>注意中文字体需要在导言区添加代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\usepackage[UTF8]&#123;ctex&#125; %正文中有中文字体时，要引入ctex，添加UTF8</span><br></pre></td></tr></table></figure>

<h4 id="3-中文字体的设置"><a href="#3-中文字体的设置" class="headerlink" title="3.中文字体的设置"></a>3.中文字体的设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% 正文区</span><br><span class="line">\begin&#123;document&#125;            %正文格式</span><br><span class="line">    \maketitle</span><br><span class="line"></span><br><span class="line">    % 中文字体</span><br><span class="line"></span><br><span class="line">    &#123;\songti 宋体&#125;  </span><br><span class="line"></span><br><span class="line">    &#123;\heiti 黑体&#125;  </span><br><span class="line"></span><br><span class="line">    &#123;\fangsong 仿宋&#125;</span><br><span class="line"></span><br><span class="line">    &#123;\kaishu 楷书&#125;</span><br><span class="line"></span><br><span class="line">    中文字体的\textbf&#123;粗体&#125;与\textit&#123;斜体&#125;</span><br><span class="line">    </span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://img.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132270279362746250.PNG" alt="图片"></p>
<h4 id="4-字号的设置"><a href="#4-字号的设置" class="headerlink" title="4.字号的设置"></a>4.字号的设置</h4><p><img src="http://img.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132270285812277500.PNG" alt="图片"></p>
]]></content>
      <categories>
        <category>latex</category>
      </categories>
      <tags>
        <tag>latex入门</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯--入门训练 A+B问题</title>
    <url>/2020/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF--%E5%85%A5%E9%97%A8%E8%AE%AD%E7%BB%83%20A+B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="A-B问题-题解"><a href="#A-B问题-题解" class="headerlink" title="A+B问题(题解)"></a>A+B问题(题解)</h2><h4 id="输入A、B，输出A-B。"><a href="#输入A、B，输出A-B。" class="headerlink" title="输入A、B，输出A+B。"></a>输入A、B，输出A+B。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入的第一行包括两个整数，由空格分隔，分别表示A、B。"><a href="#输入的第一行包括两个整数，由空格分隔，分别表示A、B。" class="headerlink" title="输入的第一行包括两个整数，由空格分隔，分别表示A、B。"></a>输入的第一行包括两个整数，由空格分隔，分别表示A、B。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="输出一行，包括一个整数，表示A-B的值。"><a href="#输出一行，包括一个整数，表示A-B的值。" class="headerlink" title="输出一行，包括一个整数，表示A+B的值。"></a>输出一行，包括一个整数，表示A+B的值。</h4><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12 45</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">57</span><br></pre></td></tr></table></figure>

<h4 id="数据规模与约定-10000-lt-A-B-lt-10000。"><a href="#数据规模与约定-10000-lt-A-B-lt-10000。" class="headerlink" title="数据规模与约定 -10000 &lt;= A, B &lt;= 10000。"></a>数据规模与约定 -10000 &lt;= A, B &lt;= 10000。</h4><h4 id="注意-两个数都是int范围内，相加结果也是在int范围内，否则则进行大数存储"><a href="#注意-两个数都是int范围内，相加结果也是在int范围内，否则则进行大数存储" class="headerlink" title="注意:两个数都是int范围内，相加结果也是在int范围内，否则则进行大数存储."></a>注意:两个数都是int范围内，相加结果也是在int范围内，否则则进行大数存储.</h4><h4 id="我的代码如下"><a href="#我的代码如下" class="headerlink" title="我的代码如下:"></a>我的代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a,b;</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">	printf(&quot;%d&quot;,a+b);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯 入门训练</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯--入门训练 序列求和</title>
    <url>/2020/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF--%E5%85%A5%E9%97%A8%E8%AE%AD%E7%BB%83%20%E5%BA%8F%E5%88%97%E6%B1%82%E5%92%8C/</url>
    <content><![CDATA[<h2 id="序列求和-题解"><a href="#序列求和-题解" class="headerlink" title="序列求和(题解)"></a>序列求和(题解)</h2><h4 id="求1-2-3-…-n的值。"><a href="#求1-2-3-…-n的值。" class="headerlink" title="求1+2+3+…+n的值。"></a>求1+2+3+…+n的值。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入包括一个整数n。"><a href="#输入包括一个整数n。" class="headerlink" title="输入包括一个整数n。"></a>输入包括一个整数n。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="输出一行，包括一个整数，表示1-2-3-…-n的值。"><a href="#输出一行，包括一个整数，表示1-2-3-…-n的值。" class="headerlink" title="输出一行，包括一个整数，表示1+2+3+…+n的值。"></a>输出一行，包括一个整数，表示1+2+3+…+n的值。</h4><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5050</span><br></pre></td></tr></table></figure>

<h4 id="1-lt-n-lt-1-000-000-000。"><a href="#1-lt-n-lt-1-000-000-000。" class="headerlink" title="1 &lt;= n &lt;= 1,000,000,000。"></a>1 &lt;= n &lt;= 1,000,000,000。</h4><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><h4 id="1-使用暴力的方法往往会导致运行超时，"><a href="#1-使用暴力的方法往往会导致运行超时，" class="headerlink" title="1.使用暴力的方法往往会导致运行超时，"></a>1.使用暴力的方法往往会导致运行超时，</h4><h4 id="2-答案不在int范围内，应该用long-long来存储"><a href="#2-答案不在int范围内，应该用long-long来存储" class="headerlink" title="2.答案不在int范围内，应该用long long来存储."></a>2.答案不在int范围内，应该用long long来存储.</h4><h4 id="我的代码如下"><a href="#我的代码如下" class="headerlink" title="我的代码如下:"></a>我的代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	long long sum=0;</span><br><span class="line">	int n;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	for(int i=1;i&lt;=n;i++)</span><br><span class="line">		sum+=i;</span><br><span class="line">	printf(&quot;%lld&quot;,sum);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="虽然可以AC-感觉暴力超时，可以用等差数列可以解决"><a href="#虽然可以AC-感觉暴力超时，可以用等差数列可以解决" class="headerlink" title="虽然可以AC,感觉暴力超时，可以用等差数列可以解决."></a>虽然可以AC,感觉暴力超时，可以用等差数列可以解决.</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	long long n,sum;</span><br><span class="line">	scanf(&quot;%lld&quot;,&amp;n);</span><br><span class="line">	sum=n*(n+1)/2;	//等差数列</span><br><span class="line">	printf(&quot;%lld&quot;,sum);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯 入门训练</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯--入门训练 Fibonacci数列</title>
    <url>/2020/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF--%E5%85%A5%E9%97%A8%E8%AE%AD%E7%BB%83%20Fibonacci%E6%95%B0%E5%88%97/</url>
    <content><![CDATA[<h2 id="Fibonacci数列-题解"><a href="#Fibonacci数列-题解" class="headerlink" title="Fibonacci数列(题解)"></a>Fibonacci数列(题解)</h2><h4 id="Fibonacci数列的递推公式为：Fn-Fn-1-Fn-2，其中F1-F2-1。"><a href="#Fibonacci数列的递推公式为：Fn-Fn-1-Fn-2，其中F1-F2-1。" class="headerlink" title="Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。"></a>Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。</h4><h4 id="当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。"><a href="#当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。" class="headerlink" title="当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。"></a>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入包含一个整数n。"><a href="#输入包含一个整数n。" class="headerlink" title="输入包含一个整数n。"></a>输入包含一个整数n。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="输出一行，包含一个整数，表示Fn除以10007的余数。"><a href="#输出一行，包含一个整数，表示Fn除以10007的余数。" class="headerlink" title="输出一行，包含一个整数，表示Fn除以10007的余数。"></a>输出一行，包含一个整数，表示Fn除以10007的余数。</h4><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure>

<h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">22</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7704</span><br></pre></td></tr></table></figure>

<h4 id="我的代码如下"><a href="#我的代码如下" class="headerlink" title="我的代码如下:"></a>我的代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int f(int n)</span><br><span class="line">&#123;</span><br><span class="line">	if(n==1||n==2)</span><br><span class="line">		return 1;</span><br><span class="line">	else</span><br><span class="line">		return (f(n-1)+f(n-2))%10007;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	printf(&quot;%d&quot;,f(n));</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="仔细想想，怎么会这么简单，自己有点怀疑，果然只通过了30"><a href="#仔细想想，怎么会这么简单，自己有点怀疑，果然只通过了30" class="headerlink" title="仔细想想，怎么会这么简单，自己有点怀疑，果然只通过了30%."></a>仔细想想，怎么会这么简单，自己有点怀疑，果然只通过了30%.</h4><h4 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码:"></a>参考代码:</h4><h4 id="该思路对数列的每一项都进行了取模运算"><a href="#该思路对数列的每一项都进行了取模运算" class="headerlink" title="该思路对数列的每一项都进行了取模运算."></a>该思路对数列的每一项都进行了取模运算.</h4><h4 id="答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。"><a href="#答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。" class="headerlink" title="答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。"></a>答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	long long s=0,f1=1,f2=1,f3=1,n=0;</span><br><span class="line">	scanf(&quot;%lld&quot;,&amp;n);</span><br><span class="line">	if(n&gt;2)</span><br><span class="line">	&#123;</span><br><span class="line">		for(s=3;s&lt;=n;s++)</span><br><span class="line">		&#123;</span><br><span class="line">			f3=(f2+f1)%10007;</span><br><span class="line">			f1=f2;</span><br><span class="line">			f2=f3;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%lld&quot;,f3);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯 入门训练</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯--入门训练 圆的面积</title>
    <url>/2020/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF--%E5%85%A5%E9%97%A8%E8%AE%AD%E7%BB%83%20%E5%9C%86%E7%9A%84%E9%9D%A2%E7%A7%AF/</url>
    <content><![CDATA[<h2 id="圆的面积-题解"><a href="#圆的面积-题解" class="headerlink" title="圆的面积(题解)"></a>圆的面积(题解)</h2><h4 id="给定圆的半径r，求圆的面积。"><a href="#给定圆的半径r，求圆的面积。" class="headerlink" title="给定圆的半径r，求圆的面积。"></a>给定圆的半径r，求圆的面积。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入包含一个整数r，表示圆的半径。"><a href="#输入包含一个整数r，表示圆的半径。" class="headerlink" title="输入包含一个整数r，表示圆的半径。"></a>输入包含一个整数r，表示圆的半径。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。"><a href="#输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。" class="headerlink" title="输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。"></a>输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。</h4><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50.2654825</span><br></pre></td></tr></table></figure>

<h4 id="数据规模与约定-1-lt-r-lt-10000。"><a href="#数据规模与约定-1-lt-r-lt-10000。" class="headerlink" title="数据规模与约定 1 &lt;= r &lt;= 10000。"></a>数据规模与约定 1 &lt;= r &lt;= 10000。</h4><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><h4 id="1-本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI-3-14159265358979323，也可以使用数学公式来求π，比如PI-acos-1"><a href="#1-本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI-3-14159265358979323，也可以使用数学公式来求π，比如PI-acos-1" class="headerlink" title="1.本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=acos(-1)."></a>1.本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=acos(-1).</h4><h4 id="2-printf中-7f可以进行四舍六入五成双，必要时四舍五入可以用round-函数"><a href="#2-printf中-7f可以进行四舍六入五成双，必要时四舍五入可以用round-函数" class="headerlink" title="2.printf中%.7f可以进行四舍六入五成双，必要时四舍五入可以用round()函数"></a>2.printf中%.7f可以进行四舍六入五成双，必要时四舍五入可以用round()函数</h4><h4 id="我的代码如下"><a href="#我的代码如下" class="headerlink" title="我的代码如下:"></a>我的代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line"># define PI acos(-1)</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int r;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;r);</span><br><span class="line">	double area=PI*r*r;</span><br><span class="line">	printf(&quot;%.7f&quot;,area);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯 入门训练</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT--乙 1011 A+B和C</title>
    <url>/2020/02/11/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--PAT%20%E4%B9%99%201011%20A+B%E5%92%8CC/</url>
    <content><![CDATA[<h2 id="1011-A-B和C-题解"><a href="#1011-A-B和C-题解" class="headerlink" title="1011 A+B和C(题解)"></a>1011 A+B和C(题解)</h2><h4 id="给定区间-−2exp31-2exp31-内的-3-个整数-A、B-和-C，请判断-A-B-是否大于-C。"><a href="#给定区间-−2exp31-2exp31-内的-3-个整数-A、B-和-C，请判断-A-B-是否大于-C。" class="headerlink" title="给定区间 [−2exp31,2exp31 ] 内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。"></a>给定区间 [−2exp31,2exp31 ] 内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入第-1-行给出正整数-T-≤10-，是测试用例的个数。随后给出-T-组测试用例，每组占一行，顺序给出-A、B-和-C。整数间以空格分隔。"><a href="#输入第-1-行给出正整数-T-≤10-，是测试用例的个数。随后给出-T-组测试用例，每组占一行，顺序给出-A、B-和-C。整数间以空格分隔。" class="headerlink" title="输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。"></a>输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="对每组测试用例，在一行中输出-Case-X-true-如果-A-B-gt-C，否则输出-Case-X-false，其中-X-是测试用例的编号（从-1-开始）。"><a href="#对每组测试用例，在一行中输出-Case-X-true-如果-A-B-gt-C，否则输出-Case-X-false，其中-X-是测试用例的编号（从-1-开始）。" class="headerlink" title="对每组测试用例，在一行中输出 Case #X: true 如果 A+B&gt;C，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。"></a>对每组测试用例，在一行中输出 Case #X: true 如果 A+B&gt;C，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。</h4><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">2147483647 0 2147483646</span><br><span class="line">0 -2147483648 -2147483647</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: true</span><br><span class="line">Case #4: false</span><br></pre></td></tr></table></figure>

<h3 id="注意-a-b都在int范围内，但a-b就不一定了，所以a-b-c都用double存储"><a href="#注意-a-b都在int范围内，但a-b就不一定了，所以a-b-c都用double存储" class="headerlink" title="注意:a,b都在int范围内，但a+b就不一定了，所以a,b,c都用double存储."></a>注意:a,b都在int范围内，但a+b就不一定了，所以a,b,c都用double存储.</h3><h4 id="我的代码如下"><a href="#我的代码如下" class="headerlink" title="我的代码如下:"></a>我的代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int t;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">	for(int i=0;i&lt;t;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		double a,b,c;</span><br><span class="line">		scanf(&quot;%lf%lf%lf&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">		printf(&quot;Case #%d: &quot;,i+1);</span><br><span class="line">		if(a+b&gt;c)</span><br><span class="line">			printf(&quot;true\n&quot;);</span><br><span class="line">		else</span><br><span class="line">			printf(&quot;false\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT 乙</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--字符串处理(二)</title>
    <url>/2020/02/10/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86(%E4%BA%8C)/</url>
    <content><![CDATA[<h3 id="1-简单字符串"><a href="#1-简单字符串" class="headerlink" title="1.简单字符串"></a>1.简单字符串</h3><h4 id="输入一串仅包含-‘A’-‘Z’的字符串-用下面的方法进行重新编码"><a href="#输入一串仅包含-‘A’-‘Z’的字符串-用下面的方法进行重新编码" class="headerlink" title="输入一串仅包含 ‘A’ - ‘Z’的字符串, 用下面的方法进行重新编码:"></a>输入一串仅包含 ‘A’ - ‘Z’的字符串, 用下面的方法进行重新编码:</h4><h4 id="1-若子串包含连续k个相同的字符，则改为kX-其中X为这个子串中唯一的字符"><a href="#1-若子串包含连续k个相同的字符，则改为kX-其中X为这个子串中唯一的字符" class="headerlink" title="1. 若子串包含连续k个相同的字符，则改为kX; 其中X为这个子串中唯一的字符."></a>1. 若子串包含连续k个相同的字符，则改为kX; 其中X为这个子串中唯一的字符.</h4><h4 id="2-如果子串中字符仅为1个时-则前面的’1’则省去"><a href="#2-如果子串中字符仅为1个时-则前面的’1’则省去" class="headerlink" title="2. 如果子串中字符仅为1个时, 则前面的’1’则省去."></a>2. 如果子串中字符仅为1个时, 则前面的’1’则省去.</h4><h4 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="第一行输入为一个整数N-1-lt-N-lt-100-代表有几组测试数据-下面紧跟N行字符串-每个字符串仅包含’A’-‘Z’-并且长度都小于-10000"><a href="#第一行输入为一个整数N-1-lt-N-lt-100-代表有几组测试数据-下面紧跟N行字符串-每个字符串仅包含’A’-‘Z’-并且长度都小于-10000" class="headerlink" title="第一行输入为一个整数N (1 &lt;= N &lt;= 100)代表有几组测试数据. 下面紧跟N行字符串. 每个字符串仅包含’A’ - ‘Z’ 并且长度都小于 10000."></a>第一行输入为一个整数N (1 &lt;= N &lt;= 100)代表有几组测试数据. 下面紧跟N行字符串. 每个字符串仅包含’A’ - ‘Z’ 并且长度都小于 10000.</h5><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="对于每个字符串-输出对应解码后的字符串"><a href="#对于每个字符串-输出对应解码后的字符串" class="headerlink" title="对于每个字符串, 输出对应解码后的字符串."></a>对于每个字符串, 输出对应解码后的字符串.</h5><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">ABC</span><br><span class="line">ABBCCC</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ABC</span><br><span class="line">A2B3C</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><h4 id="1-每次处理完后对str字符串和哈希数组的清空"><a href="#1-每次处理完后对str字符串和哈希数组的清空" class="headerlink" title="1.每次处理完后对str字符串和哈希数组的清空."></a>1.每次处理完后对str字符串和哈希数组的清空.</h4><h4 id="2-注意先输入n的值，再利用循环接收n个字符串"><a href="#2-注意先输入n的值，再利用循环接收n个字符串" class="headerlink" title="2.注意先输入n的值，再利用循环接收n个字符串."></a>2.注意先输入n的值，再利用循环接收n个字符串.</h4><h4 id="3-利用哈希数组时，H-0-H-25-对应A-Z，A对应的ASII码为65-对应H-0-时要减去65"><a href="#3-利用哈希数组时，H-0-H-25-对应A-Z，A对应的ASII码为65-对应H-0-时要减去65" class="headerlink" title="3.利用哈希数组时，H[0]-H[25]对应A-Z，A对应的ASII码为65,对应H[0]时要减去65."></a>3.利用哈希数组时，H[0]-H[25]对应A-Z，A对应的ASII码为65,对应H[0]时要减去65.</h4><h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><h4 id="利用字符串和哈希数组解题，先输入n的值，再接收n个字符串str，在字符串str中对每个个字符出现的数量利用哈希数组进行计数，再根据哈希数组中存储的数量进行计数"><a href="#利用字符串和哈希数组解题，先输入n的值，再接收n个字符串str，在字符串str中对每个个字符出现的数量利用哈希数组进行计数，再根据哈希数组中存储的数量进行计数" class="headerlink" title="利用字符串和哈希数组解题，先输入n的值，再接收n个字符串str，在字符串str中对每个个字符出现的数量利用哈希数组进行计数，再根据哈希数组中存储的数量进行计数."></a>利用字符串和哈希数组解题，先输入n的值，再接收n个字符串str，在字符串str中对每个个字符出现的数量利用哈希数组进行计数，再根据哈希数组中存储的数量进行计数.</h4><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char str[10010];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	for(int i=0;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		str[10010]=&#123;&apos;0&apos;&#125;;		//字符串清空</span><br><span class="line">		scanf(&quot;%s&quot;,str);</span><br><span class="line">		int len =strlen(str);		//字符串的长度</span><br><span class="line">		int H[26]=&#123;0&#125;;</span><br><span class="line">		for(int i=0;i&lt;len;i++)	//记录每个字符的数量</span><br><span class="line">			H[str[i]-65]++;</span><br><span class="line">		for(int i=0;i&lt;26;i++)		//对数量不为0的字符进行输出</span><br><span class="line">		&#123;</span><br><span class="line">			if(H[i]==1)</span><br><span class="line">				printf(&quot;%c&quot;,i+65);</span><br><span class="line">			if(H[i]&gt;1)</span><br><span class="line">				printf(&quot;%d%c&quot;,H[i],i+65);</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--二分(一)</title>
    <url>/2020/02/09/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E4%BA%8C%E5%88%86(%E4%B8%80)/</url>
    <content><![CDATA[<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><h4 id="二分查找是基于有序序列的查找算法-该算法一开始令-low-high-为整个区间的下标区间，然后每次测试当前-left-high-的中间位置mid-low-high-2-判断A-mid-与欲查询的元素n的大小。"><a href="#二分查找是基于有序序列的查找算法-该算法一开始令-low-high-为整个区间的下标区间，然后每次测试当前-left-high-的中间位置mid-low-high-2-判断A-mid-与欲查询的元素n的大小。" class="headerlink" title="二分查找是基于有序序列的查找算法,该算法一开始令[low,high]为整个区间的下标区间，然后每次测试当前[left,high]的中间位置mid=(low+high)/2,判断A[mid]与欲查询的元素n的大小。"></a>二分查找是基于有序序列的查找算法,该算法一开始令[low,high]为整个区间的下标区间，然后每次测试当前[left,high]的中间位置mid=(low+high)/2,判断A[mid]与欲查询的元素n的大小。</h4><h4 id="参考代码如下"><a href="#参考代码如下" class="headerlink" title="参考代码如下:"></a>参考代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;n)==1)</span><br><span class="line">	&#123;</span><br><span class="line">		int A[10]=&#123;3,7,8,11,15,21,33,52,66,88&#125;;</span><br><span class="line">		int low=0,high=9,k=-1;</span><br><span class="line">		while(low&lt;=high)</span><br><span class="line">		&#123;</span><br><span class="line">			int mid=(low+high)/2;</span><br><span class="line">			if(A[mid]==n)</span><br><span class="line">			&#123;</span><br><span class="line">				k=mid;</span><br><span class="line">				break;;</span><br><span class="line">			&#125;</span><br><span class="line">			else if(A[mid]&gt;n)</span><br><span class="line">				high=mid-1;</span><br><span class="line">			else</span><br><span class="line">				low=mid+1;	 </span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;%d\n&quot;,k);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="求序列中第一个大于等于x的元素的位置L。"><a href="#求序列中第一个大于等于x的元素的位置L。" class="headerlink" title="求序列中第一个大于等于x的元素的位置L。"></a>求序列中第一个大于等于x的元素的位置L。</h4><h4 id="思路-如果A-mid-gt-x-则要求的位置一定在mid处或者mid左侧-令high-mid-否则一定在mid右侧-令low-mid-1"><a href="#思路-如果A-mid-gt-x-则要求的位置一定在mid处或者mid左侧-令high-mid-否则一定在mid右侧-令low-mid-1" class="headerlink" title="思路:如果A[mid]&gt;=x,则要求的位置一定在mid处或者mid左侧,令high=mid,否则一定在mid右侧,令low=mid+1;"></a>思路:如果A[mid]&gt;=x,则要求的位置一定在mid处或者mid左侧,令high=mid,否则一定在mid右侧,令low=mid+1;</h4><h4 id="注意-循环条件为low-lt-high-low-high时跳出循环，刚好夹出唯一的位置，就是需要的结果"><a href="#注意-循环条件为low-lt-high-low-high时跳出循环，刚好夹出唯一的位置，就是需要的结果" class="headerlink" title="注意:循环条件为low&lt;high,low=high时跳出循环，刚好夹出唯一的位置，就是需要的结果."></a>注意:循环条件为low&lt;high,low=high时跳出循环，刚好夹出唯一的位置，就是需要的结果.</h4><h4 id="参考代码如下-1"><a href="#参考代码如下-1" class="headerlink" title="参考代码如下:"></a>参考代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int A[5]=&#123;1,3,3,3,6&#125;,n;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;n)==1)</span><br><span class="line">	&#123;	</span><br><span class="line">		int low=0,high=5;</span><br><span class="line">		while(low&lt;high)</span><br><span class="line">		&#123;</span><br><span class="line">			int mid=(low+high)/2;</span><br><span class="line">			if(A[mid]&gt;=n)</span><br><span class="line">				high=mid;</span><br><span class="line">			else</span><br><span class="line">				low=mid+1;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;L=%d\n&quot;,low);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="求序列中第一个大于x的元素的位置"><a href="#求序列中第一个大于x的元素的位置" class="headerlink" title="求序列中第一个大于x的元素的位置"></a>求序列中第一个大于x的元素的位置</h4><h4 id="思路-如果A-mid-gt-x-则要求的位置一定在mid处或者mid左侧-令high-mid-否则一定在mid右侧-令low-mid-1-1"><a href="#思路-如果A-mid-gt-x-则要求的位置一定在mid处或者mid左侧-令high-mid-否则一定在mid右侧-令low-mid-1-1" class="headerlink" title="思路:如果A[mid]&gt;x,则要求的位置一定在mid处或者mid左侧,令high=mid,否则一定在mid右侧,令low=mid+1;"></a>思路:如果A[mid]&gt;x,则要求的位置一定在mid处或者mid左侧,令high=mid,否则一定在mid右侧,令low=mid+1;</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	int A[5]=&#123;1,3,3,3,6&#125;;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;n)==1)</span><br><span class="line">	&#123;</span><br><span class="line">		int low=0,high=5;</span><br><span class="line">		while(low&lt;high)</span><br><span class="line">		&#123;</span><br><span class="line">			int mid=(low+high)/2;</span><br><span class="line">			if(A[mid]&gt;n)</span><br><span class="line">				high=mid;</span><br><span class="line">			else</span><br><span class="line">				low=mid+1;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;R=%d\n&quot;,high);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板-寻找第一个满足某条件的元素的位置-如果寻找最后一个满足条件C的，可以寻找第一个满足条件-C的，然后将该位置减1"><a href="#模板-寻找第一个满足某条件的元素的位置-如果寻找最后一个满足条件C的，可以寻找第一个满足条件-C的，然后将该位置减1" class="headerlink" title="模板:寻找第一个满足某条件的元素的位置(如果寻找最后一个满足条件C的，可以寻找第一个满足条件!C的，然后将该位置减1)"></a>模板:寻找第一个满足某条件的元素的位置(如果寻找最后一个满足条件C的，可以寻找第一个满足条件!C的，然后将该位置减1)</h3><h4 id="左闭右闭-low-higjh"><a href="#左闭右闭-low-higjh" class="headerlink" title="左闭右闭[low,higjh]"></a>左闭右闭[low,higjh]</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(low&lt;high)</span><br><span class="line">&#123;</span><br><span class="line">	int mid=(low+high)/2;</span><br><span class="line">	if(条件成立)</span><br><span class="line">		high=mid;</span><br><span class="line">	else</span><br><span class="line">		low=mid+1;</span><br><span class="line">&#125;</span><br><span class="line">return low;</span><br></pre></td></tr></table></figure>

<h4 id="左开右闭-low-high"><a href="#左开右闭-low-high" class="headerlink" title="左开右闭(low,high)"></a>左开右闭(low,high)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(low+1&lt;high)</span><br><span class="line">&#123;</span><br><span class="line">	int mid=(low+high)/2;</span><br><span class="line">	if(条件成立)</span><br><span class="line">		high=mid;</span><br><span class="line">	else</span><br><span class="line">		low=mid;</span><br><span class="line">&#125;</span><br><span class="line">return right;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT--乙 1023 组个最小数</title>
    <url>/2020/02/08/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--PAT%20%E4%B9%99%201023%20%E7%BB%84%E4%B8%AA%E6%9C%80%E5%B0%8F%E6%95%B0/</url>
    <content><![CDATA[<h2 id="1023-组个最小数-题解"><a href="#1023-组个最小数-题解" class="headerlink" title="1023 组个最小数(题解)"></a>1023 组个最小数(题解)</h2><h4 id="给定数字-0-9-各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意-0-不能做首位）。例如：给定两个-0，两个-1，三个-5，一个-8，我们得到的最小的数就是-10015558。"><a href="#给定数字-0-9-各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意-0-不能做首位）。例如：给定两个-0，两个-1，三个-5，一个-8，我们得到的最小的数就是-10015558。" class="headerlink" title="给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。"></a>给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。</h4><h4 id="现给定数字，请编写程序输出能够组成的最小的数。"><a href="#现给定数字，请编写程序输出能够组成的最小的数。" class="headerlink" title="现给定数字，请编写程序输出能够组成的最小的数。"></a>现给定数字，请编写程序输出能够组成的最小的数。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入在一行中给出-10-个非负整数，顺序表示我们拥有数字-0、数字-1、……数字-9-的个数。整数间用一个空格分隔。10-个数字的总个数不超过-50，且至少拥有-1-个非-0-的数字。"><a href="#输入在一行中给出-10-个非负整数，顺序表示我们拥有数字-0、数字-1、……数字-9-的个数。整数间用一个空格分隔。10-个数字的总个数不超过-50，且至少拥有-1-个非-0-的数字。" class="headerlink" title="输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。"></a>输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="在一行中输出能够组成的最小的数。"><a href="#在一行中输出能够组成的最小的数。" class="headerlink" title="在一行中输出能够组成的最小的数。"></a>在一行中输出能够组成的最小的数。</h4><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 2 0 0 0 3 0 0 1 0</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10015558</span><br></pre></td></tr></table></figure>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><h4 id="利用数组接收0-9数字的个数，找出第一个比0大且数量不为0的数字，输出，该数字所对应的数量减一，再从0开始，依次输出数量不为0的数字"><a href="#利用数组接收0-9数字的个数，找出第一个比0大且数量不为0的数字，输出，该数字所对应的数量减一，再从0开始，依次输出数量不为0的数字" class="headerlink" title="利用数组接收0-9数字的个数，找出第一个比0大且数量不为0的数字，输出，该数字所对应的数量减一，再从0开始，依次输出数量不为0的数字."></a>利用数组接收0-9数字的个数，找出第一个比0大且数量不为0的数字，输出，该数字所对应的数量减一，再从0开始，依次输出数量不为0的数字.</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;	</span><br><span class="line">	int b[10]=&#123;0&#125;;</span><br><span class="line">	for(int i=0;i&lt;10;i++)</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;b[i]);	</span><br><span class="line">	for(int i=1;i&lt;10;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(b[i]!=0)		//查找第一个数量不为0的数字，并输出,数量减一.</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;%d&quot;,i);</span><br><span class="line">			b[i]--;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=0;i&lt;10;i++)		//从0开始，输出数量不为0的数字，输出b[i]个.</span><br><span class="line">	&#123;</span><br><span class="line">		if(b[i]!=0)</span><br><span class="line">			for(int j=0;j&lt;b[i];j++)</span><br><span class="line">				printf(&quot;%d&quot;,i);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT 乙</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT--乙 1020 月饼</title>
    <url>/2020/02/08/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--PAT%20%E4%B9%99%201020%20%E6%9C%88%E9%A5%BC/</url>
    <content><![CDATA[<h2 id="1020-月饼-题解"><a href="#1020-月饼-题解" class="headerlink" title="1020 月饼(题解)"></a>1020 月饼(题解)</h2><h4 id="月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。"><a href="#月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。" class="headerlink" title="月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。"></a>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</h4><h4 id="注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有-3-种月饼，其库存量分别为-18、15、10-万吨，总售价分别为-75、72、45-亿元。如果市场的最大需求量只有-20-万吨，那么我们最大收益策略应该是卖出全部-15-万吨第-2-种月饼、以及-5-万吨第-3-种月饼，获得-72-45-2-94-5（亿元）"><a href="#注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有-3-种月饼，其库存量分别为-18、15、10-万吨，总售价分别为-75、72、45-亿元。如果市场的最大需求量只有-20-万吨，那么我们最大收益策略应该是卖出全部-15-万吨第-2-种月饼、以及-5-万吨第-3-种月饼，获得-72-45-2-94-5（亿元）" class="headerlink" title="注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）"></a>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="每个输入包含一个测试用例。每个测试用例先给出一个不超过-1000-的正整数-N-表示月饼的种类数、以及不超过-500（以万吨为单位）的正整数-D-表示市场最大需求量。随后一行给出-N-个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出-N-个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。"><a href="#每个输入包含一个测试用例。每个测试用例先给出一个不超过-1000-的正整数-N-表示月饼的种类数、以及不超过-500（以万吨为单位）的正整数-D-表示市场最大需求量。随后一行给出-N-个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出-N-个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。" class="headerlink" title="每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 D 表示市场最大需求量。随后一行给出 N 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 N 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。"></a>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 D 表示市场最大需求量。随后一行给出 N 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 N 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后-2-位。"><a href="#对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后-2-位。" class="headerlink" title="对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。"></a>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</h4><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 20</span><br><span class="line">18 15 10</span><br><span class="line">75 72 45</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">94.50</span><br></pre></td></tr></table></figure>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><h4 id="根据月饼的单价，总是选择单价最高的月饼来进行出售以获得最大的利润，用结构体接收每种月饼库存量和最大需求量-并计算出各自的单价，并对单价进行排序，从单价最高的月饼开始枚举，计算最大收益值"><a href="#根据月饼的单价，总是选择单价最高的月饼来进行出售以获得最大的利润，用结构体接收每种月饼库存量和最大需求量-并计算出各自的单价，并对单价进行排序，从单价最高的月饼开始枚举，计算最大收益值" class="headerlink" title="根据月饼的单价，总是选择单价最高的月饼来进行出售以获得最大的利润，用结构体接收每种月饼库存量和最大需求量,并计算出各自的单价，并对单价进行排序，从单价最高的月饼开始枚举，计算最大收益值."></a>根据月饼的单价，总是选择单价最高的月饼来进行出售以获得最大的利润，用结构体接收每种月饼库存量和最大需求量,并计算出各自的单价，并对单价进行排序，从单价最高的月饼开始枚举，计算最大收益值.</h4><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><h4 id="月饼的库存量和总售价为正数，没说是整数，所以要用double存储，需求量D虽说是正整数，为了与库存量计算方便，D也设为double型，注意各个变量的接收，double要用-lf接收。"><a href="#月饼的库存量和总售价为正数，没说是整数，所以要用double存储，需求量D虽说是正整数，为了与库存量计算方便，D也设为double型，注意各个变量的接收，double要用-lf接收。" class="headerlink" title="月饼的库存量和总售价为正数，没说是整数，所以要用double存储，需求量D虽说是正整数，为了与库存量计算方便，D也设为double型，注意各个变量的接收，double要用%lf接收。"></a>月饼的库存量和总售价为正数，没说是整数，所以要用double存储，需求量D虽说是正整数，为了与库存量计算方便，D也设为double型，注意各个变量的接收，double要用%lf接收。</h4><h4 id="我的代码如下"><a href="#我的代码如下" class="headerlink" title="我的代码如下:"></a>我的代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">struct cake</span><br><span class="line">&#123;</span><br><span class="line">	double store;	//库存量</span><br><span class="line">	double sell;	//总售价</span><br><span class="line">	double price;	//单价</span><br><span class="line">&#125;mooncake[1010];</span><br><span class="line">bool cmp(cake a,cake b)		//排序规则，对价格从大到小排序</span><br><span class="line">&#123;</span><br><span class="line">	return a.price&gt;b.price;</span><br><span class="line">&#125;</span><br><span class="line">using  namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N;</span><br><span class="line">	double D;</span><br><span class="line">	scanf(&quot;%d%lf&quot;,&amp;N,&amp;D);</span><br><span class="line">	for(int i=0;i&lt;N;i++)		//接收每种月饼的库存量</span><br><span class="line">		scanf(&quot;%lf&quot;,&amp;mooncake[i].store);</span><br><span class="line">	for(int i=0;i&lt;N;i++)	//接收每种月饼的总售价，并计算单价.</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%lf&quot;,&amp;mooncake[i].sell);</span><br><span class="line">		mooncake[i].price=mooncake[i].sell/mooncake[i].store;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(mooncake,mooncake+N,cmp);	//按价格进行排序.</span><br><span class="line">	double ans=0;			//最大收益值</span><br><span class="line">	for(int i=0;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(mooncake[i].store&lt;=D)	//如果某种月饼的库存量小于等于市场需求量，市场需求量减去该月饼的库存量，最大收益值加上该月饼的总售价</span><br><span class="line">		&#123;</span><br><span class="line">			D-=mooncake[i].store;</span><br><span class="line">			ans+=mooncake[i].sell; </span><br><span class="line">		&#125;//否则最大收益值加上该月饼的单价乘以市场需求量，跳出循环</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			ans+=mooncake[i].price*D;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%.2f\n&quot;,ans);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT 乙</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛-- 贪心</title>
    <url>/2020/02/08/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<h3 id="贪心-贪心法是求解一类最优化问题的方法-它总是考虑在当前状态下局部最优-或较优-的策略，来使全局的结果达到最优-或较优-。"><a href="#贪心-贪心法是求解一类最优化问题的方法-它总是考虑在当前状态下局部最优-或较优-的策略，来使全局的结果达到最优-或较优-。" class="headerlink" title="贪心:贪心法是求解一类最优化问题的方法,它总是考虑在当前状态下局部最优(或较优)的策略，来使全局的结果达到最优(或较优)。"></a>贪心:贪心法是求解一类最优化问题的方法,它总是考虑在当前状态下局部最优(或较优)的策略，来使全局的结果达到最优(或较优)。</h3><h3 id="贪心算法适用的问题一定满足最优子结构性质-即一个问题的最优解可以由它的子问题的最优解有效的构造出来"><a href="#贪心算法适用的问题一定满足最优子结构性质-即一个问题的最优解可以由它的子问题的最优解有效的构造出来" class="headerlink" title="贪心算法适用的问题一定满足最优子结构性质,即一个问题的最优解可以由它的子问题的最优解有效的构造出来."></a>贪心算法适用的问题一定满足最优子结构性质,即一个问题的最优解可以由它的子问题的最优解有效的构造出来.</h3><h3 id="1-区间不相交问题"><a href="#1-区间不相交问题" class="headerlink" title="1.区间不相交问题"></a>1.区间不相交问题</h3><h4 id="给出N个开区间-x-y-从中选择尽可能多的开区间，使得这些开区间两两没有交集"><a href="#给出N个开区间-x-y-从中选择尽可能多的开区间，使得这些开区间两两没有交集" class="headerlink" title="给出N个开区间(x,y),从中选择尽可能多的开区间，使得这些开区间两两没有交集,"></a>给出N个开区间(x,y),从中选择尽可能多的开区间，使得这些开区间两两没有交集,</h4><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">3 5</span><br><span class="line">6 7</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="思路-总是选择左端点的最大区间"><a href="#思路-总是选择左端点的最大区间" class="headerlink" title="思路:总是选择左端点的最大区间."></a>思路:总是选择左端点的最大区间.</h4><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">struct Interval</span><br><span class="line">&#123;</span><br><span class="line">	int x1,x2;</span><br><span class="line">&#125;I[105];</span><br><span class="line">using namespace std;</span><br><span class="line">bool cmp(Interval a,Interval b)//排序规则,对左端点进行从大到小排序,左端点相同右端点从小到大排序.</span><br><span class="line">&#123;</span><br><span class="line">	if(a.x1!=b.x1)</span><br><span class="line">		return a.x1&gt;b.x1;</span><br><span class="line">	else</span><br><span class="line">		return a.x2&lt;b.x2;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	for(int i=0;i&lt;n;i++)</span><br><span class="line">		scanf(&quot;%d %d&quot;,&amp;I[i].x1,&amp;I[i].x2);</span><br><span class="line">	sort(I,I+n,cmp);</span><br><span class="line">	int count=1,last=I[0].x1;		//count记录不相交区间的个数,last记录上一个被选中区间的左端点.</span><br><span class="line">	for(int i=1;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(I[i].x2&lt;=last)	//如果该区间的右端点小于等于上一被选中区间的左端点。last更新一次，个数更新一次.</span><br><span class="line">		&#123;</span><br><span class="line">			last=I[i].x1;</span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%d\n&quot;,count);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="与该题相似的为-区间选点问题。"><a href="#与该题相似的为-区间选点问题。" class="headerlink" title="与该题相似的为 区间选点问题。"></a>与该题相似的为 区间选点问题。</h3><h4 id="给出N个闭区间-x-y-求最少需要确定多少个点-才能使每个闭区间中至少存在一个点。"><a href="#给出N个闭区间-x-y-求最少需要确定多少个点-才能使每个闭区间中至少存在一个点。" class="headerlink" title="给出N个闭区间[x,y],求最少需要确定多少个点,才能使每个闭区间中至少存在一个点。"></a>给出N个闭区间[x,y],求最少需要确定多少个点,才能使每个闭区间中至少存在一个点。</h4><h4 id="只需将-I-i-x2-lt-last-改为I-i-x2-lt-last即可"><a href="#只需将-I-i-x2-lt-last-改为I-i-x2-lt-last即可" class="headerlink" title="只需将 I[i].x2&lt;=last 改为I[i].x2&lt;last即可."></a>只需将 I[i].x2&lt;=last 改为I[i].x2&lt;last即可.</h4><h3 id="2-看电视"><a href="#2-看电视" class="headerlink" title="2.看电视"></a>2.看电视</h3><h4 id="暑假到了，小明终于可以开心的看电视了。但是小明喜欢的节目太多了，他希望尽量多的看到完整的节目。"><a href="#暑假到了，小明终于可以开心的看电视了。但是小明喜欢的节目太多了，他希望尽量多的看到完整的节目。" class="headerlink" title="暑假到了，小明终于可以开心的看电视了。但是小明喜欢的节目太多了，他希望尽量多的看到完整的节目。"></a>暑假到了，小明终于可以开心的看电视了。但是小明喜欢的节目太多了，他希望尽量多的看到完整的节目。</h4><h4 id="现在他把他喜欢的电视节目的转播时间表给你，你能帮他合理安排吗？"><a href="#现在他把他喜欢的电视节目的转播时间表给你，你能帮他合理安排吗？" class="headerlink" title="现在他把他喜欢的电视节目的转播时间表给你，你能帮他合理安排吗？"></a>现在他把他喜欢的电视节目的转播时间表给你，你能帮他合理安排吗？</h4><h3 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h3><h4 id="输入包含多组测试数据。每组输入的第一行是一个整数n（n-lt-100），表示小明喜欢的节目的总数。"><a href="#输入包含多组测试数据。每组输入的第一行是一个整数n（n-lt-100），表示小明喜欢的节目的总数。" class="headerlink" title="输入包含多组测试数据。每组输入的第一行是一个整数n（n&lt;=100），表示小明喜欢的节目的总数。"></a>输入包含多组测试数据。每组输入的第一行是一个整数n（n&lt;=100），表示小明喜欢的节目的总数。</h4><h4 id="接下来n行，每行输入两个整数si和ei（1-lt-i-lt-n），表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。"><a href="#接下来n行，每行输入两个整数si和ei（1-lt-i-lt-n），表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。" class="headerlink" title="接下来n行，每行输入两个整数si和ei（1&lt;=i&lt;=n），表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。"></a>接下来n行，每行输入两个整数si和ei（1&lt;=i&lt;=n），表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。</h4><h4 id="当n-0时，输入结束。"><a href="#当n-0时，输入结束。" class="headerlink" title="当n=0时，输入结束。"></a>当n=0时，输入结束。</h4><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="对于每组输入，输出能完整看到的电视节目的个数。"><a href="#对于每组输入，输出能完整看到的电视节目的个数。" class="headerlink" title="对于每组输入，输出能完整看到的电视节目的个数。"></a>对于每组输入，输出能完整看到的电视节目的个数。</h5><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">1 3</span><br><span class="line">3 4</span><br><span class="line">0 7</span><br><span class="line">3 8</span><br><span class="line">15 19</span><br><span class="line">15 20</span><br><span class="line">10 15</span><br><span class="line">8 18</span><br><span class="line">6 12</span><br><span class="line">5 10</span><br><span class="line">4 14</span><br><span class="line">2 9</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="思路-该题即为区间不想交问题"><a href="#思路-该题即为区间不想交问题" class="headerlink" title="思路:该题即为区间不想交问题."></a>思路:该题即为区间不想交问题.</h4><h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct Interval</span><br><span class="line">&#123;</span><br><span class="line">	int x1,x2;</span><br><span class="line">&#125;I[105];</span><br><span class="line">bool cmp(Interval a,Interval b)</span><br><span class="line">&#123;</span><br><span class="line">	if(a.x1!=b.x1)</span><br><span class="line">		return a.x1&gt;b.x1;</span><br><span class="line">	else</span><br><span class="line">		return a.x2&lt;b.x2;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;n)==1 &amp;&amp; n)</span><br><span class="line">	&#123;</span><br><span class="line">		for(int i=0;i&lt;n;i++)</span><br><span class="line">			scanf(&quot;%d %d&quot;,&amp;I[i].x1,&amp;I[i].x2);</span><br><span class="line">		sort(I,I+n,cmp);</span><br><span class="line">		int count=1,last=I[0].x1;</span><br><span class="line">		for(int i=1;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(I[i].x2&lt;=last)</span><br><span class="line">			&#123;</span><br><span class="line">				count++;</span><br><span class="line">				last=I[i].x1;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;%d\n&quot;,count);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-数列"><a href="#5-数列" class="headerlink" title="5.数列"></a>5.数列</h3><h4 id="编写一个求斐波那契数列的递归函数，输入n-值，使用该递归函数，输出如下图形（参见样例）。"><a href="#编写一个求斐波那契数列的递归函数，输入n-值，使用该递归函数，输出如下图形（参见样例）。" class="headerlink" title="编写一个求斐波那契数列的递归函数，输入n 值，使用该递归函数，输出如下图形（参见样例）。"></a>编写一个求斐波那契数列的递归函数，输入n 值，使用该递归函数，输出如下图形（参见样例）。</h4><h4 id="输入信息-1"><a href="#输入信息-1" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入第一行为样例数m，接下来有m行每行一个整数n，n不超过10。"><a href="#输入第一行为样例数m，接下来有m行每行一个整数n，n不超过10。" class="headerlink" title="输入第一行为样例数m，接下来有m行每行一个整数n，n不超过10。"></a>输入第一行为样例数m，接下来有m行每行一个整数n，n不超过10。</h5><h4 id="输出信息-1"><a href="#输出信息-1" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="对应每个样例输出要求的图形-参见样例格式-。"><a href="#对应每个样例输出要求的图形-参见样例格式-。" class="headerlink" title="对应每个样例输出要求的图形(参见样例格式)。"></a>对应每个样例输出要求的图形(参见样例格式)。</h5><h5 id="输出只有1行，即名名吃巧克力的方案数。"><a href="#输出只有1行，即名名吃巧克力的方案数。" class="headerlink" title="输出只有1行，即名名吃巧克力的方案数。"></a>输出只有1行，即名名吃巧克力的方案数。</h5><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">          0</span><br><span class="line">        0 1 1</span><br><span class="line">      0 1 1 2 3</span><br><span class="line">    0 1 1 2 3 5 8</span><br><span class="line">  0 1 1 2 3 5 8 13 21</span><br><span class="line">0 1 1 2 3 5 8 13 21 34 55</span><br></pre></td></tr></table></figure>

<h4 id="思路-该题利用斐波那切数列解题，输出m行数，每行从第0项开始，总共2m-1个数。"><a href="#思路-该题利用斐波那切数列解题，输出m行数，每行从第0项开始，总共2m-1个数。" class="headerlink" title="思路:该题利用斐波那切数列解题，输出m行数，每行从第0项开始，总共2m-1个数。"></a>思路:该题利用斐波那切数列解题，输出m行数，每行从第0项开始，总共2m-1个数。</h4><h4 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int ff(int n)</span><br><span class="line">&#123;</span><br><span class="line">	if(n==0)</span><br><span class="line">		return 0;</span><br><span class="line">	else if(n==1)</span><br><span class="line">		return 1;</span><br><span class="line">	else</span><br><span class="line">		return ff(n-1)+ff(n-2);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,m;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;n)==1)		//测试样例数</span><br><span class="line">	&#123;</span><br><span class="line">		for(int k=0;k&lt;n;k++)</span><br><span class="line">		&#123;</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;m);		//输入m</span><br><span class="line">			for(int i=1;i&lt;=m;i++) 	//输出m行</span><br><span class="line">			&#123;</span><br><span class="line">				for(int j=0;j&lt;2*(m-i);j++)//输出空格</span><br><span class="line">					printf(&quot; &quot;);</span><br><span class="line">				for(int j=0;j&lt;2*i-1;j++)	//输出数字</span><br><span class="line">				&#123;</span><br><span class="line">					printf(&quot;%d&quot;,ff(j));</span><br><span class="line">					if(j&lt;2*(i-1))</span><br><span class="line">						printf(&quot; &quot;);	</span><br><span class="line">				&#125;</span><br><span class="line">				printf(&quot;\n&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-神奇的口袋"><a href="#6-神奇的口袋" class="headerlink" title="6.神奇的口袋"></a>6.神奇的口袋</h3><h4 id="有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。John现在有n个想要得到的物品，每个物品的体积分别是a1，a2……an。John可以从这些物品中选择一些，如果选出的物体的总体积是40，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。"><a href="#有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。John现在有n个想要得到的物品，每个物品的体积分别是a1，a2……an。John可以从这些物品中选择一些，如果选出的物体的总体积是40，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。" class="headerlink" title="有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。John现在有n个想要得到的物品，每个物品的体积分别是a1，a2……an。John可以从这些物品中选择一些，如果选出的物体的总体积是40，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。"></a>有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。John现在有n个想要得到的物品，每个物品的体积分别是a1，a2……an。John可以从这些物品中选择一些，如果选出的物体的总体积是40，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。</h4><h4 id="输入信息-2"><a href="#输入信息-2" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入的第一行是正整数n-1-lt-n-lt-20-，表示不同的物品的数目。接下来的n行，每行有一个1到40之间的正整数，分别给出a1，a2……an的值。"><a href="#输入的第一行是正整数n-1-lt-n-lt-20-，表示不同的物品的数目。接下来的n行，每行有一个1到40之间的正整数，分别给出a1，a2……an的值。" class="headerlink" title="输入的第一行是正整数n (1 &lt;= n &lt;= 20)，表示不同的物品的数目。接下来的n行，每行有一个1到40之间的正整数，分别给出a1，a2……an的值。"></a>输入的第一行是正整数n (1 &lt;= n &lt;= 20)，表示不同的物品的数目。接下来的n行，每行有一个1到40之间的正整数，分别给出a1，a2……an的值。</h5><h4 id="输出信息-2"><a href="#输出信息-2" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出不同的选择物品的方式的数目。"><a href="#输出不同的选择物品的方式的数目。" class="headerlink" title="输出不同的选择物品的方式的数目。"></a>输出不同的选择物品的方式的数目。</h5><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">12</span><br><span class="line">28</span><br><span class="line">3</span><br><span class="line">21</span><br><span class="line">10</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="思路-从0开始-思路是用40减去good-0-，然后用余数继续与后面数组中的元素相减，看结果是否为0，若为0，表示这样排列满足条件，count-。若不为0，则继续往下走，直到余数小于0或者数组中的数已经全部读完，这样一次查找就完成了，接着需要回退到上一步去继续寻找下一个包含good-0-的可能组合。就比如进行到40-good-0-good-1-时发现余数为0满足条件，count-1，然后回退到40-good-0-，跳过good-1-，去检查40-good-0-good-2-是否满足条件，如此往复，直到检查到40-good-0-good-n-1-为止"><a href="#思路-从0开始-思路是用40减去good-0-，然后用余数继续与后面数组中的元素相减，看结果是否为0，若为0，表示这样排列满足条件，count-。若不为0，则继续往下走，直到余数小于0或者数组中的数已经全部读完，这样一次查找就完成了，接着需要回退到上一步去继续寻找下一个包含good-0-的可能组合。就比如进行到40-good-0-good-1-时发现余数为0满足条件，count-1，然后回退到40-good-0-，跳过good-1-，去检查40-good-0-good-2-是否满足条件，如此往复，直到检查到40-good-0-good-n-1-为止" class="headerlink" title="思路:从0开始,思路是用40减去good[0]，然后用余数继续与后面数组中的元素相减，看结果是否为0，若为0，表示这样排列满足条件，count++。若不为0，则继续往下走，直到余数小于0或者数组中的数已经全部读完，这样一次查找就完成了，接着需要回退到上一步去继续寻找下一个包含good[0]的可能组合。就比如进行到40-good[0]-good[1]时发现余数为0满足条件，count+1，然后回退到40-good[0]，跳过good[1]，去检查40-good[0]-good[2]是否满足条件，如此往复，直到检查到40-good[0]-good[n-1]为止"></a>思路:从0开始,思路是用40减去good[0]，然后用余数继续与后面数组中的元素相减，看结果是否为0，若为0，表示这样排列满足条件，count++。若不为0，则继续往下走，直到余数小于0或者数组中的数已经全部读完，这样一次查找就完成了，接着需要回退到上一步去继续寻找下一个包含good[0]的可能组合。就比如进行到40-good[0]-good[1]时发现余数为0满足条件，count+1，然后回退到40-good[0]，跳过good[1]，去检查40-good[0]-good[2]是否满足条件，如此往复，直到检查到40-good[0]-good[n-1]为止</h4><h4 id="代码如下-3"><a href="#代码如下-3" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int good[25];</span><br><span class="line">int count,r=40,n;</span><br><span class="line">void g(int index)</span><br><span class="line">&#123;</span><br><span class="line">	if(r&lt;0)</span><br><span class="line">		return;</span><br><span class="line">	else if(r==0)</span><br><span class="line">	&#123;</span><br><span class="line">		count++;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	if(index==n)</span><br><span class="line">		return;</span><br><span class="line">	for(int x=index;x&lt;n;x++)</span><br><span class="line">	&#123;</span><br><span class="line">		r=r-good[x];</span><br><span class="line">		g(x+1);</span><br><span class="line">		r=r+good[x];</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;n)==1)</span><br><span class="line">	&#123;</span><br><span class="line">		count=0;</span><br><span class="line">		for(int i=0;i&lt;n;i++)</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;good[i]);	//输入物体的体积</span><br><span class="line">		g(0);						//递归开始</span><br><span class="line">		printf(&quot;%d\n&quot;,count);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--递归</title>
    <url>/2020/02/07/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h3 id="递归边界-返回最简单底层的结果。"><a href="#递归边界-返回最简单底层的结果。" class="headerlink" title="递归边界:返回最简单底层的结果。"></a>递归边界:返回最简单底层的结果。</h3><h3 id="递归式-减少数据规模-并向下一层递归。"><a href="#递归式-减少数据规模-并向下一层递归。" class="headerlink" title="递归式:减少数据规模,并向下一层递归。"></a>递归式:减少数据规模,并向下一层递归。</h3><h3 id="1-计算N的阶乘"><a href="#1-计算N的阶乘" class="headerlink" title="1.计算N的阶乘"></a>1.计算N的阶乘</h3><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<h4 id="递归边界"><a href="#递归边界" class="headerlink" title="递归边界:"></a>递归边界:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F(0)=1;</span><br></pre></td></tr></table></figure>

<h4 id="递归式"><a href="#递归式" class="headerlink" title="递归式:"></a>递归式:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F(n)=F(n-1)*n;</span><br></pre></td></tr></table></figure>

<h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int F(int n)</span><br><span class="line">&#123;</span><br><span class="line">	if(n==0)</span><br><span class="line">		return 1;</span><br><span class="line">	else</span><br><span class="line">		return F(n-1)*n;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;N);</span><br><span class="line">	printf(&quot;%d\n&quot;,F(N));</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-求Fibonacci数列的第n项。"><a href="#2-求Fibonacci数列的第n项。" class="headerlink" title="2.求Fibonacci数列的第n项。"></a>2.求Fibonacci数列的第n项。</h3><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="递归边界-1"><a href="#递归边界-1" class="headerlink" title="递归边界:"></a>递归边界:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ff(0)=1;</span><br><span class="line">ff(1)=1;</span><br></pre></td></tr></table></figure>

<h4 id="递归式-1"><a href="#递归式-1" class="headerlink" title="递归式:"></a>递归式:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ff(n)=ff(n-1)+ff(n-2);</span><br></pre></td></tr></table></figure>

<h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int ff(int N)</span><br><span class="line">&#123;</span><br><span class="line">	if(N==0||N==1)</span><br><span class="line">		return 1;</span><br><span class="line">	else</span><br><span class="line">		return ff(N-1)+ff(N-2);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;N);</span><br><span class="line">	printf(&quot;%d&quot;,ff(N));</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-全排列"><a href="#3-全排列" class="headerlink" title="3.全排列"></a>3.全排列</h3><h4 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">bool H[10]=&#123;false&#125;;</span><br><span class="line">int P[10],n;</span><br><span class="line">void g(int index)</span><br><span class="line">&#123;</span><br><span class="line">	if(index==n+1)</span><br><span class="line">	&#123;</span><br><span class="line">		for(int i=1;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;%d&quot;,P[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int x=1;x&lt;=n;x++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(H[x]==false)</span><br><span class="line">		&#123;</span><br><span class="line">			P[index]=x;</span><br><span class="line">			H[x]=true;</span><br><span class="line">			g(index+1);</span><br><span class="line">			H[x]=false;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	n=3;</span><br><span class="line">	g(1);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-吃糖果"><a href="#4-吃糖果" class="headerlink" title="4.吃糖果"></a>4.吃糖果</h3><h4 id="名名的妈妈从外地出差回来，带了一盒好吃又精美的巧克力给名名（盒内共有-N-块巧克力，20-gt-N-gt-0）。"><a href="#名名的妈妈从外地出差回来，带了一盒好吃又精美的巧克力给名名（盒内共有-N-块巧克力，20-gt-N-gt-0）。" class="headerlink" title="名名的妈妈从外地出差回来，带了一盒好吃又精美的巧克力给名名（盒内共有 N 块巧克力，20 &gt; N &gt;0）。"></a>名名的妈妈从外地出差回来，带了一盒好吃又精美的巧克力给名名（盒内共有 N 块巧克力，20 &gt; N &gt;0）。</h4><h4 id="妈妈告诉名名每天可以吃一块或者两块巧克力。"><a href="#妈妈告诉名名每天可以吃一块或者两块巧克力。" class="headerlink" title="妈妈告诉名名每天可以吃一块或者两块巧克力。"></a>妈妈告诉名名每天可以吃一块或者两块巧克力。</h4><h4 id="假设名名每天都吃巧克力，问名名共有多少种不同的吃完巧克力的方案。"><a href="#假设名名每天都吃巧克力，问名名共有多少种不同的吃完巧克力的方案。" class="headerlink" title="假设名名每天都吃巧克力，问名名共有多少种不同的吃完巧克力的方案。"></a>假设名名每天都吃巧克力，问名名共有多少种不同的吃完巧克力的方案。</h4><h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><h4 id="如果N-1，则名名第1天就吃掉它，共有1种方案；"><a href="#如果N-1，则名名第1天就吃掉它，共有1种方案；" class="headerlink" title="如果N=1，则名名第1天就吃掉它，共有1种方案；"></a>如果N=1，则名名第1天就吃掉它，共有1种方案；</h4><h4 id="如果N-2，则名名可以第1天吃1块，第2天吃1块，也可以第1天吃2块，共有2种方案；"><a href="#如果N-2，则名名可以第1天吃1块，第2天吃1块，也可以第1天吃2块，共有2种方案；" class="headerlink" title="如果N=2，则名名可以第1天吃1块，第2天吃1块，也可以第1天吃2块，共有2种方案；"></a>如果N=2，则名名可以第1天吃1块，第2天吃1块，也可以第1天吃2块，共有2种方案；</h4><h4 id="如果N-3，则名名第1天可以吃1块，剩2块，也可以第1天吃2块剩1块，所以名名共有2-1-3种方案；"><a href="#如果N-3，则名名第1天可以吃1块，剩2块，也可以第1天吃2块剩1块，所以名名共有2-1-3种方案；" class="headerlink" title="如果N=3，则名名第1天可以吃1块，剩2块，也可以第1天吃2块剩1块，所以名名共有2+1=3种方案；"></a>如果N=3，则名名第1天可以吃1块，剩2块，也可以第1天吃2块剩1块，所以名名共有2+1=3种方案；</h4><h4 id="如果N-4，则名名可以第1天吃1块，剩3块，也可以第1天吃2块，剩2块，共有3-2-5种方案。"><a href="#如果N-4，则名名可以第1天吃1块，剩3块，也可以第1天吃2块，剩2块，共有3-2-5种方案。" class="headerlink" title="如果N=4，则名名可以第1天吃1块，剩3块，也可以第1天吃2块，剩2块，共有3+2=5种方案。"></a>如果N=4，则名名可以第1天吃1块，剩3块，也可以第1天吃2块，剩2块，共有3+2=5种方案。</h4><h4 id="现在给定N，请你写程序求出名名吃巧克力的方案数目。"><a href="#现在给定N，请你写程序求出名名吃巧克力的方案数目。" class="headerlink" title="现在给定N，请你写程序求出名名吃巧克力的方案数目。"></a>现在给定N，请你写程序求出名名吃巧克力的方案数目。</h4><h4 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入只有1行，即整数N。"><a href="#输入只有1行，即整数N。" class="headerlink" title="输入只有1行，即整数N。"></a>输入只有1行，即整数N。</h5><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="可能有多组测试数据，对于每组数据，"><a href="#可能有多组测试数据，对于每组数据，" class="headerlink" title="可能有多组测试数据，对于每组数据，"></a>可能有多组测试数据，对于每组数据，</h5><h5 id="输出只有1行，即名名吃巧克力的方案数。"><a href="#输出只有1行，即名名吃巧克力的方案数。" class="headerlink" title="输出只有1行，即名名吃巧克力的方案数。"></a>输出只有1行，即名名吃巧克力的方案数。</h5><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="思路-该题与斐波那切数列类似，第一天吃一颗，第二天就剩N-1颗，第一天吃两颗，第二天就剩N-2颗。ff-n-ff-n-1-ff-n-2"><a href="#思路-该题与斐波那切数列类似，第一天吃一颗，第二天就剩N-1颗，第一天吃两颗，第二天就剩N-2颗。ff-n-ff-n-1-ff-n-2" class="headerlink" title="思路:该题与斐波那切数列类似，第一天吃一颗，第二天就剩N-1颗，第一天吃两颗，第二天就剩N-2颗。ff(n)=ff(n-1)+ff(n-2);"></a>思路:该题与斐波那切数列类似，第一天吃一颗，第二天就剩N-1颗，第一天吃两颗，第二天就剩N-2颗。ff(n)=ff(n-1)+ff(n-2);</h4><h4 id="注意-多组输入的判断，while-scanf-“-d”-amp-n-输出超限0。"><a href="#注意-多组输入的判断，while-scanf-“-d”-amp-n-输出超限0。" class="headerlink" title="注意:多组输入的判断，while(scanf(“%d”,&amp;n))输出超限0。"></a>注意:多组输入的判断，while(scanf(“%d”,&amp;n))输出超限0。</h4><h4 id="代码如下-3"><a href="#代码如下-3" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int ff(int n)</span><br><span class="line">&#123;</span><br><span class="line">	if(n==0||n==1)</span><br><span class="line">		return 1;</span><br><span class="line">	else</span><br><span class="line">		return ff(n-1)+ff(n-2);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;n)==1)</span><br><span class="line">		printf(&quot;%d\n&quot;,ff(n));</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-数列"><a href="#5-数列" class="headerlink" title="5.数列"></a>5.数列</h3><h4 id="编写一个求斐波那契数列的递归函数，输入n-值，使用该递归函数，输出如下图形（参见样例）。"><a href="#编写一个求斐波那契数列的递归函数，输入n-值，使用该递归函数，输出如下图形（参见样例）。" class="headerlink" title="编写一个求斐波那契数列的递归函数，输入n 值，使用该递归函数，输出如下图形（参见样例）。"></a>编写一个求斐波那契数列的递归函数，输入n 值，使用该递归函数，输出如下图形（参见样例）。</h4><h4 id="输入信息-1"><a href="#输入信息-1" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入第一行为样例数m，接下来有m行每行一个整数n，n不超过10。"><a href="#输入第一行为样例数m，接下来有m行每行一个整数n，n不超过10。" class="headerlink" title="输入第一行为样例数m，接下来有m行每行一个整数n，n不超过10。"></a>输入第一行为样例数m，接下来有m行每行一个整数n，n不超过10。</h5><h4 id="输出信息-1"><a href="#输出信息-1" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="对应每个样例输出要求的图形-参见样例格式-。"><a href="#对应每个样例输出要求的图形-参见样例格式-。" class="headerlink" title="对应每个样例输出要求的图形(参见样例格式)。"></a>对应每个样例输出要求的图形(参见样例格式)。</h5><h5 id="输出只有1行，即名名吃巧克力的方案数。-1"><a href="#输出只有1行，即名名吃巧克力的方案数。-1" class="headerlink" title="输出只有1行，即名名吃巧克力的方案数。"></a>输出只有1行，即名名吃巧克力的方案数。</h5><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">          0</span><br><span class="line">        0 1 1</span><br><span class="line">      0 1 1 2 3</span><br><span class="line">    0 1 1 2 3 5 8</span><br><span class="line">  0 1 1 2 3 5 8 13 21</span><br><span class="line">0 1 1 2 3 5 8 13 21 34 55</span><br></pre></td></tr></table></figure>

<h4 id="思路-该题利用斐波那切数列解题，输出m行数，每行从第0项开始，总共2m-1个数。"><a href="#思路-该题利用斐波那切数列解题，输出m行数，每行从第0项开始，总共2m-1个数。" class="headerlink" title="思路:该题利用斐波那切数列解题，输出m行数，每行从第0项开始，总共2m-1个数。"></a>思路:该题利用斐波那切数列解题，输出m行数，每行从第0项开始，总共2m-1个数。</h4><h4 id="代码如下-4"><a href="#代码如下-4" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int ff(int n)</span><br><span class="line">&#123;</span><br><span class="line">	if(n==0)</span><br><span class="line">		return 0;</span><br><span class="line">	else if(n==1)</span><br><span class="line">		return 1;</span><br><span class="line">	else</span><br><span class="line">		return ff(n-1)+ff(n-2);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,m;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;n)==1)		//测试样例数</span><br><span class="line">	&#123;</span><br><span class="line">		for(int k=0;k&lt;n;k++)</span><br><span class="line">		&#123;</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;m);		//输入m</span><br><span class="line">			for(int i=1;i&lt;=m;i++) 	//输出m行</span><br><span class="line">			&#123;</span><br><span class="line">				for(int j=0;j&lt;2*(m-i);j++)//输出空格</span><br><span class="line">					printf(&quot; &quot;);</span><br><span class="line">				for(int j=0;j&lt;2*i-1;j++)	//输出数字</span><br><span class="line">				&#123;</span><br><span class="line">					printf(&quot;%d&quot;,ff(j));</span><br><span class="line">					if(j&lt;2*(i-1))</span><br><span class="line">						printf(&quot; &quot;);	</span><br><span class="line">				&#125;</span><br><span class="line">				printf(&quot;\n&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-神奇的口袋"><a href="#6-神奇的口袋" class="headerlink" title="6.神奇的口袋"></a>6.神奇的口袋</h3><h4 id="有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。John现在有n个想要得到的物品，每个物品的体积分别是a1，a2……an。John可以从这些物品中选择一些，如果选出的物体的总体积是40，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。"><a href="#有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。John现在有n个想要得到的物品，每个物品的体积分别是a1，a2……an。John可以从这些物品中选择一些，如果选出的物体的总体积是40，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。" class="headerlink" title="有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。John现在有n个想要得到的物品，每个物品的体积分别是a1，a2……an。John可以从这些物品中选择一些，如果选出的物体的总体积是40，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。"></a>有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。John现在有n个想要得到的物品，每个物品的体积分别是a1，a2……an。John可以从这些物品中选择一些，如果选出的物体的总体积是40，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。</h4><h4 id="输入信息-2"><a href="#输入信息-2" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入的第一行是正整数n-1-lt-n-lt-20-，表示不同的物品的数目。接下来的n行，每行有一个1到40之间的正整数，分别给出a1，a2……an的值。"><a href="#输入的第一行是正整数n-1-lt-n-lt-20-，表示不同的物品的数目。接下来的n行，每行有一个1到40之间的正整数，分别给出a1，a2……an的值。" class="headerlink" title="输入的第一行是正整数n (1 &lt;= n &lt;= 20)，表示不同的物品的数目。接下来的n行，每行有一个1到40之间的正整数，分别给出a1，a2……an的值。"></a>输入的第一行是正整数n (1 &lt;= n &lt;= 20)，表示不同的物品的数目。接下来的n行，每行有一个1到40之间的正整数，分别给出a1，a2……an的值。</h5><h4 id="输出信息-2"><a href="#输出信息-2" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出不同的选择物品的方式的数目。"><a href="#输出不同的选择物品的方式的数目。" class="headerlink" title="输出不同的选择物品的方式的数目。"></a>输出不同的选择物品的方式的数目。</h5><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">12</span><br><span class="line">28</span><br><span class="line">3</span><br><span class="line">21</span><br><span class="line">10</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="思路-从0开始-思路是用40减去good-0-，然后用余数继续与后面数组中的元素相减，看结果是否为0，若为0，表示这样排列满足条件，count-。若不为0，则继续往下走，直到余数小于0或者数组中的数已经全部读完，这样一次查找就完成了，接着需要回退到上一步去继续寻找下一个包含good-0-的可能组合。就比如进行到40-good-0-good-1-时发现余数为0满足条件，count-1，然后回退到40-good-0-，跳过good-1-，去检查40-good-0-good-2-是否满足条件，如此往复，直到检查到40-good-0-good-n-1-为止"><a href="#思路-从0开始-思路是用40减去good-0-，然后用余数继续与后面数组中的元素相减，看结果是否为0，若为0，表示这样排列满足条件，count-。若不为0，则继续往下走，直到余数小于0或者数组中的数已经全部读完，这样一次查找就完成了，接着需要回退到上一步去继续寻找下一个包含good-0-的可能组合。就比如进行到40-good-0-good-1-时发现余数为0满足条件，count-1，然后回退到40-good-0-，跳过good-1-，去检查40-good-0-good-2-是否满足条件，如此往复，直到检查到40-good-0-good-n-1-为止" class="headerlink" title="思路:从0开始,思路是用40减去good[0]，然后用余数继续与后面数组中的元素相减，看结果是否为0，若为0，表示这样排列满足条件，count++。若不为0，则继续往下走，直到余数小于0或者数组中的数已经全部读完，这样一次查找就完成了，接着需要回退到上一步去继续寻找下一个包含good[0]的可能组合。就比如进行到40-good[0]-good[1]时发现余数为0满足条件，count+1，然后回退到40-good[0]，跳过good[1]，去检查40-good[0]-good[2]是否满足条件，如此往复，直到检查到40-good[0]-good[n-1]为止"></a>思路:从0开始,思路是用40减去good[0]，然后用余数继续与后面数组中的元素相减，看结果是否为0，若为0，表示这样排列满足条件，count++。若不为0，则继续往下走，直到余数小于0或者数组中的数已经全部读完，这样一次查找就完成了，接着需要回退到上一步去继续寻找下一个包含good[0]的可能组合。就比如进行到40-good[0]-good[1]时发现余数为0满足条件，count+1，然后回退到40-good[0]，跳过good[1]，去检查40-good[0]-good[2]是否满足条件，如此往复，直到检查到40-good[0]-good[n-1]为止</h4><h4 id="代码如下-5"><a href="#代码如下-5" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int good[25];</span><br><span class="line">int count,r=40,n;</span><br><span class="line">void g(int index)</span><br><span class="line">&#123;</span><br><span class="line">	if(r&lt;0)</span><br><span class="line">		return;</span><br><span class="line">	else if(r==0)</span><br><span class="line">	&#123;</span><br><span class="line">		count++;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	if(index==n)</span><br><span class="line">		return;</span><br><span class="line">	for(int x=index;x&lt;n;x++)</span><br><span class="line">	&#123;</span><br><span class="line">		r=r-good[x];</span><br><span class="line">		g(x+1);</span><br><span class="line">		r=r+good[x];</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;n)==1)</span><br><span class="line">	&#123;</span><br><span class="line">		count=0;</span><br><span class="line">		for(int i=0;i&lt;n;i++)</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;good[i]);	//输入物体的体积</span><br><span class="line">		g(0);						//递归开始</span><br><span class="line">		printf(&quot;%d\n&quot;,count);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT--甲 1050 String Subtraction</title>
    <url>/2020/02/06/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--PAT%20%E7%94%B2%201050%20String%20Subtraction/</url>
    <content><![CDATA[<h2 id="甲-1050-String-Subtraction-题解"><a href="#甲-1050-String-Subtraction-题解" class="headerlink" title="甲 1050 String Subtraction (题解)"></a>甲 1050 String Subtraction (题解)</h2><h4 id="Given-two-strings-S1-and-S2-S-S1-S2-is-defined-to-be-the-remaining-string-after-taking-all-the-characters-in-S2-from-S1-Your-task-is-simply-to-calculate-S1-S2for-any-given-strings-However-it-might-not-be-that-simple-to-do-it-fast"><a href="#Given-two-strings-S1-and-S2-S-S1-S2-is-defined-to-be-the-remaining-string-after-taking-all-the-characters-in-S2-from-S1-Your-task-is-simply-to-calculate-S1-S2for-any-given-strings-However-it-might-not-be-that-simple-to-do-it-fast" class="headerlink" title="Given two strings S1 and S2, S = S1 - S2 is defined to be the remaining string after taking all the characters in S2 from S1. Your task is simply to calculate S1 - S2for any given strings. However, it might not be that simple to do it fast."></a>Given two strings S1 and S2, S = S1 - S2 is defined to be the remaining string after taking all the characters in S2 from S1. Your task is simply to calculate S1 - S2for any given strings. However, it might not be that simple to do it fast.</h4><h4 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="Each-input-file-contains-one-test-case-Each-case-consists-of-two-lines-which-gives-S1-and-S2-respectively-The-string-lengths-of-both-strings-are-no-more-than-104-It-is-guaranteed-that-all-the-characters-are-visible-ASCII-codes-and-white-space-and-a-new-line-character-signals-the-end-of-a-string"><a href="#Each-input-file-contains-one-test-case-Each-case-consists-of-two-lines-which-gives-S1-and-S2-respectively-The-string-lengths-of-both-strings-are-no-more-than-104-It-is-guaranteed-that-all-the-characters-are-visible-ASCII-codes-and-white-space-and-a-new-line-character-signals-the-end-of-a-string" class="headerlink" title="Each input file contains one test case. Each case consists of two lines which gives S1 and S2, respectively. The string lengths of both strings are no more than 104. It is guaranteed that all the characters are visible ASCII codes and white space, and a new line character signals the end of a string."></a>Each input file contains one test case. Each case consists of two lines which gives S1 and S2, respectively. The string lengths of both strings are no more than 104. It is guaranteed that all the characters are visible ASCII codes and white space, and a new line character signals the end of a string.</h5><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="For-each-test-case-print-S1-S2-in-one-line"><a href="#For-each-test-case-print-S1-S2-in-one-line" class="headerlink" title="For each test case, print S1 - S2 in one line."></a>For each test case, print S1 - S2 in one line.</h5><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">They are students.</span><br><span class="line">aeiou</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thy r stdnts.</span><br></pre></td></tr></table></figure>

<h4 id="思路-运用哈希函数，将s2中出现的字符标志设置为true，在s1中遍历，将为false的字符输出。"><a href="#思路-运用哈希函数，将s2中出现的字符标志设置为true，在s1中遍历，将为false的字符输出。" class="headerlink" title="思路:运用哈希函数，将s2中出现的字符标志设置为true，在s1中遍历，将为false的字符输出。"></a>思路:运用哈希函数，将s2中出现的字符标志设置为true，在s1中遍历，将为false的字符输出。</h4><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><h4 id="1-多层循环嵌套会导致运行超时"><a href="#1-多层循环嵌套会导致运行超时" class="headerlink" title="1.多层循环嵌套会导致运行超时"></a>1.多层循环嵌套会导致运行超时</h4><h4 id="2-注意字符串的范围，会导致RE60"><a href="#2-注意字符串的范围，会导致RE60" class="headerlink" title="2.注意字符串的范围，会导致RE60%"></a>2.注意字符串的范围，会导致RE60%</h4><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">bool H[26];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char a[10100],b[10100];</span><br><span class="line">	gets(a);</span><br><span class="line">	gets(b);</span><br><span class="line">	int la=strlen(a);</span><br><span class="line">	int lb=strlen(b);</span><br><span class="line">	for(int i=0;i&lt;lb;i++)		//在字符串b中出现，设置标志位为true.</span><br><span class="line">		H[b[i]]=true;</span><br><span class="line">	for(int i=0;i&lt;la;i++)</span><br><span class="line">		if(H[a[i]]==false)		//标志位为false，输出该字符</span><br><span class="line">			printf(&quot;%c&quot;,a[i]);</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT 甲</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--散列</title>
    <url>/2020/02/06/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E6%95%A3%E5%88%97/</url>
    <content><![CDATA[<h3 id="散列"><a href="#散列" class="headerlink" title="散列:"></a>散列:</h3><h4 id="将元素通过一个函数转换为整数，使得该整数可以尽量唯一地代表这个元素。"><a href="#将元素通过一个函数转换为整数，使得该整数可以尽量唯一地代表这个元素。" class="headerlink" title="将元素通过一个函数转换为整数，使得该整数可以尽量唯一地代表这个元素。"></a>将元素通过一个函数转换为整数，使得该整数可以尽量唯一地代表这个元素。</h4><h3 id="1-字符串统计"><a href="#1-字符串统计" class="headerlink" title="1.字符串统计"></a>1.字符串统计</h3><h4 id="给出N个字符串-由恰好三个大写字母组成-再给出M个查询字符串，问每个查询字符串在N个字符串中出现的次数"><a href="#给出N个字符串-由恰好三个大写字母组成-再给出M个查询字符串，问每个查询字符串在N个字符串中出现的次数" class="headerlink" title="给出N个字符串(由恰好三个大写字母组成),再给出M个查询字符串，问每个查询字符串在N个字符串中出现的次数."></a>给出N个字符串(由恰好三个大写字母组成),再给出M个查询字符串，问每个查询字符串在N个字符串中出现的次数.</h4><h3 id="思路-用字符串通过散列转换为数字作为下标进行计数，数组中记录每个字符串出现的次数，再将查询字符串转换为数字，匹配下标，输出数组中所记录的个数"><a href="#思路-用字符串通过散列转换为数字作为下标进行计数，数组中记录每个字符串出现的次数，再将查询字符串转换为数字，匹配下标，输出数组中所记录的个数" class="headerlink" title="思路:用字符串通过散列转换为数字作为下标进行计数，数组中记录每个字符串出现的次数，再将查询字符串转换为数字，匹配下标，输出数组中所记录的个数."></a>思路:用字符串通过散列转换为数字作为下标进行计数，数组中记录每个字符串出现的次数，再将查询字符串转换为数字，匹配下标，输出数组中所记录的个数.</h3><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int h[4000];</span><br><span class="line">int hash(char a[],int len)	//将字符串进行转换</span><br><span class="line">&#123;</span><br><span class="line">	int sum=0;</span><br><span class="line">	for(int i=0;i&lt;len;i++)</span><br><span class="line">		sum=sum*26+a[i]-&apos;A&apos;;</span><br><span class="line">	return sum;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N,M;</span><br><span class="line">	char a[10],b[10];</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;N,&amp;M);</span><br><span class="line">	for(int i=0;i&lt;N;i++)		//将N个字符串分别转换为数字，数字所对应的下标记录出现的次数。</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%s&quot;,a);</span><br><span class="line">		h[hash(a,3)]++;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=0;i&lt;M;i++)		//输入查询字符串，转换为数字，将数字所对应的下标的数组输出。</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%s&quot;,b);</span><br><span class="line">		printf(&quot;%d\n&quot;,h[hash(b,3)]);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-String-Subtraction"><a href="#2-String-Subtraction" class="headerlink" title="2.String Subtraction"></a>2.String Subtraction</h3><h4 id="Given-two-strings-S1-and-S2-S-S1-S2-is-defined-to-be-the-remaining-string-after-taking-all-the-characters-in-S2-from-S1-Your-task-is-simply-to-calculate-S1-S2for-any-given-strings-However-it-might-not-be-that-simple-to-do-it-fast"><a href="#Given-two-strings-S1-and-S2-S-S1-S2-is-defined-to-be-the-remaining-string-after-taking-all-the-characters-in-S2-from-S1-Your-task-is-simply-to-calculate-S1-S2for-any-given-strings-However-it-might-not-be-that-simple-to-do-it-fast" class="headerlink" title="Given two strings S1 and S2, S = S1 - S2 is defined to be the remaining string after taking all the characters in S2 from S1. Your task is simply to calculate S1 - S2for any given strings. However, it might not be that simple to do it fast."></a>Given two strings S1 and S2, S = S1 - S2 is defined to be the remaining string after taking all the characters in S2 from S1. Your task is simply to calculate S1 - S2for any given strings. However, it might not be that simple to do it fast.</h4><h4 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="Each-input-file-contains-one-test-case-Each-case-consists-of-two-lines-which-gives-S1-and-S2-respectively-The-string-lengths-of-both-strings-are-no-more-than-104-It-is-guaranteed-that-all-the-characters-are-visible-ASCII-codes-and-white-space-and-a-new-line-character-signals-the-end-of-a-string"><a href="#Each-input-file-contains-one-test-case-Each-case-consists-of-two-lines-which-gives-S1-and-S2-respectively-The-string-lengths-of-both-strings-are-no-more-than-104-It-is-guaranteed-that-all-the-characters-are-visible-ASCII-codes-and-white-space-and-a-new-line-character-signals-the-end-of-a-string" class="headerlink" title="Each input file contains one test case. Each case consists of two lines which gives S1 and S2, respectively. The string lengths of both strings are no more than 104. It is guaranteed that all the characters are visible ASCII codes and white space, and a new line character signals the end of a string."></a>Each input file contains one test case. Each case consists of two lines which gives S1 and S2, respectively. The string lengths of both strings are no more than 104. It is guaranteed that all the characters are visible ASCII codes and white space, and a new line character signals the end of a string.</h5><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="For-each-test-case-print-S1-S2-in-one-line"><a href="#For-each-test-case-print-S1-S2-in-one-line" class="headerlink" title="For each test case, print S1 - S2 in one line."></a>For each test case, print S1 - S2 in one line.</h5><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">They are students.</span><br><span class="line">aeiou</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thy r stdnts.</span><br></pre></td></tr></table></figure>

<h4 id="思路-运用哈希函数，将s2中出现的字符标志设置为true，在s1中遍历，将为false的字符输出。"><a href="#思路-运用哈希函数，将s2中出现的字符标志设置为true，在s1中遍历，将为false的字符输出。" class="headerlink" title="思路:运用哈希函数，将s2中出现的字符标志设置为true，在s1中遍历，将为false的字符输出。"></a>思路:运用哈希函数，将s2中出现的字符标志设置为true，在s1中遍历，将为false的字符输出。</h4><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><h4 id="1-多层循环嵌套会导致运行超时"><a href="#1-多层循环嵌套会导致运行超时" class="headerlink" title="1.多层循环嵌套会导致运行超时"></a>1.多层循环嵌套会导致运行超时</h4><h4 id="2-注意字符串的范围，会导致RE60"><a href="#2-注意字符串的范围，会导致RE60" class="headerlink" title="2.注意字符串的范围，会导致RE60%"></a>2.注意字符串的范围，会导致RE60%</h4><h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">bool H[26];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char a[10100],b[10100];</span><br><span class="line">	gets(a);</span><br><span class="line">	gets(b);</span><br><span class="line">	int la=strlen(a);</span><br><span class="line">	int lb=strlen(b);</span><br><span class="line">	for(int i=0;i&lt;lb;i++)		//在字符串b中出现，设置标志位为true.</span><br><span class="line">		H[b[i]]=true;</span><br><span class="line">	for(int i=0;i&lt;la;i++)</span><br><span class="line">		if(H[a[i]]==false)		//标志位为false，输出该字符</span><br><span class="line">			printf(&quot;%c&quot;,a[i]);</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Be-Unique"><a href="#3-Be-Unique" class="headerlink" title="3.Be Unique"></a>3.Be Unique</h3><h4 id="Being-unique-is-so-important-to-people-on-Mars-that-even-their-lottery-is-designed-in-a-unique-way-The-rule-of-winning-is-simple-one-bets-on-a-number-chosen-from-1-10000-The-first-one-who-bets-on-a-unique-number-wins-For-example-if-there-are-7-people-betting-on-5-31-5-88-67-88-17-then-the-second-one-who-bets-on-31-wins"><a href="#Being-unique-is-so-important-to-people-on-Mars-that-even-their-lottery-is-designed-in-a-unique-way-The-rule-of-winning-is-simple-one-bets-on-a-number-chosen-from-1-10000-The-first-one-who-bets-on-a-unique-number-wins-For-example-if-there-are-7-people-betting-on-5-31-5-88-67-88-17-then-the-second-one-who-bets-on-31-wins" class="headerlink" title="Being unique is so important to people on Mars that even their lottery is designed in a unique way. The rule of winning is simple: one bets on a number chosen from [1,10000 ]. The first one who bets on a unique number wins. For example, if there are 7 people betting on { 5 31 5 88 67 88 17 }, then the second one who bets on 31 wins."></a>Being unique is so important to people on Mars that even their lottery is designed in a unique way. The rule of winning is simple: one bets on a number chosen from [1,10000 ]. The first one who bets on a unique number wins. For example, if there are 7 people betting on { 5 31 5 88 67 88 17 }, then the second one who bets on 31 wins.</h4><h4 id="输入信息-1"><a href="#输入信息-1" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="Each-input-file-contains-one-test-case-Each-case-contains-a-line-which-begins-with-a-positive-integer-N-lt-105-and-then-followed-by-N-bets-The-numbers-are-separated-by-a-space"><a href="#Each-input-file-contains-one-test-case-Each-case-contains-a-line-which-begins-with-a-positive-integer-N-lt-105-and-then-followed-by-N-bets-The-numbers-are-separated-by-a-space" class="headerlink" title="Each input file contains one test case. Each case contains a line which begins with a positive integer N (&lt;=105) and then followed by N bets. The numbers are separated by a space."></a>Each input file contains one test case. Each case contains a line which begins with a positive integer N (&lt;=105) and then followed by N bets. The numbers are separated by a space.</h5><h4 id="输出信息-1"><a href="#输出信息-1" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="For-each-test-case-print-the-winning-number-in-a-line-If-there-is-no-winner-print-“None”-instead"><a href="#For-each-test-case-print-the-winning-number-in-a-line-If-there-is-no-winner-print-“None”-instead" class="headerlink" title="For each test case, print the winning number in a line. If there is no winner, print “None” instead."></a>For each test case, print the winning number in a line. If there is no winner, print “None” instead.</h5><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 5 31 5 88 67 88 17</span><br><span class="line">5 888 666 666 888 888</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">31</span><br><span class="line">None</span><br></pre></td></tr></table></figure>

<h4 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N,count=0;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;N)==1)</span><br><span class="line">	&#123;</span><br><span class="line">		int a[10010]=&#123;0&#125;;</span><br><span class="line">		int b[10010]=&#123;0&#125;;</span><br><span class="line">		for(int i=0;i&lt;N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			int m;</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;m);		\\输入m，并记录次数</span><br><span class="line">			a[m]++;</span><br><span class="line">			if(a[m]==1)	\\如果是第一次，该数字第一次出现，将该数字存储在b中</span><br><span class="line">			b[count++]=m;</span><br><span class="line">		&#125;</span><br><span class="line">		int j;</span><br><span class="line">		for(j=0;j&lt;count;j++)</span><br><span class="line">			if(a[b[j]]==1)</span><br><span class="line">			&#123;</span><br><span class="line">				printf(&quot;%d\n&quot;,b[j]);</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		if(j==count)</span><br><span class="line">			printf(&quot;None\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-分组统计"><a href="#4-分组统计" class="headerlink" title="4.分组统计"></a>4.分组统计</h3><h4 id="先输入一组数，然后输入其分组，按照分组统计出现次数并输出，参见样例。"><a href="#先输入一组数，然后输入其分组，按照分组统计出现次数并输出，参见样例。" class="headerlink" title="先输入一组数，然后输入其分组，按照分组统计出现次数并输出，参见样例。"></a>先输入一组数，然后输入其分组，按照分组统计出现次数并输出，参见样例。</h4><h4 id="输入信息-2"><a href="#输入信息-2" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入第一行表示样例数m，对于每个样例，第一行为数的个数n，接下来两行分别有n个数，第一行有n个数，第二行的n个数分别对应上一行每个数的分组，n不超过100。"><a href="#输入第一行表示样例数m，对于每个样例，第一行为数的个数n，接下来两行分别有n个数，第一行有n个数，第二行的n个数分别对应上一行每个数的分组，n不超过100。" class="headerlink" title="输入第一行表示样例数m，对于每个样例，第一行为数的个数n，接下来两行分别有n个数，第一行有n个数，第二行的n个数分别对应上一行每个数的分组，n不超过100。"></a>输入第一行表示样例数m，对于每个样例，第一行为数的个数n，接下来两行分别有n个数，第一行有n个数，第二行的n个数分别对应上一行每个数的分组，n不超过100。</h5><h4 id="输出信息-2"><a href="#输出信息-2" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出m行，格式参见样例，按从小到大排。"><a href="#输出m行，格式参见样例，按从小到大排。" class="headerlink" title="输出m行，格式参见样例，按从小到大排。"></a>输出m行，格式参见样例，按从小到大排。</h5><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">7</span><br><span class="line">3 2 3 8 8 2 3</span><br><span class="line">1 2 3 2 1 3 1</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1=&#123;2=0,3=2,8=1&#125;</span><br><span class="line">2=&#123;2=1,3=0,8=1&#125;</span><br><span class="line">3=&#123;2=1,3=1,8=0&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注意-哈希数组要选的大一些，否则会WA50-。"><a href="#注意-哈希数组要选的大一些，否则会WA50-。" class="headerlink" title="注意:哈希数组要选的大一些，否则会WA50%。"></a>注意:哈希数组要选的大一些，否则会WA50%。</h4><h4 id="代码如下-3"><a href="#代码如下-3" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,m;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;m)==1)	//输入样例数m</span><br><span class="line">	&#123;</span><br><span class="line">		for(int i=0;i&lt;m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			int s[100]=&#123;0&#125;,g[100]=&#123;0&#125;;</span><br><span class="line">			int a[100][2100]=&#123;&#123;0,0&#125;&#125;;	//哈希数组存储出现次数</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">			for(int j=0;j&lt;n;j++)		//存储一组数</span><br><span class="line">				scanf(&quot;%d&quot;,&amp;s[j]);</span><br><span class="line">			for(int j=0;j&lt;n;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				scanf(&quot;%d&quot;,&amp;g[j]);		//存储每个数对应组</span><br><span class="line">				a[g[j]][s[j]]++;		//哈希数组存储值</span><br><span class="line">			&#125;</span><br><span class="line">			sort(s,s+n);			//对两个数组从小到大进行排序</span><br><span class="line">			sort(g,g+n);</span><br><span class="line">			for(int j=0;j&lt;n;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				if(g[j]!=g[j-1])	//排序之后，两个不一样才进行输出。</span><br><span class="line">				&#123;</span><br><span class="line">					printf(&quot;%d=&#123;&quot;,g[j]);</span><br><span class="line">					for(int k=0;k&lt;n;k++)</span><br><span class="line">					&#123;</span><br><span class="line">						if(s[k]!=s[k-1])//排序之后，两个不一样才进行输出。</span><br><span class="line">						&#123;</span><br><span class="line">							printf(&quot;%d=%d&quot;,s[k],a[g[j]][s[k]]);</span><br><span class="line">							if(k!=n-1&amp;&amp;s[k]!=s[n-1])//不是最后一个输出&apos;,&apos;</span><br><span class="line">								printf(&quot;,&quot;);	</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;	</span><br><span class="line">					printf(&quot;&#125;\n&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT--甲 1041 Be Unique</title>
    <url>/2020/02/06/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--PAT%20%E7%94%B2%201041%20Be%20Unique/</url>
    <content><![CDATA[<h2 id="甲-1041-Be-Unique-题解"><a href="#甲-1041-Be-Unique-题解" class="headerlink" title="甲 1041    Be Unique  (题解)"></a>甲 1041    Be Unique  (题解)</h2><p>1041    Be Unique  (题解)</p>
<h4 id="Being-unique-is-so-important-to-people-on-Mars-that-even-their-lottery-is-designed-in-a-unique-way-The-rule-of-winning-is-simple-one-bets-on-a-number-chosen-from-1-1000-The-first-one-who-bets-on-a-unique-number-wins-For-example-if-there-are-7-people-betting-on-5-31-5-88-67-88-17-then-the-second-one-who-bets-on-31-wins"><a href="#Being-unique-is-so-important-to-people-on-Mars-that-even-their-lottery-is-designed-in-a-unique-way-The-rule-of-winning-is-simple-one-bets-on-a-number-chosen-from-1-1000-The-first-one-who-bets-on-a-unique-number-wins-For-example-if-there-are-7-people-betting-on-5-31-5-88-67-88-17-then-the-second-one-who-bets-on-31-wins" class="headerlink" title="Being unique is so important to people on Mars that even their lottery is designed in a unique way. The rule of winning is simple: one bets on a number chosen from [1,1000 ]. The first one who bets on a unique number wins. For example, if there are 7 people betting on { 5 31 5 88 67 88 17 }, then the second one who bets on 31 wins."></a>Being unique is so important to people on Mars that even their lottery is designed in a unique way. The rule of winning is simple: one bets on a number chosen from [1,1000 ]. The first one who bets on a unique number wins. For example, if there are 7 people betting on { 5 31 5 88 67 88 17 }, then the second one who bets on 31 wins.</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="Each-input-file-contains-one-test-case-Each-case-contains-a-line-which-begins-with-a-positive-integer-N-≤10000-and-then-followed-by-N-bets-The-numbers-are-separated-by-a-space"><a href="#Each-input-file-contains-one-test-case-Each-case-contains-a-line-which-begins-with-a-positive-integer-N-≤10000-and-then-followed-by-N-bets-The-numbers-are-separated-by-a-space" class="headerlink" title="Each input file contains one test case. Each case contains a line which begins with a positive integer N (≤10000 ) and then followed by N bets. The numbers are separated by a space."></a>Each input file contains one test case. Each case contains a line which begins with a positive integer N (≤10000 ) and then followed by N bets. The numbers are separated by a space.</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="For-each-test-case-print-the-winning-number-in-a-line-If-there-is-no-winner-print-None-instead"><a href="#For-each-test-case-print-the-winning-number-in-a-line-If-there-is-no-winner-print-None-instead" class="headerlink" title="For each test case, print the winning number in a line. If there is no winner, print None instead."></a>For each test case, print the winning number in a line. If there is no winner, print None instead.</h4><h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1:"></a>输入样例1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 5 31 5 88 67 88 17</span><br></pre></td></tr></table></figure>

<h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">31</span><br></pre></td></tr></table></figure>

<h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2:"></a>输入样例2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 888 666 666 888 888</span><br></pre></td></tr></table></figure>

<h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><h4 id="追个接收数字，用哈希数组进行计数，如果该数字第一次出现，则将该树存储在b中，则b中存储的为出现过的数字，再利用数组b进行判断，如果第一次出现且只出现一次，则输出该树，如果没有符合范围的则输出”None”。"><a href="#追个接收数字，用哈希数组进行计数，如果该数字第一次出现，则将该树存储在b中，则b中存储的为出现过的数字，再利用数组b进行判断，如果第一次出现且只出现一次，则输出该树，如果没有符合范围的则输出”None”。" class="headerlink" title="追个接收数字，用哈希数组进行计数，如果该数字第一次出现，则将该树存储在b中，则b中存储的为出现过的数字，再利用数组b进行判断，如果第一次出现且只出现一次，则输出该树，如果没有符合范围的则输出”None”。"></a>追个接收数字，用哈希数组进行计数，如果该数字第一次出现，则将该树存储在b中，则b中存储的为出现过的数字，再利用数组b进行判断，如果第一次出现且只出现一次，则输出该树，如果没有符合范围的则输出”None”。</h4><h4 id="我的代码如下"><a href="#我的代码如下" class="headerlink" title="我的代码如下:"></a>我的代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N,count=0;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;N); </span><br><span class="line">	int a[10010]=&#123;0&#125;;</span><br><span class="line">	int b[10010]=&#123;0&#125;;</span><br><span class="line">	for(int i=0;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		int m;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;m);	\\输入m，并记录次数</span><br><span class="line">		a[m]++;</span><br><span class="line">		if(a[m]==1)		\\如果是第一次，该数字第一次出现，将该数字存储在b中</span><br><span class="line">		b[count++]=m;</span><br><span class="line">	&#125;</span><br><span class="line">	int j;</span><br><span class="line">	for(j=0;j&lt;count;j++)</span><br><span class="line">		if(a[b[j]]==1)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;%d\n&quot;,b[j]);</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	if(j==count)</span><br><span class="line">		printf(&quot;None\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT 甲</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--进制转换(二)</title>
    <url>/2020/02/05/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2(%E4%BA%8C)/</url>
    <content><![CDATA[<h3 id="利用c语言的格式输入格式输出，直接进行进制转换。"><a href="#利用c语言的格式输入格式输出，直接进行进制转换。" class="headerlink" title="利用c语言的格式输入格式输出，直接进行进制转换。"></a>利用c语言的格式输入格式输出，直接进行进制转换。</h3><h5 id="X-对应大写字母的十六进制"><a href="#X-对应大写字母的十六进制" class="headerlink" title="%X 对应大写字母的十六进制"></a>%X 对应大写字母的十六进制</h5><h5 id="d-对应输出十进制"><a href="#d-对应输出十进制" class="headerlink" title="%d 对应输出十进制"></a>%d 对应输出十进制</h5><h5 id="o-对应输出八进制"><a href="#o-对应输出八进制" class="headerlink" title="%o 对应输出八进制"></a>%o 对应输出八进制</h5><h3 id="1-进制转换"><a href="#1-进制转换" class="headerlink" title="1.进制转换"></a>1.进制转换</h3><h4 id="程序提示用户输入三个字符，每个字符取值范围是0-9，A-F。然后程序会把这三个字符转化为相应的十六进制整数，并分别以十六进制，十进制，八进制输出。"><a href="#程序提示用户输入三个字符，每个字符取值范围是0-9，A-F。然后程序会把这三个字符转化为相应的十六进制整数，并分别以十六进制，十进制，八进制输出。" class="headerlink" title="程序提示用户输入三个字符，每个字符取值范围是0-9，A-F。然后程序会把这三个字符转化为相应的十六进制整数，并分别以十六进制，十进制，八进制输出。"></a>程序提示用户输入三个字符，每个字符取值范围是0-9，A-F。然后程序会把这三个字符转化为相应的十六进制整数，并分别以十六进制，十进制，八进制输出。</h4><h4 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入只有一行，即三个字符。"><a href="#输入只有一行，即三个字符。" class="headerlink" title="输入只有一行，即三个字符。"></a>输入只有一行，即三个字符。</h5><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="三个整数，中间用空格隔开。"><a href="#三个整数，中间用空格隔开。" class="headerlink" title="三个整数，中间用空格隔开。"></a>三个整数，中间用空格隔开。</h5><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FFF</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FFF 4095 7777</span><br></pre></td></tr></table></figure>

<h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	scanf(&quot;%x&quot;,&amp;n);</span><br><span class="line">	printf(&quot;%X %d %o&quot;,n,n,n);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-二进制移位练习"><a href="#2-二进制移位练习" class="headerlink" title="2.二进制移位练习"></a>2.二进制移位练习</h3><h4 id="求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。"><a href="#求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。" class="headerlink" title="求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。"></a>求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。</h4><h4 id="输入信息-1"><a href="#输入信息-1" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="一个正整数a。"><a href="#一个正整数a。" class="headerlink" title="一个正整数a。"></a>一个正整数a。</h5><h4 id="输出信息-1"><a href="#输出信息-1" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="a从右端开始的4至7位的10进制表示。请注意行尾输出换行。"><a href="#a从右端开始的4至7位的10进制表示。请注意行尾输出换行。" class="headerlink" title="a从右端开始的4至7位的10进制表示。请注意行尾输出换行。"></a>a从右端开始的4至7位的10进制表示。请注意行尾输出换行。</h5><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">217</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure>

<h4 id="思路-输入一个十进制数，转换为二进制并存储在数组中-取数组的四到七位-转换为十进制"><a href="#思路-输入一个十进制数，转换为二进制并存储在数组中-取数组的四到七位-转换为十进制" class="headerlink" title="思路:输入一个十进制数，转换为二进制并存储在数组中,取数组的四到七位,转换为十进制."></a>思路:输入一个十进制数，转换为二进制并存储在数组中,取数组的四到七位,转换为十进制.</h4><h4 id="注意-取数组的4-7位-取3-6位恰好也会输出13-一直WA50-。"><a href="#注意-取数组的4-7位-取3-6位恰好也会输出13-一直WA50-。" class="headerlink" title="注意:取数组的4-7位,取3-6位恰好也会输出13,一直WA50%。"></a>注意:取数组的4-7位,取3-6位恰好也会输出13,一直WA50%。</h4><h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int temp[1010]=&#123;0&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,count=0;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);			</span><br><span class="line">	do					//十进制转换为二进制。</span><br><span class="line">	&#123;</span><br><span class="line">		temp[count++]=n%2;</span><br><span class="line">		n=n/2;</span><br><span class="line">	&#125;while(n&gt;0);</span><br><span class="line">	int sum=0,c=1;</span><br><span class="line">	for(int i=4;i&lt;=7;i++)			取4-7位并转换为十进制。</span><br><span class="line">	&#123;</span><br><span class="line">		sum+=temp[i]*c;</span><br><span class="line">		c=c*2; </span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%d\n&quot;,sum);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-三进制小数"><a href="#3-三进制小数" class="headerlink" title="3.三进制小数"></a>3.三进制小数</h3><h4 id="你的任务呢，是将一个有理数转换成三进制小数。“什么是三进制小数呢？”你一定会问，这很明白，就是以三为基（二进制数以2为基，而十进制数则以10为基）的小数。"><a href="#你的任务呢，是将一个有理数转换成三进制小数。“什么是三进制小数呢？”你一定会问，这很明白，就是以三为基（二进制数以2为基，而十进制数则以10为基）的小数。" class="headerlink" title="你的任务呢，是将一个有理数转换成三进制小数。“什么是三进制小数呢？”你一定会问，这很明白，就是以三为基（二进制数以2为基，而十进制数则以10为基）的小数。"></a>你的任务呢，是将一个有理数转换成三进制小数。“什么是三进制小数呢？”你一定会问，这很明白，就是以三为基（二进制数以2为基，而十进制数则以10为基）的小数。</h4><h4 id="输入信息-2"><a href="#输入信息-2" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="有理数的值都是在0与1之间的，每个有理数都由一个分子和一个分母表示，分子与分母之间隔着一个斜杠。有理数的个数不会超过1000个。"><a href="#有理数的值都是在0与1之间的，每个有理数都由一个分子和一个分母表示，分子与分母之间隔着一个斜杠。有理数的个数不会超过1000个。" class="headerlink" title="有理数的值都是在0与1之间的，每个有理数都由一个分子和一个分母表示，分子与分母之间隔着一个斜杠。有理数的个数不会超过1000个。"></a>有理数的值都是在0与1之间的，每个有理数都由一个分子和一个分母表示，分子与分母之间隔着一个斜杠。有理数的个数不会超过1000个。</h5><h4 id="输出信息-2"><a href="#输出信息-2" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出格式见样本输出，它是以小数点开头的具有10位精度的3进制数。"><a href="#输出格式见样本输出，它是以小数点开头的具有10位精度的3进制数。" class="headerlink" title="输出格式见样本输出，它是以小数点开头的具有10位精度的3进制数。"></a>输出格式见样本输出，它是以小数点开头的具有10位精度的3进制数。</h5><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1/3</span><br><span class="line">1/4</span><br><span class="line">1/6</span><br><span class="line">7/8</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.1000000000</span><br><span class="line">.0202020202</span><br><span class="line">.0111111111</span><br><span class="line">.2121212122</span><br></pre></td></tr></table></figure>

<h4 id="思路-用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。"><a href="#思路-用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。" class="headerlink" title="思路:用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。"></a>思路:用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。</h4><h4 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,m;</span><br><span class="line">	double s;</span><br><span class="line">	while(scanf(&quot;%d/%d&quot;,&amp;n,&amp;m)==2)</span><br><span class="line">	&#123;	</span><br><span class="line">		int temp[12]=&#123;0&#125;;</span><br><span class="line">		s=1.0*n/m;			//将十进制小数进行存储</span><br><span class="line">		for(int i=0;i&lt;11;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			s=s*3;</span><br><span class="line">			temp[i]=(int)s;</span><br><span class="line">			s-=temp[i];</span><br><span class="line">		&#125;</span><br><span class="line">		if(temp[10]&gt;=1.5)</span><br><span class="line">			temp[9]++;</span><br><span class="line">		for(int i=9;i&gt;0;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			if(temp[i]==3)</span><br><span class="line">			&#123;</span><br><span class="line">				temp[i-1]++;</span><br><span class="line">				temp[i]=0; </span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;.&quot;);</span><br><span class="line">		for(int i=0;i&lt;=9;i++)</span><br><span class="line">			printf(&quot;%d&quot;,temp[i]);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT--甲 1025 PAT Ranking</title>
    <url>/2020/02/04/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--PAT%20%E7%94%B2%201025%20PAT%20Ranking/</url>
    <content><![CDATA[<h2 id="甲-1025-PAT-Ranking-题解"><a href="#甲-1025-PAT-Ranking-题解" class="headerlink" title="甲 1025 PAT Ranking (题解)"></a>甲 1025 PAT Ranking (题解)</h2><h4 id="Programming-Ability-Test-PAT-is-organized-by-the-College-of-Computer-Science-and-Technology-of-Zhejiang-University-Each-test-is-supposed-to-run-simultaneously-in-several-places-and-the-ranklists-will-be-merged-immediately-after-the-test-Now-it-is-your-job-to-write-a-program-to-correctly-merge-all-the-ranklists-and-generate-the-final-rank"><a href="#Programming-Ability-Test-PAT-is-organized-by-the-College-of-Computer-Science-and-Technology-of-Zhejiang-University-Each-test-is-supposed-to-run-simultaneously-in-several-places-and-the-ranklists-will-be-merged-immediately-after-the-test-Now-it-is-your-job-to-write-a-program-to-correctly-merge-all-the-ranklists-and-generate-the-final-rank" class="headerlink" title="Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is supposed to run simultaneously in several places, and the ranklists will be merged immediately after the test. Now it is your job to write a program to correctly merge all the ranklists and generate the final rank."></a>Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is supposed to run simultaneously in several places, and the ranklists will be merged immediately after the test. Now it is your job to write a program to correctly merge all the ranklists and generate the final rank.</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="Each-input-file-contains-one-test-case-For-each-case-the-first-line-contains-a-positive-number-N-≤100-the-number-of-test-locations-Then-N-ranklists-follow-each-starts-with-a-line-containing-a-positive-integer-K-≤300-the-number-of-testees-and-then-K-lines-containing-the-registration-number-a-13-digit-number-and-the-total-score-of-each-testee-All-the-numbers-in-a-line-are-separated-by-a-space"><a href="#Each-input-file-contains-one-test-case-For-each-case-the-first-line-contains-a-positive-number-N-≤100-the-number-of-test-locations-Then-N-ranklists-follow-each-starts-with-a-line-containing-a-positive-integer-K-≤300-the-number-of-testees-and-then-K-lines-containing-the-registration-number-a-13-digit-number-and-the-total-score-of-each-testee-All-the-numbers-in-a-line-are-separated-by-a-space" class="headerlink" title="Each input file contains one test case. For each case, the first line contains a positive number N (≤100), the number of test locations. Then N ranklists follow, each starts with a line containing a positive integer K (≤300), the number of testees, and then K lines containing the registration number (a 13-digit number) and the total score of each testee. All the numbers in a line are separated by a space."></a>Each input file contains one test case. For each case, the first line contains a positive number N (≤100), the number of test locations. Then N ranklists follow, each starts with a line containing a positive integer K (≤300), the number of testees, and then K lines containing the registration number (a 13-digit number) and the total score of each testee. All the numbers in a line are separated by a space.</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="For-each-test-case-first-print-in-one-line-the-total-number-of-testees-Then-print-the-final-ranklist-in-the-following-format"><a href="#For-each-test-case-first-print-in-one-line-the-total-number-of-testees-Then-print-the-final-ranklist-in-the-following-format" class="headerlink" title="For each test case, first print in one line the total number of testees. Then print the final ranklist in the following format:"></a>For each test case, first print in one line the total number of testees. Then print the final ranklist in the following format:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">registration_number final_rank location_number local_rank</span><br></pre></td></tr></table></figure>

<h4 id="The-locations-are-numbered-from-1-to-N-The-output-must-be-sorted-in-nondecreasing-order-of-the-final-ranks-The-testees-with-the-same-score-must-have-the-same-rank-and-the-output-must-be-sorted-in-nondecreasing-order-of-their-registration-numbers"><a href="#The-locations-are-numbered-from-1-to-N-The-output-must-be-sorted-in-nondecreasing-order-of-the-final-ranks-The-testees-with-the-same-score-must-have-the-same-rank-and-the-output-must-be-sorted-in-nondecreasing-order-of-their-registration-numbers" class="headerlink" title="The locations are numbered from 1 to N. The output must be sorted in nondecreasing order of the final ranks. The testees with the same score must have the same rank, and the output must be sorted in nondecreasing order of their registration numbers."></a>The locations are numbered from 1 to N. The output must be sorted in nondecreasing order of the final ranks. The testees with the same score must have the same rank, and the output must be sorted in nondecreasing order of their registration numbers.</h4><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">1234567890001 95</span><br><span class="line">1234567890005 100</span><br><span class="line">1234567890003 95</span><br><span class="line">1234567890002 77</span><br><span class="line">1234567890004 85</span><br><span class="line">4</span><br><span class="line">1234567890013 65</span><br><span class="line">1234567890011 25</span><br><span class="line">1234567890014 100</span><br><span class="line">1234567890012 85</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">1234567890005 1 1 1</span><br><span class="line">1234567890014 1 2 1</span><br><span class="line">1234567890001 3 1 2</span><br><span class="line">1234567890003 3 1 2</span><br><span class="line">1234567890004 5 1 4</span><br><span class="line">1234567890012 5 2 2</span><br><span class="line">1234567890002 7 1 5</span><br><span class="line">1234567890013 8 2 3</span><br><span class="line">1234567890011 9 2 4</span><br></pre></td></tr></table></figure>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h3><h4 id="有N个考场，每个考场有若干数量的学生-现在给出各个考场的准考证号与分数，要求将所有考生按分数从高到低排序，并按顺序输出所有考生的准考证号、排名、考场号以及考场内的排名。"><a href="#有N个考场，每个考场有若干数量的学生-现在给出各个考场的准考证号与分数，要求将所有考生按分数从高到低排序，并按顺序输出所有考生的准考证号、排名、考场号以及考场内的排名。" class="headerlink" title="有N个考场，每个考场有若干数量的学生,现在给出各个考场的准考证号与分数，要求将所有考生按分数从高到低排序，并按顺序输出所有考生的准考证号、排名、考场号以及考场内的排名。"></a>有N个考场，每个考场有若干数量的学生,现在给出各个考场的准考证号与分数，要求将所有考生按分数从高到低排序，并按顺序输出所有考生的准考证号、排名、考场号以及考场内的排名。</h4><h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><h4 id="1-用结构体存储学号和分数，考场号，考场内排名。"><a href="#1-用结构体存储学号和分数，考场号，考场内排名。" class="headerlink" title="1.用结构体存储学号和分数，考场号，考场内排名。"></a>1.用结构体存储学号和分数，考场号，考场内排名。</h4><h4 id="2-分别输入每个考场的学生的学号和分数，在考场内进行排序和存储。"><a href="#2-分别输入每个考场的学生的学号和分数，在考场内进行排序和存储。" class="headerlink" title="2.分别输入每个考场的学生的学号和分数，在考场内进行排序和存储。"></a>2.分别输入每个考场的学生的学号和分数，在考场内进行排序和存储。</h4><h4 id="3-所有考生整体排序输出。"><a href="#3-所有考生整体排序输出。" class="headerlink" title="3.所有考生整体排序输出。"></a>3.所有考生整体排序输出。</h4><h4 id="我的代码如下"><a href="#我的代码如下" class="headerlink" title="我的代码如下:"></a>我的代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">	char id[15];</span><br><span class="line">	int score;</span><br><span class="line">	int group;</span><br><span class="line">	int rank;</span><br><span class="line">&#125;stu[30010];</span><br><span class="line">bool cmp(student a,student b)//cmp函数编写排序规则,分数从高到低,分数相同则按学号逆序.</span><br><span class="line">&#123;</span><br><span class="line">	if(a.score!=b.score)</span><br><span class="line">		return a.score&gt;b.score;</span><br><span class="line">	else</span><br><span class="line">		return (strcmp(a.id,b.id)&lt;0);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N,k,num=0;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;N);</span><br><span class="line">	for(int i=1;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;k);</span><br><span class="line">		for(int j=0;j&lt;k;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			scanf(&quot;%s %d&quot;,stu[num].id,&amp;stu[num].score);</span><br><span class="line">			stu[num].group=i;			//记录考场号</span><br><span class="line">			num++;</span><br><span class="line">		&#125;</span><br><span class="line">		sort(stu+num-k,stu+num,cmp);		//考场内进行排序</span><br><span class="line">		stu[num-k].rank=1;					//存储考场内学生的排名</span><br><span class="line">		for(int j=num-k+1;j&lt;num;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(stu[j].score==stu[j-1].score)</span><br><span class="line">				stu[j].rank=stu[j-1].rank;//完全等于前面学生的分数 排名相同</span><br><span class="line">			else</span><br><span class="line">				stu[j].rank=j+1-num+k;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%d\n&quot;,num);</span><br><span class="line">	sort(stu,stu+num,cmp);			//所有考生进行排序</span><br><span class="line">	int r=1;</span><br><span class="line">	for(int i=0;i&lt;num;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(i&gt;0 &amp;&amp; stu[i].score!=stu[i-1].score)//记录排名</span><br><span class="line">			r=i+1;						</span><br><span class="line">		printf(&quot;%s %d %d %d\n&quot;,stu[i].id,r,stu[i].group,stu[i].rank);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT 甲</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--排序</title>
    <url>/2020/02/03/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="选择排序-降序排序"><a href="#选择排序-降序排序" class="headerlink" title="选择排序(降序排序)"></a>选择排序(降序排序)</h3><h4 id="有n个数，总共需要进行n-1趟操作，每趟选出待排序部分中最小的元素，令其与a-i-进行交换，时间复杂度为O-n-n-。"><a href="#有n个数，总共需要进行n-1趟操作，每趟选出待排序部分中最小的元素，令其与a-i-进行交换，时间复杂度为O-n-n-。" class="headerlink" title="有n个数，总共需要进行n-1趟操作，每趟选出待排序部分中最小的元素，令其与a[i]进行交换，时间复杂度为O(n*n)。"></a>有n个数，总共需要进行n-1趟操作，每趟选出待排序部分中最小的元素，令其与a[i]进行交换，时间复杂度为O(n*n)。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(int i=0;i&lt;len-1;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		int k=i;</span><br><span class="line">		for(int j=i+1;j&lt;len;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(a[j]&gt;=a[k])</span><br><span class="line">				k=j;</span><br><span class="line">		&#125;</span><br><span class="line">		int temp=a[k];</span><br><span class="line">		a[k]=a[i];</span><br><span class="line">		a[i]=temp;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速排序-降序排序"><a href="#快速排序-降序排序" class="headerlink" title="快速排序(降序排序)"></a>快速排序(降序排序)</h3><h4 id="有n个数，总共需要进行n-1趟操作，j假设每趟操作前i个元素是有序的，将第i-1位置的元素插入到前i个元素的适当位置。"><a href="#有n个数，总共需要进行n-1趟操作，j假设每趟操作前i个元素是有序的，将第i-1位置的元素插入到前i个元素的适当位置。" class="headerlink" title="有n个数，总共需要进行n-1趟操作，j假设每趟操作前i个元素是有序的，将第i+1位置的元素插入到前i个元素的适当位置。"></a>有n个数，总共需要进行n-1趟操作，j假设每趟操作前i个元素是有序的，将第i+1位置的元素插入到前i个元素的适当位置。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(int i=1;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	 	int temp=a[i],j=i;</span><br><span class="line">		while(j&gt;0&amp;&amp;temp&gt;a[j-1])</span><br><span class="line">		&#123;</span><br><span class="line">			a[j]=a[j-1];</span><br><span class="line">			j--;</span><br><span class="line">		&#125;</span><br><span class="line">		a[j]=temp;	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-EXCEL排序"><a href="#1-EXCEL排序" class="headerlink" title="1.EXCEL排序"></a>1.EXCEL排序</h3><h4 id="Excel可以对一组纪录按任意指定列排序。现请你编写程序实现类似功能。对每个测试用例，首先输出1行“Case-i-”，其中-i-是测试用例的编号（从1开始）。随后在-N-行中输出按要求排序后的结果，即：当-C-1-时，按学号递增排序；当-C-2时，按姓名的非递减字典序排序；当-C-3-时，按成绩的非递减排序。当若干学生具有相同姓名或者相同成绩时，则按他们的学号递增排序。"><a href="#Excel可以对一组纪录按任意指定列排序。现请你编写程序实现类似功能。对每个测试用例，首先输出1行“Case-i-”，其中-i-是测试用例的编号（从1开始）。随后在-N-行中输出按要求排序后的结果，即：当-C-1-时，按学号递增排序；当-C-2时，按姓名的非递减字典序排序；当-C-3-时，按成绩的非递减排序。当若干学生具有相同姓名或者相同成绩时，则按他们的学号递增排序。" class="headerlink" title="Excel可以对一组纪录按任意指定列排序。现请你编写程序实现类似功能。对每个测试用例，首先输出1行“Case i:”，其中 i 是测试用例的编号（从1开始）。随后在 N 行中输出按要求排序后的结果，即：当 C=1 时，按学号递增排序；当 C=2时，按姓名的非递减字典序排序；当 C=3 时，按成绩的非递减排序。当若干学生具有相同姓名或者相同成绩时，则按他们的学号递增排序。"></a>Excel可以对一组纪录按任意指定列排序。现请你编写程序实现类似功能。对每个测试用例，首先输出1行“Case i:”，其中 i 是测试用例的编号（从1开始）。随后在 N 行中输出按要求排序后的结果，即：当 C=1 时，按学号递增排序；当 C=2时，按姓名的非递减字典序排序；当 C=3 时，按成绩的非递减排序。当若干学生具有相同姓名或者相同成绩时，则按他们的学号递增排序。</h4><h4 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="测试输入包含若干测试用例。每个测试用例的第1行包含两个整数-N-N-lt-100000-和-C，其中-N-是纪录的条数，C-是指定排序的列号。以下有N行，每行包含一条学生纪录。每条学生纪录由学号（6位数字，同组测试中没有重复的学号）、姓名（不超过8位且不包含空格的字符串）、成绩（闭区间-0-100-内的整数）组成，每个项目间用1个空格隔开。当读到-N-0-时，全部输入结束，相应的结果不要输出。"><a href="#测试输入包含若干测试用例。每个测试用例的第1行包含两个整数-N-N-lt-100000-和-C，其中-N-是纪录的条数，C-是指定排序的列号。以下有N行，每行包含一条学生纪录。每条学生纪录由学号（6位数字，同组测试中没有重复的学号）、姓名（不超过8位且不包含空格的字符串）、成绩（闭区间-0-100-内的整数）组成，每个项目间用1个空格隔开。当读到-N-0-时，全部输入结束，相应的结果不要输出。" class="headerlink" title="测试输入包含若干测试用例。每个测试用例的第1行包含两个整数 N (N&lt;=100000) 和 C，其中 N 是纪录的条数，C 是指定排序的列号。以下有N行，每行包含一条学生纪录。每条学生纪录由学号（6位数字，同组测试中没有重复的学号）、姓名（不超过8位且不包含空格的字符串）、成绩（闭区间[0, 100]内的整数）组成，每个项目间用1个空格隔开。当读到 N=0 时，全部输入结束，相应的结果不要输出。"></a>测试输入包含若干测试用例。每个测试用例的第1行包含两个整数 N (N&lt;=100000) 和 C，其中 N 是纪录的条数，C 是指定排序的列号。以下有N行，每行包含一条学生纪录。每条学生纪录由学号（6位数字，同组测试中没有重复的学号）、姓名（不超过8位且不包含空格的字符串）、成绩（闭区间[0, 100]内的整数）组成，每个项目间用1个空格隔开。当读到 N=0 时，全部输入结束，相应的结果不要输出。</h5><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="对每个测试用例，首先输出1行“Case-i-”，其中-i-是测试用例的编号（从1开始）。随后在-N-行中输出按要求排序后的结果，即：当-C-1-时，按学号递增排序；当-C-2时，按姓名的非递减字典序排序；当-C-3-时，按成绩的非递减排序。当若干学生具有相同姓名或者相同成绩时，则按他们的学号递增排序。"><a href="#对每个测试用例，首先输出1行“Case-i-”，其中-i-是测试用例的编号（从1开始）。随后在-N-行中输出按要求排序后的结果，即：当-C-1-时，按学号递增排序；当-C-2时，按姓名的非递减字典序排序；当-C-3-时，按成绩的非递减排序。当若干学生具有相同姓名或者相同成绩时，则按他们的学号递增排序。" class="headerlink" title="对每个测试用例，首先输出1行“Case i:”，其中 i 是测试用例的编号（从1开始）。随后在 N 行中输出按要求排序后的结果，即：当 C=1 时，按学号递增排序；当 C=2时，按姓名的非递减字典序排序；当 C=3 时，按成绩的非递减排序。当若干学生具有相同姓名或者相同成绩时，则按他们的学号递增排序。"></a>对每个测试用例，首先输出1行“Case i:”，其中 i 是测试用例的编号（从1开始）。随后在 N 行中输出按要求排序后的结果，即：当 C=1 时，按学号递增排序；当 C=2时，按姓名的非递减字典序排序；当 C=3 时，按成绩的非递减排序。当若干学生具有相同姓名或者相同成绩时，则按他们的学号递增排序。</h5><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 1</span><br><span class="line">000001 Zhao 75</span><br><span class="line">000004 Qian 88</span><br><span class="line">000003 Li 64</span><br><span class="line">000002 Sun 90</span><br><span class="line">4 2</span><br><span class="line">000005 Zhao 95</span><br><span class="line">000011 Zhao 75</span><br><span class="line">000007 Qian 68</span><br><span class="line">000006 Sun 85</span><br><span class="line">4 3</span><br><span class="line">000002 Qian 88</span><br><span class="line">000015 Li 95</span><br><span class="line">000012 Zhao 70</span><br><span class="line">000009 Sun 95</span><br><span class="line">0 3</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">000001 Zhao 75</span><br><span class="line">000002 Sun 90</span><br><span class="line">000003 Li 64</span><br><span class="line">000004 Qian 88</span><br><span class="line">Case 2:</span><br><span class="line">000007 Qian 68</span><br><span class="line">000006 Sun 85</span><br><span class="line">000005 Zhao 95</span><br><span class="line">000011 Zhao 75</span><br><span class="line">Case 3:</span><br><span class="line">000012 Zhao 70</span><br><span class="line">000002 Qian 88</span><br><span class="line">000009 Sun 95</span><br><span class="line">000015 Li 95</span><br></pre></td></tr></table></figure>

<h4 id="思路-根据题意不同的排序规则，分别编写cmp1-cmp2-cmp3-分别读入n和c的值-根据c的值选择排序规则"><a href="#思路-根据题意不同的排序规则，分别编写cmp1-cmp2-cmp3-分别读入n和c的值-根据c的值选择排序规则" class="headerlink" title="思路:根据题意不同的排序规则，分别编写cmp1,cmp2,cmp3,分别读入n和c的值,根据c的值选择排序规则."></a>思路:根据题意不同的排序规则，分别编写cmp1,cmp2,cmp3,分别读入n和c的值,根据c的值选择排序规则.</h4><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><h4 id="1-多组输入-并且当n-0时结束"><a href="#1-多组输入-并且当n-0时结束" class="headerlink" title="1.多组输入,并且当n=0时结束."></a>1.多组输入,并且当n=0时结束.</h4><h4 id="2-开始我将学号定义为字符数组，后来发现学号为六位数，可以用-06d输出，则将学号改为int型接收"><a href="#2-开始我将学号定义为字符数组，后来发现学号为六位数，可以用-06d输出，则将学号改为int型接收" class="headerlink" title="2.开始我将学号定义为字符数组，后来发现学号为六位数，可以用%06d输出，则将学号改为int型接收."></a>2.开始我将学号定义为字符数组，后来发现学号为六位数，可以用%06d输出，则将学号改为int型接收.</h4><h4 id="3-写cmp2函数，字符数组居然直接用-号判断，导致一直WA50-。"><a href="#3-写cmp2函数，字符数组居然直接用-号判断，导致一直WA50-。" class="headerlink" title="3.写cmp2函数，字符数组居然直接用==号判断，导致一直WA50%。"></a>3.写cmp2函数，字符数组居然直接用==号判断，导致一直WA50%。</h4><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">	int num;</span><br><span class="line">	char name[10];</span><br><span class="line">	int score;</span><br><span class="line">&#125;stu[100100];</span><br><span class="line">bool cmp1(student a,student b)	//当 C=1 时，按学号递增排序</span><br><span class="line">&#123;</span><br><span class="line">	return a.num&lt;b.num;</span><br><span class="line">&#125;</span><br><span class="line">bool cmp2(student a,student b) //当 C=2时，按姓名的非递减字典序排序,姓名相同，按学号递增.</span><br><span class="line">&#123;</span><br><span class="line">	if(strcmp(a.name,b.name)!=0)</span><br><span class="line">		return (strcmp(a.name,b.name))&lt;0;</span><br><span class="line">	else</span><br><span class="line">		return a.num&lt;b.num;</span><br><span class="line">&#125;</span><br><span class="line">bool cmp3(student a,student b)//当 C=2时，按成绩的非递减字典序排序,成绩相同，按学号递增.</span><br><span class="line">&#123;</span><br><span class="line">	if(a.score!=b.score)</span><br><span class="line">		return a.score&lt;b.score;</span><br><span class="line">	else</span><br><span class="line">		return a.num&lt;b.num;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int count=1,n,c;</span><br><span class="line">	while(scanf(&quot;%d %d&quot;,&amp;n,&amp;c)==2 &amp;&amp; n)</span><br><span class="line">	&#123;</span><br><span class="line">		for(int i=0;i&lt;n;i++)</span><br><span class="line">			scanf(&quot;%d %s %d&quot;,&amp;stu[i].num,stu[i].name,&amp;stu[i].score);</span><br><span class="line">		if(c==1)</span><br><span class="line">			sort(stu,stu+n,cmp1);</span><br><span class="line">		else if(c==2)</span><br><span class="line">			sort(stu,stu+n,cmp2);</span><br><span class="line">		else if(c==3)</span><br><span class="line">			sort(stu,stu+n,cmp3);</span><br><span class="line">		printf(&quot;Case %d:\n&quot;,count);</span><br><span class="line">		for(int i=0;i&lt;n;i++)</span><br><span class="line">			printf(&quot;%06d %s %d\n&quot;,stu[i].num,stu[i].name,stu[i].score);</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-排名"><a href="#2-排名" class="headerlink" title="2.排名"></a>2.排名</h3><h4 id="今天的上机考试虽然有实时的Ranklist，但上面的排名只是根据完成的题数排序，没有考虑每题的分值，所以并不是最后的排名。给定录取分数线，请你写程序找出最后通过分数线的考生，并将他们的成绩按降序打印。"><a href="#今天的上机考试虽然有实时的Ranklist，但上面的排名只是根据完成的题数排序，没有考虑每题的分值，所以并不是最后的排名。给定录取分数线，请你写程序找出最后通过分数线的考生，并将他们的成绩按降序打印。" class="headerlink" title="今天的上机考试虽然有实时的Ranklist，但上面的排名只是根据完成的题数排序，没有考虑每题的分值，所以并不是最后的排名。给定录取分数线，请你写程序找出最后通过分数线的考生，并将他们的成绩按降序打印。"></a>今天的上机考试虽然有实时的Ranklist，但上面的排名只是根据完成的题数排序，没有考虑每题的分值，所以并不是最后的排名。给定录取分数线，请你写程序找出最后通过分数线的考生，并将他们的成绩按降序打印。</h4><h4 id="输入信息-1"><a href="#输入信息-1" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="测试输入包含若干场考试的信息。每场考试信息的第1行给出考生人数N-0-lt-N-lt-1000-、考题数M-0-lt-M-lt-10-、分数线（正整数）G；第2行排序给出第1题至第M题的正整数分值；以下N行，每行给出一名考生的准考证号（长度不超过20的字符串）、该生解决的题目总数m、以及这m道题的题号（题目号由1到M）。-当读入的考生人数为0时，输入结束，该场考试不予处理。"><a href="#测试输入包含若干场考试的信息。每场考试信息的第1行给出考生人数N-0-lt-N-lt-1000-、考题数M-0-lt-M-lt-10-、分数线（正整数）G；第2行排序给出第1题至第M题的正整数分值；以下N行，每行给出一名考生的准考证号（长度不超过20的字符串）、该生解决的题目总数m、以及这m道题的题号（题目号由1到M）。-当读入的考生人数为0时，输入结束，该场考试不予处理。" class="headerlink" title="测试输入包含若干场考试的信息。每场考试信息的第1行给出考生人数N ( 0 &lt; N &lt; 1000 )、考题数M ( 0 &lt; M &lt; = 10 )、分数线（正整数）G；第2行排序给出第1题至第M题的正整数分值；以下N行，每行给出一名考生的准考证号（长度不超过20的字符串）、该生解决的题目总数m、以及这m道题的题号（题目号由1到M）。 当读入的考生人数为0时，输入结束，该场考试不予处理。"></a>测试输入包含若干场考试的信息。每场考试信息的第1行给出考生人数N ( 0 &lt; N &lt; 1000 )、考题数M ( 0 &lt; M &lt; = 10 )、分数线（正整数）G；第2行排序给出第1题至第M题的正整数分值；以下N行，每行给出一名考生的准考证号（长度不超过20的字符串）、该生解决的题目总数m、以及这m道题的题号（题目号由1到M）。 当读入的考生人数为0时，输入结束，该场考试不予处理。</h5><h4 id="输出信息-1"><a href="#输出信息-1" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="对每场考试，首先在第1行输出不低于分数线的考生人数n，随后n行按分数从高到低输出上线考生的考号与分数，其间用1空格分隔。若有多名考生分数相同，则按他们考号的升序输出。"><a href="#对每场考试，首先在第1行输出不低于分数线的考生人数n，随后n行按分数从高到低输出上线考生的考号与分数，其间用1空格分隔。若有多名考生分数相同，则按他们考号的升序输出。" class="headerlink" title="对每场考试，首先在第1行输出不低于分数线的考生人数n，随后n行按分数从高到低输出上线考生的考号与分数，其间用1空格分隔。若有多名考生分数相同，则按他们考号的升序输出。"></a>对每场考试，首先在第1行输出不低于分数线的考生人数n，随后n行按分数从高到低输出上线考生的考号与分数，其间用1空格分隔。若有多名考生分数相同，则按他们考号的升序输出。</h5><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 5 32</span><br><span class="line">17 10 12 9 15</span><br><span class="line">CS22003 5 1 2 3 4 5</span><br><span class="line">CS22004 3 5 1 3</span><br><span class="line">CS22002 2 1 5</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">CS22003 63</span><br><span class="line">CS22004 44</span><br><span class="line">CS22002 32</span><br></pre></td></tr></table></figure>

<h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">	char num[25];</span><br><span class="line">	int sum;			//存储总分</span><br><span class="line">&#125;stu[1005];</span><br><span class="line">bool cmp(student x,student y)</span><br><span class="line">&#123;</span><br><span class="line">	if(x.sum==y.sum)</span><br><span class="line">		return strcmp(x.num,y.num)&lt;0;</span><br><span class="line">	else</span><br><span class="line">		return x.sum&gt;y.sum;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;n)==1 &amp;&amp; n)	//读取考生人数，人数为0时结束</span><br><span class="line">	&#123;</span><br><span class="line">		int score[15]=&#123;0&#125;;</span><br><span class="line">		int m,g,c=0;</span><br><span class="line">		scanf(&quot;%d %d&quot;,&amp;m,&amp;g);</span><br><span class="line">		for(int i=0;i&lt;m;i++)			//接收1-M题的分数值，并存储</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;score[i+1]);</span><br><span class="line">		for(int i=0;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			int q,total=0,count;</span><br><span class="line">			scanf(&quot;%s %d&quot;,stu[i].num,&amp;count);//接收学生的考号及解决的题数</span><br><span class="line">			while(count--)</span><br><span class="line">			&#123;</span><br><span class="line">				scanf(&quot;%d&quot;,&amp;q);		//接收题号，根据题号判断分数，并累加</span><br><span class="line">				total+=score[q];</span><br><span class="line">			&#125;</span><br><span class="line">			stu[i].sum=total;</span><br><span class="line">			if(stu[i].sum&gt;=g)</span><br><span class="line">				c++;				//记录过线总人数</span><br><span class="line">		&#125;</span><br><span class="line">		sort(stu,stu+m,cmp);	//进行排名</span><br><span class="line">		printf(&quot;%d\n&quot;,c);</span><br><span class="line">		for(int i=0;i&lt;c;i++)</span><br><span class="line">			printf(&quot;%s %d\n&quot;,stu[i].num,stu[i].sum);</span><br><span class="line">	&#125;	</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-日期排序"><a href="#3-日期排序" class="headerlink" title="3.日期排序"></a>3.日期排序</h3><h4 id="有一些日期，日期格式为-“MM-DD-YYYY”。编程将其按日期大小排列。"><a href="#有一些日期，日期格式为-“MM-DD-YYYY”。编程将其按日期大小排列。" class="headerlink" title="有一些日期，日期格式为 “MM/DD/YYYY”。编程将其按日期大小排列。"></a>有一些日期，日期格式为 “MM/DD/YYYY”。编程将其按日期大小排列。</h4><h4 id="输入信息-2"><a href="#输入信息-2" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入第一行一个整-n-1-le-n-le-1000-n-1≤n≤1000-，表示日期的个数。接下来-nn-行按照题目描述的格式输入-nn-个日期。"><a href="#输入第一行一个整-n-1-le-n-le-1000-n-1≤n≤1000-，表示日期的个数。接下来-nn-行按照题目描述的格式输入-nn-个日期。" class="headerlink" title="输入第一行一个整 n(1 \le n \le 1000)n(1≤n≤1000)，表示日期的个数。接下来 nn 行按照题目描述的格式输入 nn 个日期。"></a>输入第一行一个整 n(1 \le n \le 1000)n(1≤n≤1000)，表示日期的个数。接下来 nn 行按照题目描述的格式输入 nn 个日期。</h5><h4 id="输出信息-2"><a href="#输出信息-2" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出从早到晚排序后的日期，一个日期占一行，日期输出的格式和输入一样。"><a href="#输出从早到晚排序后的日期，一个日期占一行，日期输出的格式和输入一样。" class="headerlink" title="输出从早到晚排序后的日期，一个日期占一行，日期输出的格式和输入一样。"></a>输出从早到晚排序后的日期，一个日期占一行，日期输出的格式和输入一样。</h5><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">01/26/1998</span><br><span class="line">09/26/1927</span><br><span class="line">01/05/1927</span><br><span class="line">04/16/2024</span><br><span class="line">08/08/1993</span><br><span class="line">01/01/2019</span><br><span class="line">06/22/1973</span><br><span class="line">07/16/2030</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01/05/1927</span><br><span class="line">09/26/1927</span><br><span class="line">06/22/1973</span><br><span class="line">08/08/1993</span><br><span class="line">01/26/1998</span><br><span class="line">01/01/2019</span><br><span class="line">04/16/2024</span><br><span class="line">07/16/2030</span><br></pre></td></tr></table></figure>

<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h3><h4 id="该题的主要难度在与cmp函数的书写，分别对年月日进行处理，完成对日期排序。"><a href="#该题的主要难度在与cmp函数的书写，分别对年月日进行处理，完成对日期排序。" class="headerlink" title="该题的主要难度在与cmp函数的书写，分别对年月日进行处理，完成对日期排序。"></a>该题的主要难度在与cmp函数的书写，分别对年月日进行处理，完成对日期排序。</h4><h4 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct date</span><br><span class="line">&#123;</span><br><span class="line">	int year;</span><br><span class="line">	int month;</span><br><span class="line">	int day;</span><br><span class="line">&#125;d[1010];</span><br><span class="line">bool cmp(date a,date b)</span><br><span class="line">&#123;</span><br><span class="line">	if(a.year==b.year)</span><br><span class="line">	&#123;</span><br><span class="line">		if(a.month==b.month)</span><br><span class="line">			return a.day&lt;b.day;</span><br><span class="line">		else</span><br><span class="line">			return a.month&lt;b.month;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">		return a.year&lt;b.year; </span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	for(int i=0;i&lt;n;i++)</span><br><span class="line">		scanf(&quot;%d/%d/%d&quot;,&amp;d[i].month,&amp;d[i].day,&amp;d[i].year);</span><br><span class="line">	sort(d,d+n,cmp);</span><br><span class="line">	for(int i=0;i&lt;n;i++)</span><br><span class="line">		printf(&quot;%02d/%02d/%d\n&quot;,d[i].month,d[i].day,d[i].year);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--字符串处理(一)</title>
    <url>/2020/02/02/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="1-字符串去特定字符"><a href="#1-字符串去特定字符" class="headerlink" title="1.字符串去特定字符"></a>1.字符串去特定字符</h3><h4 id="输入字符串s和字符c，要求去掉s中所有的c字符，并输出结果。"><a href="#输入字符串s和字符c，要求去掉s中所有的c字符，并输出结果。" class="headerlink" title="输入字符串s和字符c，要求去掉s中所有的c字符，并输出结果。"></a>输入字符串s和字符c，要求去掉s中所有的c字符，并输出结果。</h4><h4 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="测试数据有多组，每组输入字符串s和字符c。"><a href="#测试数据有多组，每组输入字符串s和字符c。" class="headerlink" title="测试数据有多组，每组输入字符串s和字符c。"></a>测试数据有多组，每组输入字符串s和字符c。</h5><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="对于每组输入-输出去除c字符后的结果。"><a href="#对于每组输入-输出去除c字符后的结果。" class="headerlink" title="对于每组输入,输出去除c字符后的结果。"></a>对于每组输入,输出去除c字符后的结果。</h5><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goaod</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">good</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><h4 id="1-测试数据为多组"><a href="#1-测试数据为多组" class="headerlink" title="(1)测试数据为多组"></a>(1)测试数据为多组</h4><h4 id="2-gets-会吸收换行，用getchar-吸收掉printf-的换行"><a href="#2-gets-会吸收换行，用getchar-吸收掉printf-的换行" class="headerlink" title="(2)gets()会吸收换行，用getchar()吸收掉printf()的换行."></a>(2)gets()会吸收换行，用getchar()吸收掉printf()的换行.</h4><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[105],b[105];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char c;</span><br><span class="line">	while(gets(a) )</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%c&quot;,&amp;c);</span><br><span class="line">		int len=strlen(a),count=0;</span><br><span class="line">		for(int i=0;i&lt;len;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(a[i]!=c)</span><br><span class="line">				b[count++]=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		b[count]=&apos;\0&apos;;</span><br><span class="line">		printf(&quot;%s\n&quot;,b);</span><br><span class="line">		getchar();				</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-单词替换"><a href="#2-单词替换" class="headerlink" title="2.单词替换"></a>2.单词替换</h3><h4 id="输入一个字符串，以回车结束（字符串长度-lt-100）。该字符串由若干个单词组成，单词之间用一个空格隔开，所有单词区分大小写。现需要将其中的某个单词替换成另一个单词，并输出替换之后的字符串。"><a href="#输入一个字符串，以回车结束（字符串长度-lt-100）。该字符串由若干个单词组成，单词之间用一个空格隔开，所有单词区分大小写。现需要将其中的某个单词替换成另一个单词，并输出替换之后的字符串。" class="headerlink" title="输入一个字符串，以回车结束（字符串长度&lt;=100）。该字符串由若干个单词组成，单词之间用一个空格隔开，所有单词区分大小写。现需要将其中的某个单词替换成另一个单词，并输出替换之后的字符串。"></a>输入一个字符串，以回车结束（字符串长度&lt;=100）。该字符串由若干个单词组成，单词之间用一个空格隔开，所有单词区分大小写。现需要将其中的某个单词替换成另一个单词，并输出替换之后的字符串。</h4><h4 id="输入信息-1"><a href="#输入信息-1" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="多组数据。每组数据输入包括3行，"><a href="#多组数据。每组数据输入包括3行，" class="headerlink" title="多组数据。每组数据输入包括3行，"></a>多组数据。每组数据输入包括3行，</h5><h5 id="第1行是包含多个单词的字符串-s，"><a href="#第1行是包含多个单词的字符串-s，" class="headerlink" title="第1行是包含多个单词的字符串 s，"></a>第1行是包含多个单词的字符串 s，</h5><h5 id="第2行是待替换的单词a，-长度-lt-100"><a href="#第2行是待替换的单词a，-长度-lt-100" class="headerlink" title="第2行是待替换的单词a，(长度&lt;=100)"></a>第2行是待替换的单词a，(长度&lt;=100)</h5><h5 id="第3行是a将被替换的单词b。-长度-lt-100"><a href="#第3行是a将被替换的单词b。-长度-lt-100" class="headerlink" title="第3行是a将被替换的单词b。(长度&lt;=100)"></a>第3行是a将被替换的单词b。(长度&lt;=100)</h5><h5 id="s-a-b-最前面和最后面都没有空格。"><a href="#s-a-b-最前面和最后面都没有空格。" class="headerlink" title="s, a, b 最前面和最后面都没有空格。"></a>s, a, b 最前面和最后面都没有空格。</h5><h4 id="输出信息-1"><a href="#输出信息-1" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="每个测试数据输出只有-1-行，"><a href="#每个测试数据输出只有-1-行，" class="headerlink" title="每个测试数据输出只有 1 行，"></a>每个测试数据输出只有 1 行，</h5><h5 id="将s中所有单词a替换成b之后的字符串。"><a href="#将s中所有单词a替换成b之后的字符串。" class="headerlink" title="将s中所有单词a替换成b之后的字符串。"></a>将s中所有单词a替换成b之后的字符串。</h5><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I love Tian Qin</span><br><span class="line">I</span><br><span class="line">You</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You love Tian Qin</span><br></pre></td></tr></table></figure>

<h4 id="注意-1-多组输入输出-包含空格"><a href="#注意-1-多组输入输出-包含空格" class="headerlink" title="注意:1.多组输入输出,包含空格."></a>注意:1.多组输入输出,包含空格.</h4><h4 id="2注意单词的长度-报RE的错误"><a href="#2注意单词的长度-报RE的错误" class="headerlink" title="2注意单词的长度,报RE的错误."></a>2注意单词的长度,报RE的错误.</h4><h4 id="注意-3-执行一次，注意清空数组，AC-50。"><a href="#注意-3-执行一次，注意清空数组，AC-50。" class="headerlink" title="注意:3.执行一次，注意清空数组，AC%50。"></a>注意:3.执行一次，注意清空数组，AC%50。</h4><h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char a[105],b[105],c[105];</span><br><span class="line">	while(gets(a) &amp;&amp; gets(b) &amp;&amp; gets(c))//分别输入字符串,和两个单词.</span><br><span class="line">	&#123;</span><br><span class="line">		char ans[105][105]=&#123;&#123;&#125;&#125;;</span><br><span class="line">		int len=strlen(a),r=0,h=0;</span><br><span class="line">		for(int i=0;i&lt;len;i++)//逐个读取每个单词，并存储</span><br><span class="line">		&#123;</span><br><span class="line">			if(a[i]!=&apos; &apos;)</span><br><span class="line">				ans[r][h++]=a[i];</span><br><span class="line">			else</span><br><span class="line">			&#123;</span><br><span class="line">				ans[r][h]=&apos;\0&apos;;</span><br><span class="line">				r++;</span><br><span class="line">				h=0;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		for(int i=0;i&lt;=r;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(strcmp(ans[i],b)==0)//如果两个单词能够匹配，进行替换输出</span><br><span class="line">				printf(&quot;%s&quot;,c);</span><br><span class="line">			else</span><br><span class="line">				printf(&quot;%s&quot;,ans[i]);</span><br><span class="line">			if(i!=r)</span><br><span class="line">				printf(&quot; &quot;);</span><br><span class="line">			else</span><br><span class="line">				printf(&quot;\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-编排字符串"><a href="#3-编排字符串" class="headerlink" title="3.编排字符串"></a>3.编排字符串</h3><h4 id="请输入字符串，最多输入4-个字符串，要求后输入的字符串排在前面，例如"><a href="#请输入字符串，最多输入4-个字符串，要求后输入的字符串排在前面，例如" class="headerlink" title="请输入字符串，最多输入4 个字符串，要求后输入的字符串排在前面，例如"></a>请输入字符串，最多输入4 个字符串，要求后输入的字符串排在前面，例如</h4><h4 id="输入：EricZ"><a href="#输入：EricZ" class="headerlink" title="输入：EricZ"></a>输入：EricZ</h4><h4 id="输出：1-EricZ"><a href="#输出：1-EricZ" class="headerlink" title="输出：1=EricZ"></a>输出：1=EricZ</h4><h4 id="输入：David"><a href="#输入：David" class="headerlink" title="输入：David"></a>输入：David</h4><h4 id="输出：1-David-2-EricZ"><a href="#输出：1-David-2-EricZ" class="headerlink" title="输出：1=David 2=EricZ"></a>输出：1=David 2=EricZ</h4><h4 id="输入：Peter"><a href="#输入：Peter" class="headerlink" title="输入：Peter"></a>输入：Peter</h4><h4 id="输出：1-Peter-2-David-3-EricZ"><a href="#输出：1-Peter-2-David-3-EricZ" class="headerlink" title="输出：1=Peter 2=David 3=EricZ"></a>输出：1=Peter 2=David 3=EricZ</h4><h4 id="输入：Alan"><a href="#输入：Alan" class="headerlink" title="输入：Alan"></a>输入：Alan</h4><h4 id="输出：1-Alan-2-Peter-3-David-4-EricZ"><a href="#输出：1-Alan-2-Peter-3-David-4-EricZ" class="headerlink" title="输出：1=Alan 2=Peter 3=David 4=EricZ"></a>输出：1=Alan 2=Peter 3=David 4=EricZ</h4><h4 id="输入：Jane"><a href="#输入：Jane" class="headerlink" title="输入：Jane"></a>输入：Jane</h4><h4 id="输出：1-Jane-2-Alan-3-Peter-4-David"><a href="#输出：1-Jane-2-Alan-3-Peter-4-David" class="headerlink" title="输出：1=Jane 2=Alan 3=Peter 4=David"></a>输出：1=Jane 2=Alan 3=Peter 4=David</h4><h4 id="输入信息-2"><a href="#输入信息-2" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="第一行为字符串个数m，接下来m行每行一个字符床，m不超过100，每个字符床长度不超过20。"><a href="#第一行为字符串个数m，接下来m行每行一个字符床，m不超过100，每个字符床长度不超过20。" class="headerlink" title="第一行为字符串个数m，接下来m行每行一个字符床，m不超过100，每个字符床长度不超过20。"></a>第一行为字符串个数m，接下来m行每行一个字符床，m不超过100，每个字符床长度不超过20。</h5><h4 id="输出信息-2"><a href="#输出信息-2" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出m行，每行按照样例格式输出，注意用一个空格隔开。"><a href="#输出m行，每行按照样例格式输出，注意用一个空格隔开。" class="headerlink" title="输出m行，每行按照样例格式输出，注意用一个空格隔开。"></a>输出m行，每行按照样例格式输出，注意用一个空格隔开。</h5><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">EricZ</span><br><span class="line">David</span><br><span class="line">Peter</span><br><span class="line">Alan</span><br><span class="line">Jane</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1=EricZ</span><br><span class="line">1=David 2=EricZ</span><br><span class="line">1=Peter 2=David 3=EricZ</span><br><span class="line">1=Alan 2=Peter 3=David 4=EricZ</span><br><span class="line">1=Jane 2=Alan 3=Peter 4=David</span><br></pre></td></tr></table></figure>

<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h4><h4 id="1-注意存储类似堆栈，先输入的后输出"><a href="#1-注意存储类似堆栈，先输入的后输出" class="headerlink" title="(1)注意存储类似堆栈，先输入的后输出"></a>(1)注意存储类似堆栈，先输入的后输出</h4><h4 id="2-注意最多只能输出四个，并且输出后四个"><a href="#2-注意最多只能输出四个，并且输出后四个" class="headerlink" title="(2)注意最多只能输出四个，并且输出后四个."></a>(2)注意最多只能输出四个，并且输出后四个.</h4><h4 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char ans[105][25];</span><br><span class="line">	int m;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">	for(int i=0;i&lt;m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%s&quot;,ans[i]);		//读入一个单词，并且存储在数组中。</span><br><span class="line">		for(int j=0;j&lt;=i&amp;&amp;j&lt;=3;j++)//最多进行四次循环输出四个数.</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;%d=%s&quot;,j+1,ans[i-j]);</span><br><span class="line">			if(i!=j)			//如果不是输入最后一个单词，则输出空格</span><br><span class="line">				printf(&quot; &quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n&quot;);		//输出换行</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-字符串的查找删除"><a href="#4-字符串的查找删除" class="headerlink" title="4.字符串的查找删除"></a>4.字符串的查找删除</h3><h4 id="给定一个短字符串（不含空格），再给定若干字符串，在这些字符串中删除所含有的短字符串。"><a href="#给定一个短字符串（不含空格），再给定若干字符串，在这些字符串中删除所含有的短字符串。" class="headerlink" title="给定一个短字符串（不含空格），再给定若干字符串，在这些字符串中删除所含有的短字符串。"></a>给定一个短字符串（不含空格），再给定若干字符串，在这些字符串中删除所含有的短字符串。</h4><h4 id="输入信息-3"><a href="#输入信息-3" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入只有1组数据。"><a href="#输入只有1组数据。" class="headerlink" title="输入只有1组数据。"></a>输入只有1组数据。</h5><h5 id="输入一个短字符串（不含空格），再输入若干字符串直到文件结束为止。"><a href="#输入一个短字符串（不含空格），再输入若干字符串直到文件结束为止。" class="headerlink" title="输入一个短字符串（不含空格），再输入若干字符串直到文件结束为止。"></a>输入一个短字符串（不含空格），再输入若干字符串直到文件结束为止。</h5><h4 id="输出信息-3"><a href="#输出信息-3" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="删除输入的短字符串-不区分大小写-并去掉空格-输出。"><a href="#删除输入的短字符串-不区分大小写-并去掉空格-输出。" class="headerlink" title="删除输入的短字符串(不区分大小写)并去掉空格,输出。"></a>删除输入的短字符串(不区分大小写)并去掉空格,输出。</h5><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">in</span><br><span class="line">#include </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot; Hi &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#clude</span><br><span class="line">tma()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">prtf(&quot;Hi&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意:"></a>注意:</h3><h4 id="1-测试数据为多组-1"><a href="#1-测试数据为多组-1" class="headerlink" title="(1)测试数据为多组"></a>(1)测试数据为多组</h4><h4 id="2-gets-会吸收换行，用getchar-吸收掉scanf-的换行。"><a href="#2-gets-会吸收换行，用getchar-吸收掉scanf-的换行。" class="headerlink" title="(2)gets()会吸收换行，用getchar()吸收掉scanf()的换行。"></a>(2)gets()会吸收换行，用getchar()吸收掉scanf()的换行。</h4><h4 id="3-将字符串中的In、IN、iN、in删除。"><a href="#3-将字符串中的In、IN、iN、in删除。" class="headerlink" title="(3)将字符串中的In、IN、iN、in删除。"></a>(3)将字符串中的In、IN、iN、in删除。</h4><h4 id="4-将字符串空间开辟的大一点，RE-50。"><a href="#4-将字符串空间开辟的大一点，RE-50。" class="headerlink" title="(4)将字符串空间开辟的大一点，RE%50。"></a>(4)将字符串空间开辟的大一点，RE%50。</h4><h4 id="5-注意空格不输出。"><a href="#5-注意空格不输出。" class="headerlink" title="(5)注意空格不输出。"></a>(5)注意空格不输出。</h4><h4 id="代码如下-3"><a href="#代码如下-3" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[1005],b[1005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	scanf(&quot;%s&quot;,a);</span><br><span class="line">	getchar();		//吸收scanf()的换行</span><br><span class="line">	int lenA=strlen(a);</span><br><span class="line">	for(int i=0;i&lt;lenA;i++)//将所有大写字母转换为小写</span><br><span class="line">		if(a[i]&gt;=&apos;A&apos;&amp;&amp;a[i]&lt;=&apos;Z&apos;)</span><br><span class="line">			a[i]=a[i]+32;</span><br><span class="line">	while(gets(b))</span><br><span class="line">	&#123;</span><br><span class="line">		int lenB=strlen(b),i=0,j;</span><br><span class="line">		while(i&lt;lenB)		//从下标0开始循环，直至最后</span><br><span class="line">		&#123;</span><br><span class="line">			for(j=i;j&lt;i+lenA;j++)		//从i开始在lenA的空间内进行匹配，匹配不成功，则跳出循环</span><br><span class="line">				if(b[j]!=a[j-i]&amp;&amp;b[j]+32!=a[j-i])</span><br><span class="line">					break;</span><br><span class="line">			if(j&gt;=i+lenA)	//如果匹配成功，i从i+lenA开始</span><br><span class="line">				i=i+lenA;</span><br><span class="line">			else</span><br><span class="line">			&#123;</span><br><span class="line">				if(b[i]!=&apos; &apos;)//否则并且不为空格的话，进行输出该字符，i++</span><br><span class="line">					printf(&quot;%c&quot;,b[i]);</span><br><span class="line">				i++;</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--字符串处理(一)</title>
    <url>/2020/02/02/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86(%E4%B8%80)/</url>
    <content><![CDATA[<h3 id="1-字符串去特定字符"><a href="#1-字符串去特定字符" class="headerlink" title="1.字符串去特定字符"></a>1.字符串去特定字符</h3><h4 id="输入字符串s和字符c，要求去掉s中所有的c字符，并输出结果。"><a href="#输入字符串s和字符c，要求去掉s中所有的c字符，并输出结果。" class="headerlink" title="输入字符串s和字符c，要求去掉s中所有的c字符，并输出结果。"></a>输入字符串s和字符c，要求去掉s中所有的c字符，并输出结果。</h4><h4 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="测试数据有多组，每组输入字符串s和字符c。"><a href="#测试数据有多组，每组输入字符串s和字符c。" class="headerlink" title="测试数据有多组，每组输入字符串s和字符c。"></a>测试数据有多组，每组输入字符串s和字符c。</h5><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="对于每组输入-输出去除c字符后的结果。"><a href="#对于每组输入-输出去除c字符后的结果。" class="headerlink" title="对于每组输入,输出去除c字符后的结果。"></a>对于每组输入,输出去除c字符后的结果。</h5><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goaod</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">good</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><h4 id="1-测试数据为多组"><a href="#1-测试数据为多组" class="headerlink" title="(1)测试数据为多组"></a>(1)测试数据为多组</h4><h4 id="2-gets-会吸收换行，用getchar-吸收掉printf-的换行"><a href="#2-gets-会吸收换行，用getchar-吸收掉printf-的换行" class="headerlink" title="(2)gets()会吸收换行，用getchar()吸收掉printf()的换行."></a>(2)gets()会吸收换行，用getchar()吸收掉printf()的换行.</h4><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[105],b[105];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char c;</span><br><span class="line">	while(gets(a) )</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%c&quot;,&amp;c);</span><br><span class="line">		int len=strlen(a),count=0;</span><br><span class="line">		for(int i=0;i&lt;len;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(a[i]!=c)</span><br><span class="line">				b[count++]=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		b[count]=&apos;\0&apos;;</span><br><span class="line">		printf(&quot;%s\n&quot;,b);</span><br><span class="line">		getchar();				</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-单词替换"><a href="#2-单词替换" class="headerlink" title="2.单词替换"></a>2.单词替换</h3><h4 id="输入一个字符串，以回车结束（字符串长度-lt-100）。该字符串由若干个单词组成，单词之间用一个空格隔开，所有单词区分大小写。现需要将其中的某个单词替换成另一个单词，并输出替换之后的字符串。"><a href="#输入一个字符串，以回车结束（字符串长度-lt-100）。该字符串由若干个单词组成，单词之间用一个空格隔开，所有单词区分大小写。现需要将其中的某个单词替换成另一个单词，并输出替换之后的字符串。" class="headerlink" title="输入一个字符串，以回车结束（字符串长度&lt;=100）。该字符串由若干个单词组成，单词之间用一个空格隔开，所有单词区分大小写。现需要将其中的某个单词替换成另一个单词，并输出替换之后的字符串。"></a>输入一个字符串，以回车结束（字符串长度&lt;=100）。该字符串由若干个单词组成，单词之间用一个空格隔开，所有单词区分大小写。现需要将其中的某个单词替换成另一个单词，并输出替换之后的字符串。</h4><h4 id="输入信息-1"><a href="#输入信息-1" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="多组数据。每组数据输入包括3行，"><a href="#多组数据。每组数据输入包括3行，" class="headerlink" title="多组数据。每组数据输入包括3行，"></a>多组数据。每组数据输入包括3行，</h5><h5 id="第1行是包含多个单词的字符串-s，"><a href="#第1行是包含多个单词的字符串-s，" class="headerlink" title="第1行是包含多个单词的字符串 s，"></a>第1行是包含多个单词的字符串 s，</h5><h5 id="第2行是待替换的单词a，-长度-lt-100"><a href="#第2行是待替换的单词a，-长度-lt-100" class="headerlink" title="第2行是待替换的单词a，(长度&lt;=100)"></a>第2行是待替换的单词a，(长度&lt;=100)</h5><h5 id="第3行是a将被替换的单词b。-长度-lt-100"><a href="#第3行是a将被替换的单词b。-长度-lt-100" class="headerlink" title="第3行是a将被替换的单词b。(长度&lt;=100)"></a>第3行是a将被替换的单词b。(长度&lt;=100)</h5><h5 id="s-a-b-最前面和最后面都没有空格。"><a href="#s-a-b-最前面和最后面都没有空格。" class="headerlink" title="s, a, b 最前面和最后面都没有空格。"></a>s, a, b 最前面和最后面都没有空格。</h5><h4 id="输出信息-1"><a href="#输出信息-1" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="每个测试数据输出只有-1-行，"><a href="#每个测试数据输出只有-1-行，" class="headerlink" title="每个测试数据输出只有 1 行，"></a>每个测试数据输出只有 1 行，</h5><h5 id="将s中所有单词a替换成b之后的字符串。"><a href="#将s中所有单词a替换成b之后的字符串。" class="headerlink" title="将s中所有单词a替换成b之后的字符串。"></a>将s中所有单词a替换成b之后的字符串。</h5><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I love Tian Qin</span><br><span class="line">I</span><br><span class="line">You</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You love Tian Qin</span><br></pre></td></tr></table></figure>

<h4 id="注意-1-多组输入输出-包含空格"><a href="#注意-1-多组输入输出-包含空格" class="headerlink" title="注意:1.多组输入输出,包含空格."></a>注意:1.多组输入输出,包含空格.</h4><h4 id="2注意单词的长度-报RE的错误"><a href="#2注意单词的长度-报RE的错误" class="headerlink" title="2注意单词的长度,报RE的错误."></a>2注意单词的长度,报RE的错误.</h4><h4 id="注意-3-执行一次，注意清空数组，AC-50。"><a href="#注意-3-执行一次，注意清空数组，AC-50。" class="headerlink" title="注意:3.执行一次，注意清空数组，AC%50。"></a>注意:3.执行一次，注意清空数组，AC%50。</h4><h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char a[105],b[105],c[105];</span><br><span class="line">	while(gets(a) &amp;&amp; gets(b) &amp;&amp; gets(c))//分别输入字符串,和两个单词.</span><br><span class="line">	&#123;</span><br><span class="line">		char ans[105][105]=&#123;&#123;&#125;&#125;;</span><br><span class="line">		int len=strlen(a),r=0,h=0;</span><br><span class="line">		for(int i=0;i&lt;len;i++)//逐个读取每个单词，并存储</span><br><span class="line">		&#123;</span><br><span class="line">			if(a[i]!=&apos; &apos;)</span><br><span class="line">				ans[r][h++]=a[i];</span><br><span class="line">			else</span><br><span class="line">			&#123;</span><br><span class="line">				ans[r][h]=&apos;\0&apos;;</span><br><span class="line">				r++;</span><br><span class="line">				h=0;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		for(int i=0;i&lt;=r;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(strcmp(ans[i],b)==0)//如果两个单词能够匹配，进行替换输出</span><br><span class="line">				printf(&quot;%s&quot;,c);</span><br><span class="line">			else</span><br><span class="line">				printf(&quot;%s&quot;,ans[i]);</span><br><span class="line">			if(i!=r)</span><br><span class="line">				printf(&quot; &quot;);</span><br><span class="line">			else</span><br><span class="line">				printf(&quot;\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-编排字符串"><a href="#3-编排字符串" class="headerlink" title="3.编排字符串"></a>3.编排字符串</h3><h4 id="请输入字符串，最多输入4-个字符串，要求后输入的字符串排在前面，例如"><a href="#请输入字符串，最多输入4-个字符串，要求后输入的字符串排在前面，例如" class="headerlink" title="请输入字符串，最多输入4 个字符串，要求后输入的字符串排在前面，例如"></a>请输入字符串，最多输入4 个字符串，要求后输入的字符串排在前面，例如</h4><h4 id="输入：EricZ"><a href="#输入：EricZ" class="headerlink" title="输入：EricZ"></a>输入：EricZ</h4><h4 id="输出：1-EricZ"><a href="#输出：1-EricZ" class="headerlink" title="输出：1=EricZ"></a>输出：1=EricZ</h4><h4 id="输入：David"><a href="#输入：David" class="headerlink" title="输入：David"></a>输入：David</h4><h4 id="输出：1-David-2-EricZ"><a href="#输出：1-David-2-EricZ" class="headerlink" title="输出：1=David 2=EricZ"></a>输出：1=David 2=EricZ</h4><h4 id="输入：Peter"><a href="#输入：Peter" class="headerlink" title="输入：Peter"></a>输入：Peter</h4><h4 id="输出：1-Peter-2-David-3-EricZ"><a href="#输出：1-Peter-2-David-3-EricZ" class="headerlink" title="输出：1=Peter 2=David 3=EricZ"></a>输出：1=Peter 2=David 3=EricZ</h4><h4 id="输入：Alan"><a href="#输入：Alan" class="headerlink" title="输入：Alan"></a>输入：Alan</h4><h4 id="输出：1-Alan-2-Peter-3-David-4-EricZ"><a href="#输出：1-Alan-2-Peter-3-David-4-EricZ" class="headerlink" title="输出：1=Alan 2=Peter 3=David 4=EricZ"></a>输出：1=Alan 2=Peter 3=David 4=EricZ</h4><h4 id="输入：Jane"><a href="#输入：Jane" class="headerlink" title="输入：Jane"></a>输入：Jane</h4><h4 id="输出：1-Jane-2-Alan-3-Peter-4-David"><a href="#输出：1-Jane-2-Alan-3-Peter-4-David" class="headerlink" title="输出：1=Jane 2=Alan 3=Peter 4=David"></a>输出：1=Jane 2=Alan 3=Peter 4=David</h4><h4 id="输入信息-2"><a href="#输入信息-2" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="第一行为字符串个数m，接下来m行每行一个字符床，m不超过100，每个字符床长度不超过20。"><a href="#第一行为字符串个数m，接下来m行每行一个字符床，m不超过100，每个字符床长度不超过20。" class="headerlink" title="第一行为字符串个数m，接下来m行每行一个字符床，m不超过100，每个字符床长度不超过20。"></a>第一行为字符串个数m，接下来m行每行一个字符床，m不超过100，每个字符床长度不超过20。</h5><h4 id="输出信息-2"><a href="#输出信息-2" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出m行，每行按照样例格式输出，注意用一个空格隔开。"><a href="#输出m行，每行按照样例格式输出，注意用一个空格隔开。" class="headerlink" title="输出m行，每行按照样例格式输出，注意用一个空格隔开。"></a>输出m行，每行按照样例格式输出，注意用一个空格隔开。</h5><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">EricZ</span><br><span class="line">David</span><br><span class="line">Peter</span><br><span class="line">Alan</span><br><span class="line">Jane</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1=EricZ</span><br><span class="line">1=David 2=EricZ</span><br><span class="line">1=Peter 2=David 3=EricZ</span><br><span class="line">1=Alan 2=Peter 3=David 4=EricZ</span><br><span class="line">1=Jane 2=Alan 3=Peter 4=David</span><br></pre></td></tr></table></figure>

<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h4><h4 id="1-注意存储类似堆栈，先输入的后输出"><a href="#1-注意存储类似堆栈，先输入的后输出" class="headerlink" title="(1)注意存储类似堆栈，先输入的后输出"></a>(1)注意存储类似堆栈，先输入的后输出</h4><h4 id="2-注意最多只能输出四个，并且输出后四个"><a href="#2-注意最多只能输出四个，并且输出后四个" class="headerlink" title="(2)注意最多只能输出四个，并且输出后四个."></a>(2)注意最多只能输出四个，并且输出后四个.</h4><h4 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char ans[105][25];</span><br><span class="line">	int m;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">	for(int i=0;i&lt;m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%s&quot;,ans[i]);		//读入一个单词，并且存储在数组中。</span><br><span class="line">		for(int j=0;j&lt;=i&amp;&amp;j&lt;=3;j++)//最多进行四次循环输出四个数.</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;%d=%s&quot;,j+1,ans[i-j]);</span><br><span class="line">			if(i!=j)			//如果不是输入最后一个单词，则输出空格</span><br><span class="line">				printf(&quot; &quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n&quot;);		//输出换行</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-字符串的查找删除"><a href="#4-字符串的查找删除" class="headerlink" title="4.字符串的查找删除"></a>4.字符串的查找删除</h3><h4 id="给定一个短字符串（不含空格），再给定若干字符串，在这些字符串中删除所含有的短字符串。"><a href="#给定一个短字符串（不含空格），再给定若干字符串，在这些字符串中删除所含有的短字符串。" class="headerlink" title="给定一个短字符串（不含空格），再给定若干字符串，在这些字符串中删除所含有的短字符串。"></a>给定一个短字符串（不含空格），再给定若干字符串，在这些字符串中删除所含有的短字符串。</h4><h4 id="输入信息-3"><a href="#输入信息-3" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入只有1组数据。"><a href="#输入只有1组数据。" class="headerlink" title="输入只有1组数据。"></a>输入只有1组数据。</h5><h5 id="输入一个短字符串（不含空格），再输入若干字符串直到文件结束为止。"><a href="#输入一个短字符串（不含空格），再输入若干字符串直到文件结束为止。" class="headerlink" title="输入一个短字符串（不含空格），再输入若干字符串直到文件结束为止。"></a>输入一个短字符串（不含空格），再输入若干字符串直到文件结束为止。</h5><h4 id="输出信息-3"><a href="#输出信息-3" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="删除输入的短字符串-不区分大小写-并去掉空格-输出。"><a href="#删除输入的短字符串-不区分大小写-并去掉空格-输出。" class="headerlink" title="删除输入的短字符串(不区分大小写)并去掉空格,输出。"></a>删除输入的短字符串(不区分大小写)并去掉空格,输出。</h5><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">in</span><br><span class="line">#include </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot; Hi &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#clude</span><br><span class="line">tma()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">prtf(&quot;Hi&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意:"></a>注意:</h3><h4 id="1-测试数据为多组-1"><a href="#1-测试数据为多组-1" class="headerlink" title="(1)测试数据为多组"></a>(1)测试数据为多组</h4><h4 id="2-gets-会吸收换行，用getchar-吸收掉scanf-的换行。"><a href="#2-gets-会吸收换行，用getchar-吸收掉scanf-的换行。" class="headerlink" title="(2)gets()会吸收换行，用getchar()吸收掉scanf()的换行。"></a>(2)gets()会吸收换行，用getchar()吸收掉scanf()的换行。</h4><h4 id="3-将字符串中的In、IN、iN、in删除。"><a href="#3-将字符串中的In、IN、iN、in删除。" class="headerlink" title="(3)将字符串中的In、IN、iN、in删除。"></a>(3)将字符串中的In、IN、iN、in删除。</h4><h4 id="4-将字符串空间开辟的大一点，RE-50。"><a href="#4-将字符串空间开辟的大一点，RE-50。" class="headerlink" title="(4)将字符串空间开辟的大一点，RE%50。"></a>(4)将字符串空间开辟的大一点，RE%50。</h4><h4 id="5-注意空格不输出。"><a href="#5-注意空格不输出。" class="headerlink" title="(5)注意空格不输出。"></a>(5)注意空格不输出。</h4><h4 id="代码如下-3"><a href="#代码如下-3" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[1005],b[1005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	scanf(&quot;%s&quot;,a);</span><br><span class="line">	getchar();		//吸收scanf()的换行</span><br><span class="line">	int lenA=strlen(a);</span><br><span class="line">	for(int i=0;i&lt;lenA;i++)//将所有大写字母转换为小写</span><br><span class="line">		if(a[i]&gt;=&apos;A&apos;&amp;&amp;a[i]&lt;=&apos;Z&apos;)</span><br><span class="line">			a[i]=a[i]+32;</span><br><span class="line">	while(gets(b))</span><br><span class="line">	&#123;</span><br><span class="line">		int lenB=strlen(b),i=0,j;</span><br><span class="line">		while(i&lt;lenB)		//从下标0开始循环，直至最后</span><br><span class="line">		&#123;</span><br><span class="line">			for(j=i;j&lt;i+lenA;j++)		//从i开始在lenA的空间内进行匹配，匹配不成功，则跳出循环</span><br><span class="line">				if(b[j]!=a[j-i]&amp;&amp;b[j]+32!=a[j-i])</span><br><span class="line">					break;</span><br><span class="line">			if(j&gt;=i+lenA)	//如果匹配成功，i从i+lenA开始</span><br><span class="line">				i=i+lenA;</span><br><span class="line">			else</span><br><span class="line">			&#123;</span><br><span class="line">				if(b[i]!=&apos; &apos;)//否则并且不为空格的话，进行输出该字符，i++</span><br><span class="line">					printf(&quot;%c&quot;,b[i]);</span><br><span class="line">				i++;</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--念数字</title>
    <url>/2020/02/02/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E5%BF%B5%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h3 id="念数字"><a href="#念数字" class="headerlink" title="念数字"></a>念数字</h3><h4 id="输入一个整数，输出每个数字对应的拼音。当整数为负数时，先输出fu字。十个数字对应的拼音如下："><a href="#输入一个整数，输出每个数字对应的拼音。当整数为负数时，先输出fu字。十个数字对应的拼音如下：" class="headerlink" title="输入一个整数，输出每个数字对应的拼音。当整数为负数时，先输出fu字。十个数字对应的拼音如下："></a>输入一个整数，输出每个数字对应的拼音。当整数为负数时，先输出fu字。十个数字对应的拼音如下：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0: ling</span><br><span class="line">1: yi</span><br><span class="line">2: er</span><br><span class="line">3: san</span><br><span class="line">4: si</span><br><span class="line">5: wu</span><br><span class="line">6: liu</span><br><span class="line">7: qi</span><br><span class="line">8: ba</span><br><span class="line">9: jiu</span><br></pre></td></tr></table></figure>

<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><h4 id="输入在一行中给出一个整数，如：1234。"><a href="#输入在一行中给出一个整数，如：1234。" class="headerlink" title="输入在一行中给出一个整数，如：1234。"></a>输入在一行中给出一个整数，如：1234。</h4><h4 id="提示：整数包括负数、零和正数。"><a href="#提示：整数包括负数、零和正数。" class="headerlink" title="提示：整数包括负数、零和正数。"></a>提示：整数包括负数、零和正数。</h4><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><h4 id="在一行中输出这个整数对应的拼音，每个数字的拼音之间用空格分开，行末没有最后的空格。如-yi-er-san-si。"><a href="#在一行中输出这个整数对应的拼音，每个数字的拼音之间用空格分开，行末没有最后的空格。如-yi-er-san-si。" class="headerlink" title="在一行中输出这个整数对应的拼音，每个数字的拼音之间用空格分开，行末没有最后的空格。如 yi er san si。"></a>在一行中输出这个整数对应的拼音，每个数字的拼音之间用空格分开，行末没有最后的空格。如 yi er san si。</h4><h3 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-600</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fu liu ling ling</span><br></pre></td></tr></table></figure>

<h4 id="个人理解-用字符串接收该数字，从下标0开始，直至字符串结束，逐个判断，打印输出，注意第一个字符，判断是否是负数。"><a href="#个人理解-用字符串接收该数字，从下标0开始，直至字符串结束，逐个判断，打印输出，注意第一个字符，判断是否是负数。" class="headerlink" title="个人理解:用字符串接收该数字，从下标0开始，直至字符串结束，逐个判断，打印输出，注意第一个字符，判断是否是负数。"></a>个人理解:用字符串接收该数字，从下标0开始，直至字符串结束，逐个判断，打印输出，注意第一个字符，判断是否是负数。</h4><p>##### </p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">char temp[105];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	cin&gt;&gt;temp;</span><br><span class="line">	int len=strlen(temp);</span><br><span class="line">	if(temp[0]==&apos;-&apos;)		//判断第一个字符，如果是负数，打印负号</span><br><span class="line">			cout&lt;&lt;&quot;fu&quot;; </span><br><span class="line">	for(int i=0;i&lt;len;i++)//逐个判断，包含第一个字符不是负号的情况</span><br><span class="line">	&#123;</span><br><span class="line">		if(temp[i]==&apos;0&apos;)</span><br><span class="line">			cout&lt;&lt;&quot;ling&quot;;</span><br><span class="line">		else if(temp[i]==&apos;1&apos;)</span><br><span class="line">			cout&lt;&lt;&quot;yi&quot;;</span><br><span class="line">		else if(temp[i]==&apos;2&apos;)</span><br><span class="line">			cout&lt;&lt;&quot;er&quot;;</span><br><span class="line">		else if(temp[i]==&apos;3&apos;)</span><br><span class="line">			cout&lt;&lt;&quot;san&quot;;</span><br><span class="line">		else if(temp[i]==&apos;4&apos;)</span><br><span class="line">			cout&lt;&lt;&quot;si&quot;;</span><br><span class="line">		else if(temp[i]==&apos;5&apos;)</span><br><span class="line">			cout&lt;&lt;&quot;wu&quot;;</span><br><span class="line">		else if(temp[i]==&apos;6&apos;)</span><br><span class="line">			cout&lt;&lt;&quot;liu&quot;;</span><br><span class="line">		else if(temp[i]==&apos;7&apos;)</span><br><span class="line">			cout&lt;&lt;&quot;qi&quot;;</span><br><span class="line">		else if(temp[i]==&apos;8&apos;)</span><br><span class="line">			cout&lt;&lt;&quot;ba&quot;;</span><br><span class="line">		else if(temp[i]==&apos;9&apos;)</span><br><span class="line">			cout&lt;&lt;&quot;jiu&quot;;</span><br><span class="line">		if(i==len-1)</span><br><span class="line">			cout&lt;&lt;endl; </span><br><span class="line">		else</span><br><span class="line">			cout&lt;&lt;&quot; &quot;;</span><br><span class="line">	&#125; </span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT--乙 1009 说反话</title>
    <url>/2020/02/01/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--PAT%20%E4%B9%99%201009%20%E8%AF%B4%E5%8F%8D%E8%AF%9D/</url>
    <content><![CDATA[<h2 id="1009-说反话-题解"><a href="#1009-说反话-题解" class="headerlink" title="1009 说反话(题解)"></a>1009 说反话(题解)</h2><h4 id="给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。"><a href="#给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。" class="headerlink" title="给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。"></a>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="测试输入包含一个测试用例，在一行内给出总长度不超过-80-的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用-1-个空格分开，输入保证句子末尾没有多余的空格。"><a href="#测试输入包含一个测试用例，在一行内给出总长度不超过-80-的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用-1-个空格分开，输入保证句子末尾没有多余的空格。" class="headerlink" title="测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。"></a>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="每个测试用例的输出占一行，输出倒序后的句子。"><a href="#每个测试用例的输出占一行，输出倒序后的句子。" class="headerlink" title="每个测试用例的输出占一行，输出倒序后的句子。"></a>每个测试用例的输出占一行，输出倒序后的句子。</h4><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello World Here I Come</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Come I Here World Hello</span><br></pre></td></tr></table></figure>

<h4 id="我的代码如下"><a href="#我的代码如下" class="headerlink" title="我的代码如下:"></a>我的代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char c[90];</span><br><span class="line">	gets(c);			//读入包含空格的字符串</span><br><span class="line">	int len=strlen(c);</span><br><span class="line">	int j=len-1,k;</span><br><span class="line">	while(j&gt;=0)</span><br><span class="line">	&#123;</span><br><span class="line">		for(k=j;k&gt;=0;k--)//从后往前判断第一个为空格的字符，并记录下标</span><br><span class="line">			if(c[k]==&apos; &apos;)</span><br><span class="line">				break;</span><br><span class="line">		for(int l=k+1;l&lt;=j;l++)//从空格下一个字符开始，从前往后，输出该单词。</span><br><span class="line">			printf(&quot;%c&quot;,c[l]);</span><br><span class="line">		if(k!=-1)				//末尾输出换行</span><br><span class="line">			printf(&quot; &quot;);		//否则输出一个单词，打印一个空格。</span><br><span class="line">		j=k-1;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码:"></a>参考代码:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char str[90];</span><br><span class="line">	gets(str);</span><br><span class="line">	int len=strlen(str),r=0,h=0;</span><br><span class="line">	char ans[90][90];		//ans[0]-ans[r]存放单词</span><br><span class="line">	for(int i=0;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(str[i]!=&apos; &apos;)</span><br><span class="line">		&#123;</span><br><span class="line">			ans[r][h++]=str[i];//如果不是空格，存放该字符</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;//如果是空格，该单词结束，r+1,h=0</span><br><span class="line">			ans[r][h]=&apos;\0&apos;;//末尾是结束符\0</span><br><span class="line">			r++;</span><br><span class="line">			h=0;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=r;i&gt;=0;i--)//倒着输出单词</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%s&quot;,ans[i]);</span><br><span class="line">		if(i&gt;0)</span><br><span class="line">			printf(&quot; &quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最简单的代码-需要用Ctrl-Z组合键告诉系统已经到了EOF"><a href="#最简单的代码-需要用Ctrl-Z组合键告诉系统已经到了EOF" class="headerlink" title="最简单的代码:(需要用Ctrl + Z组合键告诉系统已经到了EOF)"></a>最简单的代码:(需要用Ctrl + Z组合键告诉系统已经到了EOF)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char ans[90][90];</span><br><span class="line">	int num=0;</span><br><span class="line">	while(scanf(&quot;%s&quot;,ans[num])==1)</span><br><span class="line">	&#123;</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=num-1;i&gt;=0;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%s&quot;,ans[i]);</span><br><span class="line">		if(i&gt;0)</span><br><span class="line">			printf(&quot; &quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT 乙</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--进制转换(一)</title>
    <url>/2020/01/31/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2(%E4%B8%80)/</url>
    <content><![CDATA[<h3 id="1-又一版A-B"><a href="#1-又一版A-B" class="headerlink" title="1.又一版A+B"></a>1.又一版A+B</h3><h4 id="输入两个不超过整型定义的非负10进制整数A和B-lt-231-1-，输出A-B的m-1-lt-m-lt-10-进制数。"><a href="#输入两个不超过整型定义的非负10进制整数A和B-lt-231-1-，输出A-B的m-1-lt-m-lt-10-进制数。" class="headerlink" title="输入两个不超过整型定义的非负10进制整数A和B(&lt;=231-1)，输出A+B的m (1 &lt; m &lt;10)进制数。"></a>输入两个不超过整型定义的非负10进制整数A和B(&lt;=231-1)，输出A+B的m (1 &lt; m &lt;10)进制数。</h4><h4 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="测试输入包含若干测试用例。每个测试用例占一行，给出m和A，B的值。当m为0时输入结束。"><a href="#测试输入包含若干测试用例。每个测试用例占一行，给出m和A，B的值。当m为0时输入结束。" class="headerlink" title="测试输入包含若干测试用例。每个测试用例占一行，给出m和A，B的值。当m为0时输入结束。"></a>测试输入包含若干测试用例。每个测试用例占一行，给出m和A，B的值。当m为0时输入结束。</h5><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="每个测试用例的输出占一行，输出A-B的m进制数。"><a href="#每个测试用例的输出占一行，输出A-B的m进制数。" class="headerlink" title="每个测试用例的输出占一行，输出A+B的m进制数。"></a>每个测试用例的输出占一行，输出A+B的m进制数。</h5><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 4 5</span><br><span class="line">8 123 456</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1001</span><br><span class="line">1103</span><br></pre></td></tr></table></figure>

<h4 id="hint-注意输入的两个数相加后的结果可能会超过int和long的范围。"><a href="#hint-注意输入的两个数相加后的结果可能会超过int和long的范围。" class="headerlink" title="hint:注意输入的两个数相加后的结果可能会超过int和long的范围。"></a>hint:注意输入的两个数相加后的结果可能会超过int和long的范围。</h4><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><h4 id="1-题目为非负整数，0也可以，要用do-while循环。"><a href="#1-题目为非负整数，0也可以，要用do-while循环。" class="headerlink" title="(1)题目为非负整数，0也可以，要用do while循环。"></a>(1)题目为非负整数，0也可以，要用do while循环。</h4><h4 id="2-每个测试用例占一行-输出要及时换行。"><a href="#2-每个测试用例占一行-输出要及时换行。" class="headerlink" title="(2)每个测试用例占一行,输出要及时换行。"></a>(2)每个测试用例占一行,输出要及时换行。</h4><h4 id="3-最最最重要，WA50-搞了好久，在hint-a和b必须也是long-long型，否则超出范围"><a href="#3-最最最重要，WA50-搞了好久，在hint-a和b必须也是long-long型，否则超出范围" class="headerlink" title="(3)最最最重要，WA50%,搞了好久，在hint,a和b必须也是long long型，否则超出范围."></a>(3)最最最重要，WA50%,搞了好久，在hint,a和b必须也是long long型，否则超出范围.</h4><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int c[100];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	long long a,b;</span><br><span class="line">	int m;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;m) &amp;&amp; m)		//先输入m并判断是否等于0</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%lld%lld&quot;,&amp;a,&amp;b);</span><br><span class="line">		long long sum=a+b;</span><br><span class="line">		int count=0;</span><br><span class="line">		do&#123;</span><br><span class="line">			c[count++]=sum%m;</span><br><span class="line">			sum=sum/m;</span><br><span class="line">		&#125;while(sum&gt;0);</span><br><span class="line">		for(int i=count-1;i&gt;=0;i--)//逆序打印输出</span><br><span class="line">			printf(&quot;%d&quot;,c[i]);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-数制转换"><a href="#2-数制转换" class="headerlink" title="2.数制转换"></a>2.数制转换</h3><h4 id="求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。"><a href="#求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。" class="headerlink" title="求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。"></a>求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。</h4><h4 id="输入信息-1"><a href="#输入信息-1" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入只有一行，包含三个整数a，n，b。a表示其后的n-是a进制整数，b表示欲将a进制整数n转换成b进制整数。a，b是十进制整数，2-lt-a，b-lt-16。"><a href="#输入只有一行，包含三个整数a，n，b。a表示其后的n-是a进制整数，b表示欲将a进制整数n转换成b进制整数。a，b是十进制整数，2-lt-a，b-lt-16。" class="headerlink" title="输入只有一行，包含三个整数a，n，b。a表示其后的n 是a进制整数，b表示欲将a进制整数n转换成b进制整数。a，b是十进制整数，2 =&lt; a，b &lt;= 16。"></a>输入只有一行，包含三个整数a，n，b。a表示其后的n 是a进制整数，b表示欲将a进制整数n转换成b进制整数。a，b是十进制整数，2 =&lt; a，b &lt;= 16。</h5><h4 id="输出信息-1"><a href="#输出信息-1" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="可能有多组测试数据，对于每组数据，输出包含一行，该行有一个整数为转换后的b进制数。输出时字母符号全部用大写表示，即（0，1，…，9，A，B，…，F）。"><a href="#可能有多组测试数据，对于每组数据，输出包含一行，该行有一个整数为转换后的b进制数。输出时字母符号全部用大写表示，即（0，1，…，9，A，B，…，F）。" class="headerlink" title="可能有多组测试数据，对于每组数据，输出包含一行，该行有一个整数为转换后的b进制数。输出时字母符号全部用大写表示，即（0，1，…，9，A，B，…，F）。"></a>可能有多组测试数据，对于每组数据，输出包含一行，该行有一个整数为转换后的b进制数。输出时字母符号全部用大写表示，即（0，1，…，9，A，B，…，F）。</h5><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 123 10</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">27</span><br></pre></td></tr></table></figure>

<h4 id="思路-将要转换的数字通过字符串输入，转换为10进制数，10进制数再进行转换，存储在字符串中，逆序输出。"><a href="#思路-将要转换的数字通过字符串输入，转换为10进制数，10进制数再进行转换，存储在字符串中，逆序输出。" class="headerlink" title="思路:将要转换的数字通过字符串输入，转换为10进制数，10进制数再进行转换，存储在字符串中，逆序输出。"></a>思路:将要转换的数字通过字符串输入，转换为10进制数，10进制数再进行转换，存储在字符串中，逆序输出。</h4><h4 id="注意-输入可以是大小写的a-输出则统一为大写，WA50-。"><a href="#注意-输入可以是大小写的a-输出则统一为大写，WA50-。" class="headerlink" title="注意:输入可以是大小写的a,输出则统一为大写，WA50%。"></a>注意:输入可以是大小写的a,输出则统一为大写，WA50%。</h4><h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[50],b[50];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,m;</span><br><span class="line">	while(scanf(&quot;%d%s%d&quot;,&amp;n,a,&amp;m)==3)</span><br><span class="line">	&#123;</span><br><span class="line">		int l=strlen(a),temp=1;</span><br><span class="line">		long long sum=0;</span><br><span class="line">		for(int i=l-1;i&gt;=0;i--)		//从低位开始循环</span><br><span class="line">		&#123;</span><br><span class="line">			if(a[i]&gt;=&apos;A&apos;&amp;&amp;a[i]&lt;=&apos;F&apos;)//若该字符为A-F,转换为10-15的数字</span><br><span class="line">				sum+=(a[i]-&apos;7&apos;)*temp;</span><br><span class="line">			if(a[i]&gt;=&apos;a&apos;&amp;&amp;a[i]&lt;=&apos;F&apos;)//若该字符为a-f,转换为10-15的数字</span><br><span class="line">				sum+=(a[i]-&apos;A&apos;-22)*temp;</span><br><span class="line">			if(a[i]&gt;=&apos;0&apos;&amp;&amp;a[i]&lt;=&apos;9&apos;)//若该字符为0-0,转换为0-9的数字</span><br><span class="line">				sum+=(a[i]-&apos;0&apos;)*temp;//该数字与对应的权重相乘累加求和</span><br><span class="line">			temp*=n;//计算每位数上的权重</span><br><span class="line">		&#125;</span><br><span class="line">		int count=0;</span><br><span class="line">		do&#123;</span><br><span class="line">			if(sum%m&gt;=10)		//如果取余的数字大于10,转换为A-F的字符</span><br><span class="line">			 	b[count++]=(sum%m)+&apos;7&apos;;</span><br><span class="line">			else				//否则转换为0-9字符</span><br><span class="line">				b[count++]=(sum%m)+&apos;0&apos;;</span><br><span class="line">			sum=sum/m;</span><br><span class="line">		&#125;while(sum&gt;0);</span><br><span class="line">		for(int i=count-1;i&gt;=0;i--)//逆序打印输出</span><br><span class="line">		    printf(&quot;%c&quot;,b[i]);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-进制转换"><a href="#3-进制转换" class="headerlink" title="3.进制转换"></a>3.进制转换</h3><h4 id="将一个长度最多为30位数字的十进制非负整数转换为二进制数输出。"><a href="#将一个长度最多为30位数字的十进制非负整数转换为二进制数输出。" class="headerlink" title="将一个长度最多为30位数字的十进制非负整数转换为二进制数输出。"></a>将一个长度最多为30位数字的十进制非负整数转换为二进制数输出。</h4><h4 id="输入信息-2"><a href="#输入信息-2" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="多组数据，每行为一个长度不超过30位的十进制非负整数。-注意是10进制数字的个数可能有30个，而非30bits的整数）"><a href="#多组数据，每行为一个长度不超过30位的十进制非负整数。-注意是10进制数字的个数可能有30个，而非30bits的整数）" class="headerlink" title="多组数据，每行为一个长度不超过30位的十进制非负整数。(注意是10进制数字的个数可能有30个，而非30bits的整数）"></a>多组数据，每行为一个长度不超过30位的十进制非负整数。(注意是10进制数字的个数可能有30个，而非30bits的整数）</h5><h4 id="输出信息-2"><a href="#输出信息-2" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="每行输出对应的二进制数。"><a href="#每行输出对应的二进制数。" class="headerlink" title="每行输出对应的二进制数。"></a>每行输出对应的二进制数。</h5><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">985</span><br><span class="line">211</span><br><span class="line">1126</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1111011001</span><br><span class="line">11010011</span><br><span class="line">10001100110</span><br></pre></td></tr></table></figure>

<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h4><h5 id="1-多组输入输出"><a href="#1-多组输入输出" class="headerlink" title="(1)多组输入输出"></a>(1)多组输入输出</h5><h5 id="2-起初想用long-long-型存储，题目要求30位，long-long最多20位，用字符数组接收"><a href="#2-起初想用long-long-型存储，题目要求30位，long-long最多20位，用字符数组接收" class="headerlink" title="(2)起初想用long long 型存储，题目要求30位，long long最多20位，用字符数组接收"></a>(2)起初想用long long 型存储，题目要求30位，long long最多20位，用字符数组接收</h5><h5 id="3-保存二进制数的数组，要大一些，我开辟了50的空间，一直报RE50-的错误。"><a href="#3-保存二进制数的数组，要大一些，我开辟了50的空间，一直报RE50-的错误。" class="headerlink" title="(3)保存二进制数的数组，要大一些，我开辟了50的空间，一直报RE50%的错误。"></a>(3)保存二进制数的数组，要大一些，我开辟了50的空间，一直报RE50%的错误。</h5><h4 id="思路-用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。"><a href="#思路-用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。" class="headerlink" title="思路:用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。"></a>思路:用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。</h4><h4 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char a[35];</span><br><span class="line">	while(scanf(&quot;%s&quot;,a)==1)</span><br><span class="line">	&#123;</span><br><span class="line">		int len=strlen(a);</span><br><span class="line">		int b[35]=&#123;0&#125;;</span><br><span class="line">		for(int i=0;i&lt;len;i++)//从高位开始，将每个字符转换为对应的数字</span><br><span class="line">			b[i]=a[i]-&apos;0&apos;;</span><br><span class="line">		int k=0,num=0;</span><br><span class="line">		int z[100]=&#123;0&#125;;		//存储进制数的数组，空间要开辟的足够大</span><br><span class="line">		while(k&lt;len)</span><br><span class="line">		&#123;</span><br><span class="line">			int q=0;</span><br><span class="line">			z[num++]=(b[len-1])%2;//从最后一位开始逐步取余</span><br><span class="line">			for(int j=k;j&lt;len;j++)//将原数除以二并存储</span><br><span class="line">			&#123;</span><br><span class="line">				int temp=b[j];</span><br><span class="line">				b[j]=(b[j]+q)/2;//从最高位开始，如果是偶数，可以除尽，q=0;如果是奇数，会余1给下一位，下一位加10之后再进行除法运算。</span><br><span class="line">				if(temp%2)</span><br><span class="line">					q=10;</span><br><span class="line">				else</span><br><span class="line">					q=0;</span><br><span class="line">			&#125;</span><br><span class="line">			if(b[k]==0)</span><br><span class="line">				k++;</span><br><span class="line">		&#125;</span><br><span class="line">		for(int i=num-1;i&gt;=0;i--)</span><br><span class="line">			printf(&quot;%d&quot;,z[i]);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-八进制"><a href="#4-八进制" class="headerlink" title="4.八进制"></a>4.八进制</h3><h4 id="输入一个整数，将其转换成八进制数输出。"><a href="#输入一个整数，将其转换成八进制数输出。" class="headerlink" title="输入一个整数，将其转换成八进制数输出。"></a>输入一个整数，将其转换成八进制数输出。</h4><h4 id="输入信息-3"><a href="#输入信息-3" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入包括一个整数N-0-lt-N-lt-100000-。"><a href="#输入包括一个整数N-0-lt-N-lt-100000-。" class="headerlink" title="输入包括一个整数N(0&lt;=N&lt;=100000)。"></a>输入包括一个整数N(0&lt;=N&lt;=100000)。</h5><h4 id="输出信息-3"><a href="#输出信息-3" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="可能有多组测试数据，对于每组数据，"><a href="#可能有多组测试数据，对于每组数据，" class="headerlink" title="可能有多组测试数据，对于每组数据，"></a>可能有多组测试数据，对于每组数据，</h5><h5 id="输出N的八进制表示数。"><a href="#输出N的八进制表示数。" class="headerlink" title="输出N的八进制表示数。"></a>输出N的八进制表示数。</h5><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">8</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line">10</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="代码如下-3"><a href="#代码如下-3" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int a[10005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;N)==1)</span><br><span class="line">	&#123;</span><br><span class="line">		int count=0;</span><br><span class="line">		do&#123;					//do while循环,包括N=0的情况。</span><br><span class="line">			a[count++]=N%8;</span><br><span class="line">			N=N/8;</span><br><span class="line">		&#125;while(N&gt;0);</span><br><span class="line">		for(int i=count-1;i&gt;=0;i--)</span><br><span class="line">			printf(&quot;%d&quot;,a[i]);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT--乙 1022 D进制的A+B</title>
    <url>/2020/01/30/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--PAT%20%E4%B9%99%201022%20D%E8%BF%9B%E5%88%B6%E7%9A%84A+B/</url>
    <content><![CDATA[<h2 id="1022-D进制的A-B"><a href="#1022-D进制的A-B" class="headerlink" title="1022  D进制的A+B"></a>1022  D进制的A+B</h2><h4 id="输入两个非负-10-进制整数-A-和-B-≤2exp30-1-，输出-A-B-的-D-1-lt-D≤10-进制数。"><a href="#输入两个非负-10-进制整数-A-和-B-≤2exp30-1-，输出-A-B-的-D-1-lt-D≤10-进制数。" class="headerlink" title="输入两个非负 10 进制整数 A 和 B (≤2exp30-1)，输出 A+B 的 D (1&lt;D≤10)进制数。"></a>输入两个非负 10 进制整数 A 和 B (≤2exp30-1)，输出 A+B 的 D (1&lt;D≤10)进制数。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入在一行中依次给出-3-个整数-A、B-和-D。"><a href="#输入在一行中依次给出-3-个整数-A、B-和-D。" class="headerlink" title="输入在一行中依次给出 3 个整数 A、B 和 D。"></a>输入在一行中依次给出 3 个整数 A、B 和 D。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="输出-A-B-的-D-进制数。"><a href="#输出-A-B-的-D-进制数。" class="headerlink" title="输出 A+B 的 D 进制数。"></a>输出 A+B 的 D 进制数。</h4><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1123 456 8</span><br></pre></td></tr></table></figure>

<h3 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1103</span><br></pre></td></tr></table></figure>

<p>代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int temp[32];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a,b,d,count=0;</span><br><span class="line">	scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;d);</span><br><span class="line">	int sum=a+b;</span><br><span class="line">	do&#123;</span><br><span class="line">		temp[count++]=sum%d;			//记录整除后的余数</span><br><span class="line">		sum=sum/d;</span><br><span class="line">	&#125;while(sum&gt;0);</span><br><span class="line">	for(int i=count-1;i&gt;=0;i--)			//逆序输出</span><br><span class="line">		printf(&quot;%d&quot;,temp[i]);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="初始代码如下，有一个样例过不去，后来想了想是sum-0时，while循环不执行，不输出。换do-while循环，先执行一次，再判断。"><a href="#初始代码如下，有一个样例过不去，后来想了想是sum-0时，while循环不执行，不输出。换do-while循环，先执行一次，再判断。" class="headerlink" title="初始代码如下，有一个样例过不去，后来想了想是sum=0时，while循环不执行，不输出。换do while循环，先执行一次，再判断。"></a>初始代码如下，有一个样例过不去，后来想了想是sum=0时，while循环不执行，不输出。换do while循环，先执行一次，再判断。</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int temp[32];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a,b,d,count=0;;</span><br><span class="line">	scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;d);</span><br><span class="line">	int sum=a+b;</span><br><span class="line">	while(sum&gt;0)&#123;</span><br><span class="line">		temp[count]=sum%d;</span><br><span class="line">		sum=sum/d;</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=count-1;i&gt;=0;i--)</span><br><span class="line">		printf(&quot;%d&quot;,temp[i]);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT 乙</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--日期处理</title>
    <url>/2020/01/29/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="1-日期差值"><a href="#1-日期差值" class="headerlink" title="1.日期差值"></a>1.日期差值</h3><h4 id="有两个日期，求两个日期之间的天数，如果两个日期是连续的我们规定他们之间的天数为两天。"><a href="#有两个日期，求两个日期之间的天数，如果两个日期是连续的我们规定他们之间的天数为两天。" class="headerlink" title="有两个日期，求两个日期之间的天数，如果两个日期是连续的我们规定他们之间的天数为两天。"></a>有两个日期，求两个日期之间的天数，如果两个日期是连续的我们规定他们之间的天数为两天。</h4><h4 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="有多组数据，每组数据有两行，分别表示两个日期，形式为YYYYMMDD"><a href="#有多组数据，每组数据有两行，分别表示两个日期，形式为YYYYMMDD" class="headerlink" title="有多组数据，每组数据有两行，分别表示两个日期，形式为YYYYMMDD"></a>有多组数据，每组数据有两行，分别表示两个日期，形式为YYYYMMDD</h5><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="每组数据输出一行，即日期差值"><a href="#每组数据输出一行，即日期差值" class="headerlink" title="每组数据输出一行，即日期差值"></a>每组数据输出一行，即日期差值</h5><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20130101</span><br><span class="line">20130105</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;	</span><br><span class="line">int month[13][2]=&#123;&#123;0,0&#125;,&#123;31,31&#125;,&#123;28,29&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;&#125;;//用数组存储1-12月的天数</span><br><span class="line">bool Isleap(int year)				//判断是否是闰年</span><br><span class="line">&#123;</span><br><span class="line">	return ((year%4==0&amp;&amp;year%100!=0)||(year%400==0)); </span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,m;</span><br><span class="line">	while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m)==2)</span><br><span class="line">	&#123;</span><br><span class="line">		if(n&gt;m)						//如果n大于m,则交换两个日期值</span><br><span class="line">		&#123;</span><br><span class="line">			int temp=n;</span><br><span class="line">			n=m;</span><br><span class="line">			m=temp;</span><br><span class="line">		&#125;</span><br><span class="line">		int year1,year2,month1,month2,day1,day2;//分别求出两个日期对应的年月日</span><br><span class="line">		long long days=1;			//统计天数要用long long型</span><br><span class="line">		year1=n/10000;</span><br><span class="line">		month1=n/100%100;</span><br><span class="line">		day1=n%100;</span><br><span class="line">		year2=m/10000;</span><br><span class="line">		month2=m/100%100;</span><br><span class="line">		day2=m%100;</span><br><span class="line">		while(year1&lt;year2||month1&lt;month2||day1&lt;day2)//从日期n一直加到日期m，统计天数</span><br><span class="line">		&#123;</span><br><span class="line">			day1++;</span><br><span class="line">			if(day1==month[month1][Isleap(year1)]+1)</span><br><span class="line">			&#123;</span><br><span class="line">				month1++;</span><br><span class="line">				day1=1;</span><br><span class="line">			&#125;</span><br><span class="line">			if(month1==13)</span><br><span class="line">			&#123;</span><br><span class="line">				year1++;</span><br><span class="line">				month1=1;</span><br><span class="line">			&#125; </span><br><span class="line">			days++;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;%lld\n&quot;,days);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-打印日期"><a href="#2-打印日期" class="headerlink" title="2.打印日期"></a>2.打印日期</h3><h4 id="给出年分m和一年中的第n天，算出第n天是几月几号。"><a href="#给出年分m和一年中的第n天，算出第n天是几月几号。" class="headerlink" title="给出年分m和一年中的第n天，算出第n天是几月几号。"></a>给出年分m和一年中的第n天，算出第n天是几月几号。</h4><h4 id="输入信息-1"><a href="#输入信息-1" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入包括两个整数y-1-lt-y-lt-3000-，n-1-lt-n-lt-366-。"><a href="#输入包括两个整数y-1-lt-y-lt-3000-，n-1-lt-n-lt-366-。" class="headerlink" title="输入包括两个整数y(1&lt;=y&lt;=3000)，n(1&lt;=n&lt;=366)。"></a>输入包括两个整数y(1&lt;=y&lt;=3000)，n(1&lt;=n&lt;=366)。</h5><h4 id="输出信息-1"><a href="#输出信息-1" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="可能有多组测试数据，对于每组数据，按-yyyy-mm-dd的格式将输入中对应的日期打印出来。"><a href="#可能有多组测试数据，对于每组数据，按-yyyy-mm-dd的格式将输入中对应的日期打印出来。" class="headerlink" title="可能有多组测试数据，对于每组数据，按 yyyy-mm-dd的格式将输入中对应的日期打印出来。"></a>可能有多组测试数据，对于每组数据，按 yyyy-mm-dd的格式将输入中对应的日期打印出来。</h5><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013 60</span><br><span class="line">2012 300</span><br><span class="line">2011 350</span><br><span class="line">2000 211</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013-03-01</span><br><span class="line">2012-10-26</span><br><span class="line">2011-12-16</span><br><span class="line">2000-07-29</span><br></pre></td></tr></table></figure>

<h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int month[13][2]=&#123;&#123;0,0&#125;,&#123;31,31&#125;,&#123;28,29&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;&#125;;//用数组存储1-12月的天数</span><br><span class="line">bool Isleap(int year)			//判断是否是闰年</span><br><span class="line">&#123;</span><br><span class="line">	return (year%4==0&amp;&amp;year%100!=0)||(year%400==0);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int y,n,m,d;</span><br><span class="line">	while((scanf(&quot;%d%d&quot;,&amp;y,&amp;n))==2)&#123;</span><br><span class="line">		int days=0,yy=Isleap(y);</span><br><span class="line">		for(int i=1;i&lt;13;i++)&#123;</span><br><span class="line">			days+=month[i][yy];</span><br><span class="line">				if(days&gt;=n)&#123;</span><br><span class="line">					m=i;			//记录第一个days大于n,i即为月份，days-该月份总天数与n的差值即为日。 </span><br><span class="line">					d=n-(days-month[i][yy]);</span><br><span class="line">					break;</span><br><span class="line">				&#125;		</span><br><span class="line">			&#125;</span><br><span class="line">		printf(&quot;%04d-%02d-%02d\n&quot;,y,m,d);//该题的一个坑，注意输出格式，年占四位，月日占两位，注意补零，WA50%</span><br><span class="line">	&#125;	</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-日期类"><a href="#3-日期类" class="headerlink" title="3.日期类"></a>3.日期类</h3><h4 id="编写一个日期类，要求按xxxx-xx-xx-的格式输出日期，实现加一天的操作。"><a href="#编写一个日期类，要求按xxxx-xx-xx-的格式输出日期，实现加一天的操作。" class="headerlink" title="编写一个日期类，要求按xxxx-xx-xx 的格式输出日期，实现加一天的操作。"></a>编写一个日期类，要求按xxxx-xx-xx 的格式输出日期，实现加一天的操作。</h4><h4 id="输入信息-2"><a href="#输入信息-2" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入第一行表示测试用例的个数m，接下来m行每行有3个用空格隔开的整数，分别表示年月日。测试数据不会有闰年。"><a href="#输入第一行表示测试用例的个数m，接下来m行每行有3个用空格隔开的整数，分别表示年月日。测试数据不会有闰年。" class="headerlink" title="输入第一行表示测试用例的个数m，接下来m行每行有3个用空格隔开的整数，分别表示年月日。测试数据不会有闰年。"></a>输入第一行表示测试用例的个数m，接下来m行每行有3个用空格隔开的整数，分别表示年月日。测试数据不会有闰年。</h5><h4 id="输出信息-2"><a href="#输出信息-2" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出m行。按xxxx-xx-xx的格式输出，表示输入日期的后一天的日期。"><a href="#输出m行。按xxxx-xx-xx的格式输出，表示输入日期的后一天的日期。" class="headerlink" title="输出m行。按xxxx-xx-xx的格式输出，表示输入日期的后一天的日期。"></a>输出m行。按xxxx-xx-xx的格式输出，表示输入日期的后一天的日期。</h5><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">1999 10 20</span><br><span class="line">2001 1 31</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1999-10-21</span><br><span class="line">2001-02-01</span><br></pre></td></tr></table></figure>

<h4 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int year[13]=&#123;0,31,28,31,30,31,30,31,31,30,31,30,31&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,y,m,d;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	while(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%d%d%d&quot;,&amp;y,&amp;m,&amp;d);</span><br><span class="line">		d++;</span><br><span class="line">		if(d==year[m]+1)//天数加1后超出该月天数</span><br><span class="line">		&#123;</span><br><span class="line">			m++;</span><br><span class="line">			d=1;</span><br><span class="line">		&#125;</span><br><span class="line">		if(m==13)//天数加1后，引起月份完全等于13，年份加1.</span><br><span class="line">		&#123;</span><br><span class="line">			y++;</span><br><span class="line">			m=1;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;%04d-%02d-%02d\n&quot;,y,m,d);//注意输出格式。</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-日期累加"><a href="#4-日期累加" class="headerlink" title="4.日期累加"></a>4.日期累加</h3><h4 id="设计一个程序能计算一个日期加上若干天后是什么日期。"><a href="#设计一个程序能计算一个日期加上若干天后是什么日期。" class="headerlink" title="设计一个程序能计算一个日期加上若干天后是什么日期。"></a>设计一个程序能计算一个日期加上若干天后是什么日期。</h4><h4 id="输入信息-3"><a href="#输入信息-3" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入第一行表示样例个数m，接下来m行每行四个整数分别表示年月日和累加的天数。"><a href="#输入第一行表示样例个数m，接下来m行每行四个整数分别表示年月日和累加的天数。" class="headerlink" title="输入第一行表示样例个数m，接下来m行每行四个整数分别表示年月日和累加的天数。"></a>输入第一行表示样例个数m，接下来m行每行四个整数分别表示年月日和累加的天数。</h5><h4 id="输出信息-3"><a href="#输出信息-3" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出m行，每行按yyyy-mm-dd的个数输出。"><a href="#输出m行，每行按yyyy-mm-dd的个数输出。" class="headerlink" title="输出m行，每行按yyyy-mm-dd的个数输出。"></a>输出m行，每行按yyyy-mm-dd的个数输出。</h5><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2008 2 3 100</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2008-05-13</span><br></pre></td></tr></table></figure>

<h4 id="代码如下-3"><a href="#代码如下-3" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int month[13][2]=&#123;&#123;0,0&#125;,&#123;31,31&#125;,&#123;28,29&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;&#125;;</span><br><span class="line">bool Isleap(int year)</span><br><span class="line">&#123;</span><br><span class="line">	return ((year%4==0&amp;&amp;year%100!=0)||(year%400==0));</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,y,m,d,count;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	while(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%d%d%d%d&quot;,&amp;y,&amp;m,&amp;d,&amp;count);</span><br><span class="line">		while(count--)				//该题为3的变式，累加count次即可</span><br><span class="line">		&#123;</span><br><span class="line">			d++;</span><br><span class="line">			if(d==month[m][Isleap(y)]+1)</span><br><span class="line">			&#123;</span><br><span class="line">				m++;</span><br><span class="line">				d=1;</span><br><span class="line">			&#125;</span><br><span class="line">			if(m==13)</span><br><span class="line">			&#123;</span><br><span class="line">				y++;</span><br><span class="line">				m=1;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;%04d-%02d-%02d\n&quot;,y,m,d);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-日期计算"><a href="#5-日期计算" class="headerlink" title="5.日期计算"></a>5.日期计算</h3><h4 id="已知2011年11月11日是星期五，问YYYY年MM月DD日是星期几？注意考虑闰年的情况。尤其是逢百年不闰，逢400年闰的情况。"><a href="#已知2011年11月11日是星期五，问YYYY年MM月DD日是星期几？注意考虑闰年的情况。尤其是逢百年不闰，逢400年闰的情况。" class="headerlink" title="已知2011年11月11日是星期五，问YYYY年MM月DD日是星期几？注意考虑闰年的情况。尤其是逢百年不闰，逢400年闰的情况。"></a>已知2011年11月11日是星期五，问YYYY年MM月DD日是星期几？注意考虑闰年的情况。尤其是逢百年不闰，逢400年闰的情况。</h4><h4 id="输入信息-4"><a href="#输入信息-4" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入只有一行"><a href="#输入只有一行" class="headerlink" title="输入只有一行"></a>输入只有一行</h5><h5 id="YYYY-MM-DD"><a href="#YYYY-MM-DD" class="headerlink" title="YYYY MM DD"></a>YYYY MM DD</h5><h4 id="输出信息-4"><a href="#输出信息-4" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出只有一行"><a href="#输出只有一行" class="headerlink" title="输出只有一行"></a>输出只有一行</h5><h5 id="W"><a href="#W" class="headerlink" title="W"></a>W</h5><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2011 11 11</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="代码如下-4"><a href="#代码如下-4" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int month[13][2]=&#123;&#123;0,0&#125;,&#123;31,31&#125;,&#123;28,29&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;&#125;;</span><br><span class="line">bool Isleap(int year)</span><br><span class="line">&#123;</span><br><span class="line">	return ((year%4==0&amp;&amp;year%100!=0)||(year%400==0));</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int date1=20111111,date2,y1=2011,m1=11,d1=11,y,m,d;</span><br><span class="line">	long long count=0;</span><br><span class="line">	scanf(&quot;%d%d%d&quot;,&amp;y,&amp;m,&amp;d);</span><br><span class="line">	date2=y*10000+m*100+d;</span><br><span class="line">	if(date2&lt;date1)//如果输入的日期比20111111小的话，进行交换，始终保持date2&gt;date1,才可计算两个日期的差值。</span><br><span class="line">	&#123;</span><br><span class="line">		y1=y;</span><br><span class="line">		m1=m;</span><br><span class="line">		d1=d;</span><br><span class="line">		y=2011;</span><br><span class="line">		m=11;</span><br><span class="line">		d=11;</span><br><span class="line">	&#125;	</span><br><span class="line">	while(d1&lt;d||m1&lt;m||y1&lt;y)</span><br><span class="line">	&#123;</span><br><span class="line">		d1++;</span><br><span class="line">		if(d1==month[m1][Isleap(y1)]+1)</span><br><span class="line">		&#123;</span><br><span class="line">			m1++;</span><br><span class="line">			d1=1;</span><br><span class="line">		&#125;</span><br><span class="line">		if(m1==13)</span><br><span class="line">		&#123;</span><br><span class="line">			y1++;</span><br><span class="line">			m1=1;</span><br><span class="line">		&#125;</span><br><span class="line">		count++;				//对两个日期的差值进行计数。</span><br><span class="line">	&#125;</span><br><span class="line">	int week;</span><br><span class="line">	if(date2&gt;=date1)//若输入的数大于20111111,从星期五开始，加上差值模7就可</span><br><span class="line">		week=(count+5)%7;</span><br><span class="line">	else//否则从星期五开始减。</span><br><span class="line">		week=(7-(count+2)%7);</span><br><span class="line">	if(week==0)//若week==0,为星期日，输出7。</span><br><span class="line">		week=7;</span><br><span class="line">	printf(&quot;%d&quot;,week);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT--乙 1036 跟奥巴马一起编程</title>
    <url>/2020/01/27/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--PAT%20%E4%B9%99%201036%20%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1036-跟奥巴马一起编程-题解"><a href="#1036-跟奥巴马一起编程-题解" class="headerlink" title="1036  跟奥巴马一起编程(题解)"></a>1036  跟奥巴马一起编程(题解)</h2><h4 id="美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014-年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！"><a href="#美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014-年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！" class="headerlink" title="美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！"></a>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入在一行中给出正方形边长-N（3≤N≤20）和组成正方形边的某种字符-C，间隔一个空格。"><a href="#输入在一行中给出正方形边长-N（3≤N≤20）和组成正方形边的某种字符-C，间隔一个空格。" class="headerlink" title="输入在一行中给出正方形边长 N（3≤N≤20）和组成正方形边的某种字符 C，间隔一个空格。"></a>输入在一行中给出正方形边长 N（3≤N≤20）和组成正方形边的某种字符 C，间隔一个空格。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="输出由给定字符-C-画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的-50-（四舍五入取整）。"><a href="#输出由给定字符-C-画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的-50-（四舍五入取整）。" class="headerlink" title="输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。"></a>输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。</h4><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 a</span><br></pre></td></tr></table></figure>

<h3 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure>

<p>代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">char A[25][25];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N,M;</span><br><span class="line">	char c;</span><br><span class="line">	scanf(&quot;%d %c&quot;,&amp;N,&amp;c);</span><br><span class="line">	N%2==0?M=N/2:M=N/2+1;//实际的行数，由题可知列数为奇数，行数为N/2+1,否则为N/2</span><br><span class="line">	for(int i=0;i&lt;N;i++)//将上下两行赋值为字符c，包括左右边界</span><br><span class="line">	&#123;</span><br><span class="line">		A[0][i]=c;</span><br><span class="line">		A[M-1][i]=c;</span><br><span class="line">	&#125;	</span><br><span class="line">	for(int i=1;i&lt;=M-2;i++)//将左右两列字符c，不包括上下两行</span><br><span class="line">	&#123;</span><br><span class="line">		A[i][N-1]=c;</span><br><span class="line">		A[i][0]=c;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=0;i&lt;M;i++)//打印M行，将赋值过的打印，没赋值过的打印空格，char数组作为全局变量初始化，每个元素被初始化为&apos;\0&apos;,!A[i][j]?&apos; &apos;:c也是正确的</span><br><span class="line">	&#123;</span><br><span class="line">		for(int j=0;j&lt;N;j++)</span><br><span class="line">			printf(&quot;%c&quot;,A[i][j]==&apos;\0&apos;?&apos; &apos;:c);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT 乙</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--算法练习工具之代码对拍</title>
    <url>/2020/01/25/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%AF%B9%E6%8B%8D/</url>
    <content><![CDATA[<h3 id="我们在练习算法时，很多时候可以将自己的代码跟网上提供的标准代码比对，既可以学习别人的写法，另外也可以找出自己代码存在的问题，方便调试。对拍就是一种很好的调试代码的方式。用正确的代码找出使错误代码出错的数据，或者用效率低的正确代码验证效率高的代码的正确性"><a href="#我们在练习算法时，很多时候可以将自己的代码跟网上提供的标准代码比对，既可以学习别人的写法，另外也可以找出自己代码存在的问题，方便调试。对拍就是一种很好的调试代码的方式。用正确的代码找出使错误代码出错的数据，或者用效率低的正确代码验证效率高的代码的正确性" class="headerlink" title="我们在练习算法时，很多时候可以将自己的代码跟网上提供的标准代码比对，既可以学习别人的写法，另外也可以找出自己代码存在的问题，方便调试。对拍就是一种很好的调试代码的方式。用正确的代码找出使错误代码出错的数据，或者用效率低的正确代码验证效率高的代码的正确性"></a>我们在练习算法时，很多时候可以将自己的代码跟网上提供的标准代码比对，既可以学习别人的写法，另外也可以找出自己代码存在的问题，方便调试。对拍就是一种很好的调试代码的方式。用正确的代码找出使错误代码出错的数据，或者用效率低的正确代码验证效率高的代码的正确性</h3><h3 id="对拍总共需要四份代码"><a href="#对拍总共需要四份代码" class="headerlink" title="对拍总共需要四份代码"></a>对拍总共需要四份代码</h3><h4 id="1-自己的代码-my-cpp"><a href="#1-自己的代码-my-cpp" class="headerlink" title="1.自己的代码 my.cpp"></a>1.自己的代码 my.cpp</h4><h4 id="2-正确的代码-correct-cpp"><a href="#2-正确的代码-correct-cpp" class="headerlink" title="2.正确的代码  correct.cpp"></a>2.正确的代码  correct.cpp</h4><h4 id="3-数据生成器-data-cpp"><a href="#3-数据生成器-data-cpp" class="headerlink" title="3.数据生成器 data.cpp"></a>3.数据生成器 data.cpp</h4><h4 id="4-比较器-checker-cpp"><a href="#4-比较器-checker-cpp" class="headerlink" title="4.比较器 checker.cpp"></a>4.比较器 checker.cpp</h4><h3 id="我们看一个例子"><a href="#我们看一个例子" class="headerlink" title="我们看一个例子:"></a>我们看一个例子:</h3><h4 id="美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014-年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！"><a href="#美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014-年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！" class="headerlink" title="美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！"></a>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入在一行中给出正方形边长-N（3≤N≤20）和组成正方形边的某种字符-C，间隔一个空格。"><a href="#输入在一行中给出正方形边长-N（3≤N≤20）和组成正方形边的某种字符-C，间隔一个空格。" class="headerlink" title="输入在一行中给出正方形边长 N（3≤N≤20）和组成正方形边的某种字符 C，间隔一个空格。"></a>输入在一行中给出正方形边长 N（3≤N≤20）和组成正方形边的某种字符 C，间隔一个空格。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="输出由给定字符-C-画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的-50-（四舍五入取整）。"><a href="#输出由给定字符-C-画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的-50-（四舍五入取整）。" class="headerlink" title="输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。"></a>输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。</h4><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 a</span><br></pre></td></tr></table></figure>

<h3 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure>

<h4 id="1-首先写出自己的代码"><a href="#1-首先写出自己的代码" class="headerlink" title="(1)首先写出自己的代码:"></a>(1)首先写出自己的代码:</h4><h5 id="在自己的代码主函数加入下面代码"><a href="#在自己的代码主函数加入下面代码" class="headerlink" title="在自己的代码主函数加入下面代码:"></a>在自己的代码主函数加入下面代码:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">freopen(&quot;in.in&quot;,&quot;r&quot;,stdin);				//从in.in文件中读数据</span><br><span class="line">freopen(&quot;out1.out&quot;,&quot;w&quot;,stdout);			//将结果输出到out1.out文件中</span><br></pre></td></tr></table></figure>

<h4 id="my-cpp如下"><a href="#my-cpp如下" class="headerlink" title="my.cpp如下:"></a>my.cpp如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">char A[25][25];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	freopen(&quot;in.in&quot;,&quot;r&quot;,stdin);							</span><br><span class="line">	freopen(&quot;out1.out&quot;,&quot;w&quot;,stdout);</span><br><span class="line">	int N,M;</span><br><span class="line">	char c;</span><br><span class="line">	scanf(&quot;%d %c&quot;,&amp;N,&amp;c);</span><br><span class="line">	N%2==0?M=N/2:M=N/2+1;</span><br><span class="line">	for(int i=0;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		A[0][i]=c;</span><br><span class="line">		A[M-1][i]=c;</span><br><span class="line">	&#125;	</span><br><span class="line">	for(int i=1;i&lt;=M-2;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		A[i][N-1]=c;</span><br><span class="line">		A[i][0]=c;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=0;i&lt;M;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		for(int j=0;j&lt;N;j++)</span><br><span class="line">			printf(&quot;%c&quot;,A[i][j]==&apos;\0&apos;?&apos; &apos;:c);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-找一份可以AC的代码"><a href="#2-找一份可以AC的代码" class="headerlink" title="(2)找一份可以AC的代码:"></a>(2)找一份可以AC的代码:</h4><h5 id="在代码主函数加入下面代码"><a href="#在代码主函数加入下面代码" class="headerlink" title="在代码主函数加入下面代码:"></a>在代码主函数加入下面代码:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">freopen(&quot;in.in&quot;,&quot;r&quot;,stdin);			//从in.in文件中读数据</span><br><span class="line">freopen(&quot;out2.out&quot;,&quot;w&quot;,stdou        //将结果输出到out2.out文件中</span><br></pre></td></tr></table></figure>

<h4 id="correct-cpp如下"><a href="#correct-cpp如下" class="headerlink" title="correct.cpp如下:"></a>correct.cpp如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	freopen(&quot;in.in&quot;,&quot;r&quot;,stdin);</span><br><span class="line">	freopen(&quot;out2.out&quot;,&quot;w&quot;,stdout);</span><br><span class="line">	int N; string c;</span><br><span class="line">	cin &gt;&gt; N&gt;&gt;c;</span><br><span class="line">	int rows;</span><br><span class="line">	if (N % 2 == 0)</span><br><span class="line">		rows = N / 2;</span><br><span class="line">	else</span><br><span class="line">		rows = N / 2 + 1;</span><br><span class="line">	for (int i = 0; i &lt; rows; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if (i == 0 || i == rows - 1)</span><br><span class="line">		&#123;</span><br><span class="line">			for (int j = 0; j &lt; N; j++)</span><br><span class="line">				cout &lt;&lt; c;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			for (int j = 0; j &lt; N; j++)</span><br><span class="line">				if (j == 0 || j == N - 1)</span><br><span class="line">					cout &lt;&lt; c;</span><br><span class="line">				else</span><br><span class="line">					cout &lt;&lt; &quot; &quot;;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-制作数据生成器"><a href="#3-制作数据生成器" class="headerlink" title="(3)制作数据生成器:"></a>(3)制作数据生成器:</h4><h4 id="data-cpp如下"><a href="#data-cpp如下" class="headerlink" title="data.cpp如下:"></a>data.cpp如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;ctime&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstdlib&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	freopen(&quot;in.in&quot;,&quot;w&quot;,stdout);</span><br><span class="line">	srand(time(0));//用当前时间来设定rand函数所用的随机数产生演算法的种子值。</span><br><span class="line">	int n=rand()%20+3;//产生一个3-23的数 </span><br><span class="line">	int m=rand()%60+40;//产生一个40-100的数 用来产生ASCII码为40-100的字符</span><br><span class="line">	printf(&quot;%d %c\n&quot;,n,(char)(m));</span><br><span class="line">	return 0;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-制作比较器"><a href="#4-制作比较器" class="headerlink" title="(4)制作比较器:"></a>(4)制作比较器:</h3><h4 id="checker-cpp如下"><a href="#checker-cpp如下" class="headerlink" title="checker.cpp如下:"></a>checker.cpp如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;cstdlib&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	while(1)&#123;</span><br><span class="line">		system(&quot;data.exe&quot;);</span><br><span class="line">		system(&quot;my.exe&quot;);</span><br><span class="line">		system(&quot;correct.exe&quot;);</span><br><span class="line">		if(system(&quot;fc out1.out out2.out&quot;))&#123;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-将四个代码保存在同一目录下。"><a href="#1-将四个代码保存在同一目录下。" class="headerlink" title="(1)将四个代码保存在同一目录下。"></a>(1)将四个代码保存在同一目录下。</h4><h4 id="2-先分别运行my-cpp和correct-cpp生成out1-out文件和out2-out文件及对应的exe文件。"><a href="#2-先分别运行my-cpp和correct-cpp生成out1-out文件和out2-out文件及对应的exe文件。" class="headerlink" title="(2)先分别运行my.cpp和correct.cpp生成out1.out文件和out2.out文件及对应的exe文件。"></a>(2)先分别运行my.cpp和correct.cpp生成out1.out文件和out2.out文件及对应的exe文件。</h4><h4 id="3-运行data-cpp生成in-in文件"><a href="#3-运行data-cpp生成in-in文件" class="headerlink" title="(3)运行data.cpp生成in.in文件"></a>(3)运行data.cpp生成in.in文件</h4><h4 id="4-运行check-cpp进行比较"><a href="#4-运行check-cpp进行比较" class="headerlink" title="(4)运行check.cpp进行比较"></a>(4)运行check.cpp进行比较</h4><h4 id="两文件的输出不同程序就会停止，可以去in-in文件中找到出错的测试数据，一般1-2秒就可检查出错误。"><a href="#两文件的输出不同程序就会停止，可以去in-in文件中找到出错的测试数据，一般1-2秒就可检查出错误。" class="headerlink" title="两文件的输出不同程序就会停止，可以去in.in文件中找到出错的测试数据，一般1-2秒就可检查出错误。"></a>两文件的输出不同程序就会停止，可以去in.in文件中找到出错的测试数据，一般1-2秒就可检查出错误。</h4><h4 id="下图为正在运行中的程序，且未出现错误"><a href="#下图为正在运行中的程序，且未出现错误" class="headerlink" title="下图为正在运行中的程序，且未出现错误"></a>下图为正在运行中的程序，且未出现错误</h4><p><img src="http://p.haituie.com/628034/%E6%8D%95%E8%8E%B7_132257276562747500.PNG" alt="图"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--查找学生信息(踩坑)</title>
    <url>/2020/01/23/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E6%9F%A5%E6%89%BE%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF(%E8%B8%A9%E5%9D%91)/</url>
    <content><![CDATA[<h1 id="踩坑第一次-记录一下"><a href="#踩坑第一次-记录一下" class="headerlink" title="踩坑第一次(记录一下)"></a>踩坑第一次(记录一下)</h1><h3 id="输入N个学生的信息，然后进行查询。"><a href="#输入N个学生的信息，然后进行查询。" class="headerlink" title="输入N个学生的信息，然后进行查询。"></a>输入N个学生的信息，然后进行查询。</h3><h3 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h3><h4 id="输入的第一行为N，即学生的个数-N-lt-1000"><a href="#输入的第一行为N，即学生的个数-N-lt-1000" class="headerlink" title="输入的第一行为N，即学生的个数(N&lt;=1000)"></a>输入的第一行为N，即学生的个数(N&lt;=1000)</h4><h4 id="接下来的N行包括N个学生的信息，信息格式如下："><a href="#接下来的N行包括N个学生的信息，信息格式如下：" class="headerlink" title="接下来的N行包括N个学生的信息，信息格式如下："></a>接下来的N行包括N个学生的信息，信息格式如下：</h4><h4 id="01-李江-男-21"><a href="#01-李江-男-21" class="headerlink" title="01 李江 男 21"></a>01 李江 男 21</h4><h4 id="02-刘唐-男-23"><a href="#02-刘唐-男-23" class="headerlink" title="02 刘唐 男 23"></a>02 刘唐 男 23</h4><h4 id="03-张军-男-19"><a href="#03-张军-男-19" class="headerlink" title="03 张军 男 19"></a>03 张军 男 19</h4><h4 id="04-王娜-女-19"><a href="#04-王娜-女-19" class="headerlink" title="04 王娜 女 19"></a>04 王娜 女 19</h4><h4 id="然后输入一个M-M-lt-10000-接下来会有M行，代表M次查询，每行输入一个学号，格式如下："><a href="#然后输入一个M-M-lt-10000-接下来会有M行，代表M次查询，每行输入一个学号，格式如下：" class="headerlink" title="然后输入一个M(M&lt;=10000),接下来会有M行，代表M次查询，每行输入一个学号，格式如下："></a>然后输入一个M(M&lt;=10000),接下来会有M行，代表M次查询，每行输入一个学号，格式如下：</h4><h4 id="02"><a href="#02" class="headerlink" title="02"></a>02</h4><h4 id="03"><a href="#03" class="headerlink" title="03"></a>03</h4><h4 id="01"><a href="#01" class="headerlink" title="01"></a>01</h4><h4 id="04"><a href="#04" class="headerlink" title="04"></a>04</h4><h3 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h3><h4 id="输出M行，每行包括一个对应于查询的学生的信息。"><a href="#输出M行，每行包括一个对应于查询的学生的信息。" class="headerlink" title="输出M行，每行包括一个对应于查询的学生的信息。"></a>输出M行，每行包括一个对应于查询的学生的信息。</h4><h4 id="如果没有对应的学生信息，则输出“No-Answer-”"><a href="#如果没有对应的学生信息，则输出“No-Answer-”" class="headerlink" title="如果没有对应的学生信息，则输出“No Answer!”"></a>如果没有对应的学生信息，则输出“No Answer!”</h4><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">001 张三 男 19</span><br><span class="line">002 李四 男 20</span><br><span class="line">003 王五 男 18</span><br><span class="line">004 赵六 女 17</span><br><span class="line">005 刘七 女 21</span><br><span class="line">7</span><br><span class="line">003</span><br><span class="line">002</span><br><span class="line">005</span><br><span class="line">004</span><br><span class="line">003</span><br><span class="line">001</span><br><span class="line">006</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">003 王五 男 18</span><br><span class="line">002 李四 男 20</span><br><span class="line">005 刘七 女 21</span><br><span class="line">004 赵六 女 17</span><br><span class="line">003 王五 男 18</span><br><span class="line">001 张三 男 19</span><br><span class="line">No Answer!</span><br></pre></td></tr></table></figure>

<h3 id="踩坑一"><a href="#踩坑一" class="headerlink" title="踩坑一:"></a>踩坑一:</h3><h4 id="学号用整型存储，提交错误90-，仔细看了看，如果学号以0开头，用整型输出会忽略学号前面的零，然后直接输出。为何不在输出的时候多输出两个零呢？哈哈，一提交错误75-，又想了想，万一前面有4个零，5个零呢，为何不用字符数组呢，成了，终于学号输出解决了。"><a href="#学号用整型存储，提交错误90-，仔细看了看，如果学号以0开头，用整型输出会忽略学号前面的零，然后直接输出。为何不在输出的时候多输出两个零呢？哈哈，一提交错误75-，又想了想，万一前面有4个零，5个零呢，为何不用字符数组呢，成了，终于学号输出解决了。" class="headerlink" title="学号用整型存储，提交错误90%，仔细看了看，如果学号以0开头，用整型输出会忽略学号前面的零，然后直接输出。为何不在输出的时候多输出两个零呢？哈哈，一提交错误75%，又想了想，万一前面有4个零，5个零呢，为何不用字符数组呢，成了，终于学号输出解决了。"></a>学号用整型存储，提交错误90%，仔细看了看，如果学号以0开头，用整型输出会忽略学号前面的零，然后直接输出。为何不在输出的时候多输出两个零呢？哈哈，一提交错误75%，又想了想，万一前面有4个零，5个零呢，为何不用字符数组呢，成了，终于学号输出解决了。</h4><h3 id="踩坑二"><a href="#踩坑二" class="headerlink" title="踩坑二:"></a>踩坑二:</h3><h4 id="提交错误50-折腾了两天，还是没想出来，看了看大佬的博客，-原博客链接-，大佬遇到了相同的问题，也是错了50-，name-sex-num数组长度超过40，我服了，谁的名字有这么长，这题真的太坑了。"><a href="#提交错误50-折腾了两天，还是没想出来，看了看大佬的博客，-原博客链接-，大佬遇到了相同的问题，也是错了50-，name-sex-num数组长度超过40，我服了，谁的名字有这么长，这题真的太坑了。" class="headerlink" title="提交错误50%折腾了两天，还是没想出来，看了看大佬的博客， 原博客链接 ，大佬遇到了相同的问题，也是错了50%，name,sex,num数组长度超过40，我服了，谁的名字有这么长，这题真的太坑了。"></a>提交错误50%折腾了两天，还是没想出来，看了看大佬的博客， <a href="https://blog.csdn.net/a845717607/article/details/78983943" target="_blank" rel="noopener">原博客链接</a> ，大佬遇到了相同的问题，也是错了50%，name,sex,num数组长度超过40，我服了，谁的名字有这么长，这题真的太坑了。</h4><h3 id="踩坑三"><a href="#踩坑三" class="headerlink" title="踩坑三:"></a>踩坑三:</h3><h4 id="本以为这题足够坑了，结果提交还是错误50-，我心态崩了，想了好久，试一试多组输入，结果AC-这题真的坑，多组输入题目一点不涉及。"><a href="#本以为这题足够坑了，结果提交还是错误50-，我心态崩了，想了好久，试一试多组输入，结果AC-这题真的坑，多组输入题目一点不涉及。" class="headerlink" title="本以为这题足够坑了，结果提交还是错误50%，我心态崩了，想了好久，试一试多组输入，结果AC,这题真的坑，多组输入题目一点不涉及。"></a>本以为这题足够坑了，结果提交还是错误50%，我心态崩了，想了好久，试一试多组输入，结果AC,这题真的坑，多组输入题目一点不涉及。</h4><h3 id="总结-以后在不超出题目内存范围的条件下，把数组等开的足够大。"><a href="#总结-以后在不超出题目内存范围的条件下，把数组等开的足够大。" class="headerlink" title="总结:以后在不超出题目内存范围的条件下，把数组等开的足够大。"></a>总结:以后在不超出题目内存范围的条件下，把数组等开的足够大。</h3><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">	char num[100];</span><br><span class="line">	char name[100];</span><br><span class="line">	char sex[100];</span><br><span class="line">	int age;</span><br><span class="line">&#125;;</span><br><span class="line">student stu[1010];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,m,j;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;n)==1)</span><br><span class="line">    &#123;</span><br><span class="line">	    for(int i=0;i&lt;n;i++)</span><br><span class="line">			scanf(&quot;%s %s %s %d&quot;,stu[i].num,stu[i].name,stu[i].sex,&amp;stu[i].age);</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">		char c[100];</span><br><span class="line">		for(int i=0;i&lt;m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			scanf(&quot;%s&quot;,c);</span><br><span class="line">			for(j=0;j&lt;n;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				if(strcmp(c,stu[j].num)==0)</span><br><span class="line">				&#123;</span><br><span class="line">					printf(&quot;%s %s %s %d\n&quot;,stu[j].num,stu[j].name,stu[j].sex,stu[j].age);</span><br><span class="line">					break;</span><br><span class="line">				&#125;	</span><br><span class="line">			&#125;</span><br><span class="line">			if(j&gt;=n)</span><br><span class="line">				printf(&quot;No Answer!\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--输出GPLT (规律)</title>
    <url>/2020/01/22/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E8%BE%93%E5%87%BAGPLT%20(%E8%A7%84%E5%BE%8B)/</url>
    <content><![CDATA[<h3 id="输出GPLT-该题与-字串是连续的-类似"><a href="#输出GPLT-该题与-字串是连续的-类似" class="headerlink" title="输出GPLT(该题与 字串是连续的 类似)"></a>输出GPLT(该题与 字串是连续的 类似)</h3><h4 id="给定一个长度不超过10000的、仅由英文字母构成的字符串。请将字符重新调整顺序，按GPLTGPLT…-这样的顺序输出，并忽略其它字符。当然，四种字符（不区分大小写）的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按GPLT的顺序打印，直到所有字符都被输出。"><a href="#给定一个长度不超过10000的、仅由英文字母构成的字符串。请将字符重新调整顺序，按GPLTGPLT…-这样的顺序输出，并忽略其它字符。当然，四种字符（不区分大小写）的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按GPLT的顺序打印，直到所有字符都被输出。" class="headerlink" title="给定一个长度不超过10000的、仅由英文字母构成的字符串。请将字符重新调整顺序，按GPLTGPLT….这样的顺序输出，并忽略其它字符。当然，四种字符（不区分大小写）的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按GPLT的顺序打印，直到所有字符都被输出。"></a>给定一个长度不超过10000的、仅由英文字母构成的字符串。请将字符重新调整顺序，按GPLTGPLT….这样的顺序输出，并忽略其它字符。当然，四种字符（不区分大小写）的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按GPLT的顺序打印，直到所有字符都被输出。</h4><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><h4 id="输入在一行中给出一个长度不超过10000的、仅由英文字母构成的非空字符串。"><a href="#输入在一行中给出一个长度不超过10000的、仅由英文字母构成的非空字符串。" class="headerlink" title="输入在一行中给出一个长度不超过10000的、仅由英文字母构成的非空字符串。"></a>输入在一行中给出一个长度不超过10000的、仅由英文字母构成的非空字符串。</h4><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><h4 id="在一行中按题目要求输出排序后的字符串。题目保证输出非空。"><a href="#在一行中按题目要求输出排序后的字符串。题目保证输出非空。" class="headerlink" title="在一行中按题目要求输出排序后的字符串。题目保证输出非空。"></a>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</h4><h3 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pcTclnGloRgLrtLhgljkLhGFauPewSKgt</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GPLTGPLTGLTGLGLL</span><br></pre></td></tr></table></figure>

<h4 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解:"></a>个人理解:</h4><h5 id="原本以为该题很复杂，后来想了想，分别统计出G-P-L-T-四个字符的个数，然后个数大于0的话，输出该字符就可以了。"><a href="#原本以为该题很复杂，后来想了想，分别统计出G-P-L-T-四个字符的个数，然后个数大于0的话，输出该字符就可以了。" class="headerlink" title="原本以为该题很复杂，后来想了想，分别统计出G,P,L,T,四个字符的个数，然后个数大于0的话，输出该字符就可以了。"></a>原本以为该题很复杂，后来想了想，分别统计出G,P,L,T,四个字符的个数，然后个数大于0的话，输出该字符就可以了。</h5><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[10005];</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	cin&gt;&gt;a;</span><br><span class="line">	int len=strlen(a),b[5]=&#123;0,0,0,0&#125;,max=0;</span><br><span class="line">	char c[4]=&#123;&apos;G&apos;,&apos;P&apos;,&apos;L&apos;,&apos;T&apos;&#125;;</span><br><span class="line">	for(int i=0;i&lt;len;i++)	//分别统计G,P,L,T四个字符的数量，不区分大小写</span><br><span class="line">	&#123;</span><br><span class="line">		if(a[i]==&apos;g&apos;||a[i]==&apos;G&apos;)</span><br><span class="line">			b[0]++;</span><br><span class="line">		if(a[i]==&apos;p&apos;||a[i]==&apos;P&apos;)</span><br><span class="line">			b[1]++;</span><br><span class="line">		if(a[i]==&apos;l&apos;||a[i]==&apos;L&apos;)</span><br><span class="line">			b[2]++;</span><br><span class="line">		if(a[i]==&apos;t&apos;||a[i]==&apos;T&apos;)</span><br><span class="line">			b[3]++;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=0;i&lt;4;i++)	//找出数量最大的字符，并记录其数量</span><br><span class="line">		if(b[i]&gt;=max)</span><br><span class="line">			max=b[i];</span><br><span class="line">	while(max--)			//输出</span><br><span class="line">	&#123;</span><br><span class="line">		for(int i=0;i&lt;4;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(b[i]&gt;0)</span><br><span class="line">			&#123;</span><br><span class="line">				cout&lt;&lt;c[i];</span><br><span class="line">				b[i]--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--子串是连续的(规律)</title>
    <url>/2020/01/21/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E5%AD%90%E4%B8%B2%E6%98%AF%E8%BF%9E%E7%BB%AD%E7%9A%84(%E8%A7%84%E5%BE%8B)/</url>
    <content><![CDATA[<h3 id="子串是连续的"><a href="#子串是连续的" class="headerlink" title="子串是连续的"></a>子串是连续的</h3><h4 id="小明最喜欢的字符串是616"><a href="#小明最喜欢的字符串是616" class="headerlink" title="小明最喜欢的字符串是616."></a>小明最喜欢的字符串是616.</h4><h4 id="他得到了一个纯数字的字符串S-他想知道在可以任意打乱S顺序的情况下，最多有多少个怒同的子串为616"><a href="#他得到了一个纯数字的字符串S-他想知道在可以任意打乱S顺序的情况下，最多有多少个怒同的子串为616" class="headerlink" title="他得到了一个纯数字的字符串S,他想知道在可以任意打乱S顺序的情况下，最多有多少个怒同的子串为616."></a>他得到了一个纯数字的字符串S,他想知道在可以任意打乱S顺序的情况下，最多有多少个怒同的子串为616.</h4><h4 id="当两个子串S-l1…r1-S-l2…r2-满足l1不等于l2或r1不等于r2时认为它们是不同的"><a href="#当两个子串S-l1…r1-S-l2…r2-满足l1不等于l2或r1不等于r2时认为它们是不同的" class="headerlink" title="当两个子串S[l1…r1],S[l2…r2]满足l1不等于l2或r1不等于r2时认为它们是不同的"></a>当两个子串S[l1…r1],S[l2…r2]满足l1不等于l2或r1不等于r2时认为它们是不同的</h4><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><h4 id="第一行，一个正整数s-表示s的长度"><a href="#第一行，一个正整数s-表示s的长度" class="headerlink" title="第一行，一个正整数s,表示s的长度"></a>第一行，一个正整数s,表示s的长度</h4><h4 id="第二行，一个字符串s-其字符集为-0-1-2-3-4-5-6-7-8-9-。"><a href="#第二行，一个字符串s-其字符集为-0-1-2-3-4-5-6-7-8-9-。" class="headerlink" title="第二行，一个字符串s,其字符集为{0,1,2,3,4,5,6,7,8,9}。"></a>第二行，一个字符串s,其字符集为{0,1,2,3,4,5,6,7,8,9}。</h4><h4 id="保证1-lt-s-lt-200000。"><a href="#保证1-lt-s-lt-200000。" class="headerlink" title="保证1&lt;=|s|&lt;=200000。"></a>保证1&lt;=|s|&lt;=200000。</h4><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><h4 id="输出一行，一个整数表示答案。"><a href="#输出一行，一个整数表示答案。" class="headerlink" title="输出一行，一个整数表示答案。"></a>输出一行，一个整数表示答案。</h4><h3 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line">11451419266</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h4 id="一种最优打乱方案为”11451492616”，有一个子串为”616”。"><a href="#一种最优打乱方案为”11451492616”，有一个子串为”616”。" class="headerlink" title="一种最优打乱方案为”11451492616”，有一个子串为”616”。"></a>一种最优打乱方案为”11451492616”，有一个子串为”616”。</h4><h4 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解:"></a>个人理解:</h4><h5 id="最初理解为组合数-例如11116666，有四个1-6有六种组合，答案有4种，实际为排序之后为616-16-16-1-三种组合，则说明第一组有两个6，一个1-之后每一组一个1一个6"><a href="#最初理解为组合数-例如11116666，有四个1-6有六种组合，答案有4种，实际为排序之后为616-16-16-1-三种组合，则说明第一组有两个6，一个1-之后每一组一个1一个6" class="headerlink" title="最初理解为组合数,例如11116666，有四个1,6有六种组合，答案有4种，实际为排序之后为616 16 16 1 三种组合，则说明第一组有两个6，一个1,之后每一组一个1一个6."></a>最初理解为组合数,例如11116666，有四个1,6有六种组合，答案有4种，实际为排序之后为616 16 16 1 三种组合，则说明第一组有两个6，一个1,之后每一组一个1一个6.</h5><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,c1=0,c6=0,count,sum=0;</span><br><span class="line">	char c;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	getchar();</span><br><span class="line">	for(int i=0;i&lt;n;i++)	//分别记录6和1的个数</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%c&quot;,&amp;c);</span><br><span class="line">		if(c==&apos;6&apos;)</span><br><span class="line">			c6++;      </span><br><span class="line">		if(c==&apos;1&apos;)</span><br><span class="line">			c1++;</span><br><span class="line">	&#125;</span><br><span class="line">	c6=c6-1;			//减去一个6之后，相当于每组为1和6两个数</span><br><span class="line">	count=c1&gt;=c6?c6:c1; //对1和6的个数进行判断,小的即为所求</span><br><span class="line">	printf(&quot;%d&quot;,count);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛-—训练 考试 比赛</title>
    <url>/2020/01/18/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E8%AE%AD%E7%BB%83%20%E8%80%83%E8%AF%95%20%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<h3 id="1-常见赛制"><a href="#1-常见赛制" class="headerlink" title="1.常见赛制"></a>1.常见赛制</h3><p><img src="http://p.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132256381415247500.PNG" alt="图片"></p>
<h3 id="2-训练"><a href="#2-训练" class="headerlink" title="2.训练"></a>2.训练</h3><h2 id="c语言网"><a href="#c语言网" class="headerlink" title="c语言网"></a><a href="https://www.dotcpp.com/" target="_blank" rel="noopener">c语言网</a></h2><h2 id="codeup"><a href="#codeup" class="headerlink" title="codeup"></a><a href="http://codeup.cn/contest.php" target="_blank" rel="noopener">codeup</a></h2><h2 id="牛客"><a href="#牛客" class="headerlink" title="牛客"></a><a href="https://ac.nowcoder.com/acm/contest/vip-index?&headNav=www" target="_blank" rel="noopener">牛客</a></h2><h2 id="计蒜客"><a href="#计蒜客" class="headerlink" title="计蒜客"></a><a href="https://www.jisuanke.com/" target="_blank" rel="noopener">计蒜客</a></h2><h2 id="AcWing"><a href="#AcWing" class="headerlink" title="AcWing"></a><a href="https://www.acwing.com/problem/" target="_blank" rel="noopener">AcWing</a></h2><h2 id="力扣"><a href="#力扣" class="headerlink" title="力扣"></a><a href="https://leetcode-cn.com/problemset/all/" target="_blank" rel="noopener">力扣</a></h2><h2 id="洛谷"><a href="#洛谷" class="headerlink" title="洛谷"></a><a href="https://www.luogu.com.cn/" target="_blank" rel="noopener">洛谷</a></h2><h3 id="3-考试认证"><a href="#3-考试认证" class="headerlink" title="3.考试认证"></a>3.考试认证</h3><h4 id="（1）csp"><a href="#（1）csp" class="headerlink" title="（1）csp"></a>（1）csp</h4><h5 id="CCF计算机软件能力认证（简称CCF-CSP认证）是CCF计算机职业资格认证系列中最早启动的一项认证。该项认证重点考察软件开发者实际编程能力，由中国计算机学会统一命题、统一评测，委托各地设立的考试机构进行认证考试。该项认证每年大约3、9、12月各举办一次"><a href="#CCF计算机软件能力认证（简称CCF-CSP认证）是CCF计算机职业资格认证系列中最早启动的一项认证。该项认证重点考察软件开发者实际编程能力，由中国计算机学会统一命题、统一评测，委托各地设立的考试机构进行认证考试。该项认证每年大约3、9、12月各举办一次" class="headerlink" title="CCF计算机软件能力认证（简称CCF CSP认证）是CCF计算机职业资格认证系列中最早启动的一项认证。该项认证重点考察软件开发者实际编程能力，由中国计算机学会统一命题、统一评测，委托各地设立的考试机构进行认证考试。该项认证每年大约3、9、12月各举办一次."></a>CCF计算机软件能力认证（简称CCF CSP认证）是CCF计算机职业资格认证系列中最早启动的一项认证。该项认证重点考察软件开发者实际编程能力，由中国计算机学会统一命题、统一评测，委托各地设立的考试机构进行认证考试。该项认证每年大约3、9、12月各举办一次.</h5><h5 id="CCF会员报名费180元（CCF会员50元一年），非CCF会员报名费300元。开一年学生会员（50元一年）能报三次（一年举办三次考试），每次都能享受优惠（180元一次），如果只报一次，那开会员算下来也是能优惠70元的（开会员-180-50-230元，不开会员报一次等于300元）。注意：如果单纯地为了获取优惠，请选择学生会员，因为专业会员开通费用要比学生会员高。"><a href="#CCF会员报名费180元（CCF会员50元一年），非CCF会员报名费300元。开一年学生会员（50元一年）能报三次（一年举办三次考试），每次都能享受优惠（180元一次），如果只报一次，那开会员算下来也是能优惠70元的（开会员-180-50-230元，不开会员报一次等于300元）。注意：如果单纯地为了获取优惠，请选择学生会员，因为专业会员开通费用要比学生会员高。" class="headerlink" title="CCF会员报名费180元（CCF会员50元一年），非CCF会员报名费300元。开一年学生会员（50元一年）能报三次（一年举办三次考试），每次都能享受优惠（180元一次），如果只报一次，那开会员算下来也是能优惠70元的（开会员=180+50=230元，不开会员报一次等于300元）。注意：如果单纯地为了获取优惠，请选择学生会员，因为专业会员开通费用要比学生会员高。"></a>CCF会员报名费180元（CCF会员50元一年），非CCF会员报名费300元。开一年学生会员（50元一年）能报三次（一年举办三次考试），每次都能享受优惠（180元一次），如果只报一次，那开会员算下来也是能优惠70元的（开会员=180+50=230元，不开会员报一次等于300元）。注意：如果单纯地为了获取优惠，请选择学生会员，因为专业会员开通费用要比学生会员高。</h5><h5 id="每次认证的开始报名时间不太规律，但通常在当次认证日期3天前截止报名。"><a href="#每次认证的开始报名时间不太规律，但通常在当次认证日期3天前截止报名。" class="headerlink" title="每次认证的开始报名时间不太规律，但通常在当次认证日期3天前截止报名。"></a>每次认证的开始报名时间不太规律，但通常在当次认证日期3天前截止报名。</h5><h5 id="认证考试全部采用上机编程方式，可供报考编程语言为C-C-、Java或Python，考生报名时需选择报考语言，考试时只得使用报名时的语言参加认证。考核为黑盒测试，以通过测试用例判断程序是否能够输出正确结果来进行评分。考试时间为240分钟。考生允许携带不限量纸质资料在认证过程中翻阅，但不得在认证过程中连接互联网或电子存储设备，不得在考试结束后使用电子存储设备拷贝自己作答的答案"><a href="#认证考试全部采用上机编程方式，可供报考编程语言为C-C-、Java或Python，考生报名时需选择报考语言，考试时只得使用报名时的语言参加认证。考核为黑盒测试，以通过测试用例判断程序是否能够输出正确结果来进行评分。考试时间为240分钟。考生允许携带不限量纸质资料在认证过程中翻阅，但不得在认证过程中连接互联网或电子存储设备，不得在考试结束后使用电子存储设备拷贝自己作答的答案" class="headerlink" title="认证考试全部采用上机编程方式，可供报考编程语言为C/C++、Java或Python，考生报名时需选择报考语言，考试时只得使用报名时的语言参加认证。考核为黑盒测试，以通过测试用例判断程序是否能够输出正确结果来进行评分。考试时间为240分钟。考生允许携带不限量纸质资料在认证过程中翻阅，但不得在认证过程中连接互联网或电子存储设备，不得在考试结束后使用电子存储设备拷贝自己作答的答案."></a>认证考试全部采用上机编程方式，可供报考编程语言为C/C++、Java或Python，考生报名时需选择报考语言，考试时只得使用报名时的语言参加认证。考核为黑盒测试，以通过测试用例判断程序是否能够输出正确结果来进行评分。考试时间为240分钟。考生允许携带不限量纸质资料在认证过程中翻阅，但不得在认证过程中连接互联网或电子存储设备，不得在考试结束后使用电子存储设备拷贝自己作答的答案.</h5><h5 id="每次认证共设5道编程题，难度依次递增。每道编程题设若干个测试用例，每题满分100分，认证满分500分。每通过一个测试用例可获得该测试用例对应的分数。认证以考试过程中最后一次提交的程序的运行结果进行评分，认证过程中不实时回显得分。"><a href="#每次认证共设5道编程题，难度依次递增。每道编程题设若干个测试用例，每题满分100分，认证满分500分。每通过一个测试用例可获得该测试用例对应的分数。认证以考试过程中最后一次提交的程序的运行结果进行评分，认证过程中不实时回显得分。" class="headerlink" title="每次认证共设5道编程题，难度依次递增。每道编程题设若干个测试用例，每题满分100分，认证满分500分。每通过一个测试用例可获得该测试用例对应的分数。认证以考试过程中最后一次提交的程序的运行结果进行评分，认证过程中不实时回显得分。"></a>每次认证共设5道编程题，难度依次递增。每道编程题设若干个测试用例，每题满分100分，认证满分500分。每通过一个测试用例可获得该测试用例对应的分数。认证以考试过程中最后一次提交的程序的运行结果进行评分，认证过程中不实时回显得分。</h5><h4 id="2-pat"><a href="#2-pat" class="headerlink" title="(2) pat"></a>(2) pat</h4><h5 id="浙江大学计算机程序设计能力考试（Programming-Ability-Test，简称PAT）是由浙江大学计算机科学与技术学院组织的统一考试。旨在培养和展现学生分析问题、解决问题和计算机程序设计的能力，科学评价计算机程序设计人才，并为企业选拔人才提供参考标准。"><a href="#浙江大学计算机程序设计能力考试（Programming-Ability-Test，简称PAT）是由浙江大学计算机科学与技术学院组织的统一考试。旨在培养和展现学生分析问题、解决问题和计算机程序设计的能力，科学评价计算机程序设计人才，并为企业选拔人才提供参考标准。" class="headerlink" title="浙江大学计算机程序设计能力考试（Programming Ability Test，简称PAT）是由浙江大学计算机科学与技术学院组织的统一考试。旨在培养和展现学生分析问题、解决问题和计算机程序设计的能力，科学评价计算机程序设计人才，并为企业选拔人才提供参考标准。"></a>浙江大学计算机程序设计能力考试（Programming Ability Test，简称PAT）是由浙江大学计算机科学与技术学院组织的统一考试。旨在培养和展现学生分析问题、解决问题和计算机程序设计的能力，科学评价计算机程序设计人才，并为企业选拔人才提供参考标准。</h5><h5 id="每年分春、秋、冬季组织3次统一考试，考试时间根据场地可用的具体时间而定，大约分别在2-3月、8-9月、11-12月举行。"><a href="#每年分春、秋、冬季组织3次统一考试，考试时间根据场地可用的具体时间而定，大约分别在2-3月、8-9月、11-12月举行。" class="headerlink" title="每年分春、秋、冬季组织3次统一考试，考试时间根据场地可用的具体时间而定，大约分别在2-3月、8-9月、11-12月举行。"></a>每年分春、秋、冬季组织3次统一考试，考试时间根据场地可用的具体时间而定，大约分别在2-3月、8-9月、11-12月举行。</h5><h5 id="每场考试分两个不同的难度级别：甲级-Advanced-Level-、乙级-Basic-Level-。两级别的考试在同一考场、同时举行。-正式考试为3小时、闭卷、上机编程测试。考生只可携带铅笔或水笔进入考场。考试成绩实时可查，证书立等可取。考试结束1小时后，考生即可在考场外指定地点领取证书，报名费用300元。"><a href="#每场考试分两个不同的难度级别：甲级-Advanced-Level-、乙级-Basic-Level-。两级别的考试在同一考场、同时举行。-正式考试为3小时、闭卷、上机编程测试。考生只可携带铅笔或水笔进入考场。考试成绩实时可查，证书立等可取。考试结束1小时后，考生即可在考场外指定地点领取证书，报名费用300元。" class="headerlink" title="每场考试分两个不同的难度级别：甲级(Advanced Level)、乙级(Basic Level)。两级别的考试在同一考场、同时举行。 正式考试为3小时、闭卷、上机编程测试。考生只可携带铅笔或水笔进入考场。考试成绩实时可查，证书立等可取。考试结束1小时后，考生即可在考场外指定地点领取证书，报名费用300元。"></a>每场考试分两个不同的难度级别：甲级(Advanced Level)、乙级(Basic Level)。两级别的考试在同一考场、同时举行。 正式考试为3小时、闭卷、上机编程测试。考生只可携带铅笔或水笔进入考场。考试成绩实时可查，证书立等可取。考试结束1小时后，考生即可在考场外指定地点领取证书，报名费用300元。</h5><h5 id="甲级考试一般出4题，题目描述语言为英文；乙级考试一般出5题，题目描述语言为中文。每题要求考生按照严格的输入输出要求提交程序解决问题。程序须经过若干测试用例的测试，每个测试用例分配一定分数。每题的得分为通过的测试用例得分之和；整场考试得分为各题得分之和。提交错误不扣分。名次根据总得分决定，相同分数对应并列名次。每题分数的分布与题目难度成正比。甲级考试的分数分布一般为：20、25、25、30；乙考试的分数分布一般为：15、20、20、20、25。"><a href="#甲级考试一般出4题，题目描述语言为英文；乙级考试一般出5题，题目描述语言为中文。每题要求考生按照严格的输入输出要求提交程序解决问题。程序须经过若干测试用例的测试，每个测试用例分配一定分数。每题的得分为通过的测试用例得分之和；整场考试得分为各题得分之和。提交错误不扣分。名次根据总得分决定，相同分数对应并列名次。每题分数的分布与题目难度成正比。甲级考试的分数分布一般为：20、25、25、30；乙考试的分数分布一般为：15、20、20、20、25。" class="headerlink" title="甲级考试一般出4题，题目描述语言为英文；乙级考试一般出5题，题目描述语言为中文。每题要求考生按照严格的输入输出要求提交程序解决问题。程序须经过若干测试用例的测试，每个测试用例分配一定分数。每题的得分为通过的测试用例得分之和；整场考试得分为各题得分之和。提交错误不扣分。名次根据总得分决定，相同分数对应并列名次。每题分数的分布与题目难度成正比。甲级考试的分数分布一般为：20、25、25、30；乙考试的分数分布一般为：15、20、20、20、25。"></a>甲级考试一般出4题，题目描述语言为英文；乙级考试一般出5题，题目描述语言为中文。每题要求考生按照严格的输入输出要求提交程序解决问题。程序须经过若干测试用例的测试，每个测试用例分配一定分数。每题的得分为通过的测试用例得分之和；整场考试得分为各题得分之和。提交错误不扣分。名次根据总得分决定，相同分数对应并列名次。每题分数的分布与题目难度成正比。甲级考试的分数分布一般为：20、25、25、30；乙考试的分数分布一般为：15、20、20、20、25。</h5><h3 id="4-比赛"><a href="#4-比赛" class="headerlink" title="4. 比赛"></a>4. 比赛</h3><h4 id="1-蓝桥杯"><a href="#1-蓝桥杯" class="headerlink" title="(1)蓝桥杯"></a>(1)蓝桥杯</h4><h5 id="为推动软件开发技术的发展，促进软件专业技术人才培养，向软件行业输送具有创新能力和实践能力的高端人才，提升高校毕业生的就业竞争力，全面推动行业发展及人才培养进程，工业和信息化部人才交流中心特举办“全国软件专业人才设计与创业大赛”，大赛包括个人赛和团队赛两个比赛项目，个人赛设置：1、C-C-程序设计（本科A组、本科B组、高职高专组）2、Java软件开发（本科A组、本科B组、高职高专组）3、嵌入式设计与开发（大学组、研究生组）4、单片机设计与开发（大学组）5、电子设计与开发（大学组），团队赛设置：软件创业赛一个科目组别。"><a href="#为推动软件开发技术的发展，促进软件专业技术人才培养，向软件行业输送具有创新能力和实践能力的高端人才，提升高校毕业生的就业竞争力，全面推动行业发展及人才培养进程，工业和信息化部人才交流中心特举办“全国软件专业人才设计与创业大赛”，大赛包括个人赛和团队赛两个比赛项目，个人赛设置：1、C-C-程序设计（本科A组、本科B组、高职高专组）2、Java软件开发（本科A组、本科B组、高职高专组）3、嵌入式设计与开发（大学组、研究生组）4、单片机设计与开发（大学组）5、电子设计与开发（大学组），团队赛设置：软件创业赛一个科目组别。" class="headerlink" title="为推动软件开发技术的发展，促进软件专业技术人才培养，向软件行业输送具有创新能力和实践能力的高端人才，提升高校毕业生的就业竞争力，全面推动行业发展及人才培养进程，工业和信息化部人才交流中心特举办“全国软件专业人才设计与创业大赛”，大赛包括个人赛和团队赛两个比赛项目，个人赛设置：1、C/C++程序设计（本科A组、本科B组、高职高专组）2、Java软件开发（本科A组、本科B组、高职高专组）3、嵌入式设计与开发（大学组、研究生组）4、单片机设计与开发（大学组）5、电子设计与开发（大学组），团队赛设置：软件创业赛一个科目组别。"></a>为推动软件开发技术的发展，促进软件专业技术人才培养，向软件行业输送具有创新能力和实践能力的高端人才，提升高校毕业生的就业竞争力，全面推动行业发展及人才培养进程，工业和信息化部人才交流中心特举办“全国软件专业人才设计与创业大赛”，大赛包括个人赛和团队赛两个比赛项目，个人赛设置：1、C/C++程序设计（本科A组、本科B组、高职高专组）2、Java软件开发（本科A组、本科B组、高职高专组）3、嵌入式设计与开发（大学组、研究生组）4、单片机设计与开发（大学组）5、电子设计与开发（大学组），团队赛设置：软件创业赛一个科目组别。</h5><h5 id="一般9月开始报名，截止时间为12月。省赛在3月份，国赛为5月份，报名费用为300元"><a href="#一般9月开始报名，截止时间为12月。省赛在3月份，国赛为5月份，报名费用为300元" class="headerlink" title="一般9月开始报名，截止时间为12月。省赛在3月份，国赛为5月份，报名费用为300元"></a>一般9月开始报名，截止时间为12月。省赛在3月份，国赛为5月份，报名费用为300元</h5><h5 id="软件比赛：4小时，全程封闭。"><a href="#软件比赛：4小时，全程封闭。" class="headerlink" title="软件比赛：4小时，全程封闭。"></a>软件比赛：4小时，全程封闭。</h5><h5 id="软件类"><a href="#软件类" class="headerlink" title="软件类"></a>软件类</h5><h5 id="填空题：答案唯一。"><a href="#填空题：答案唯一。" class="headerlink" title="填空题：答案唯一。"></a>填空题：答案唯一。</h5><h5 id="程序填空题：按选手填写的代码代入程序中能否得出正确结果为判据。"><a href="#程序填空题：按选手填写的代码代入程序中能否得出正确结果为判据。" class="headerlink" title="程序填空题：按选手填写的代码代入程序中能否得出正确结果为判据。"></a>程序填空题：按选手填写的代码代入程序中能否得出正确结果为判据。</h5><h5 id="编程大题：主要以选手所提交的程序的运行结果为依据（大于90-）；同时会参考选手程序的编码风格、逻辑性、可读性等方面（小于10-）。"><a href="#编程大题：主要以选手所提交的程序的运行结果为依据（大于90-）；同时会参考选手程序的编码风格、逻辑性、可读性等方面（小于10-）。" class="headerlink" title="编程大题：主要以选手所提交的程序的运行结果为依据（大于90%）；同时会参考选手程序的编码风格、逻辑性、可读性等方面（小于10%）。"></a>编程大题：主要以选手所提交的程序的运行结果为依据（大于90%）；同时会参考选手程序的编码风格、逻辑性、可读性等方面（小于10%）。</h5><h4 id="2-天梯赛-团体赛"><a href="#2-天梯赛-团体赛" class="headerlink" title="(2)天梯赛(团体赛)"></a>(2)天梯赛(团体赛)</h4><h5 id="团体程序设计天梯赛是中国高校计算机大赛的竞赛版块之一，赛旨在提升学生计算机问题求解水平，增强学生程序设计能力，培养团队合作精神，提高大学生的综合素质，同时丰富校园学术气氛，促进校际交流，提高全国高校的程序设计教学水平。比赛重点考查参赛队伍的基础程序设计能力、数据结构与算法应用能力，并通过团体成绩体现高校在程序设计教学方面的整体水平。竞赛题目均为在线编程题，由搭建在网易服务器上的PAT在线裁判系统自动评判。难度分3个梯级：基础级、进阶级、登顶级。以个人独立竞技、团体计分的方式进行排名。"><a href="#团体程序设计天梯赛是中国高校计算机大赛的竞赛版块之一，赛旨在提升学生计算机问题求解水平，增强学生程序设计能力，培养团队合作精神，提高大学生的综合素质，同时丰富校园学术气氛，促进校际交流，提高全国高校的程序设计教学水平。比赛重点考查参赛队伍的基础程序设计能力、数据结构与算法应用能力，并通过团体成绩体现高校在程序设计教学方面的整体水平。竞赛题目均为在线编程题，由搭建在网易服务器上的PAT在线裁判系统自动评判。难度分3个梯级：基础级、进阶级、登顶级。以个人独立竞技、团体计分的方式进行排名。" class="headerlink" title="团体程序设计天梯赛是中国高校计算机大赛的竞赛版块之一，赛旨在提升学生计算机问题求解水平，增强学生程序设计能力，培养团队合作精神，提高大学生的综合素质，同时丰富校园学术气氛，促进校际交流，提高全国高校的程序设计教学水平。比赛重点考查参赛队伍的基础程序设计能力、数据结构与算法应用能力，并通过团体成绩体现高校在程序设计教学方面的整体水平。竞赛题目均为在线编程题，由搭建在网易服务器上的PAT在线裁判系统自动评判。难度分3个梯级：基础级、进阶级、登顶级。以个人独立竞技、团体计分的方式进行排名。"></a>团体程序设计天梯赛是中国高校计算机大赛的竞赛版块之一，赛旨在提升学生计算机问题求解水平，增强学生程序设计能力，培养团队合作精神，提高大学生的综合素质，同时丰富校园学术气氛，促进校际交流，提高全国高校的程序设计教学水平。比赛重点考查参赛队伍的基础程序设计能力、数据结构与算法应用能力，并通过团体成绩体现高校在程序设计教学方面的整体水平。竞赛题目均为在线编程题，由搭建在网易服务器上的PAT在线裁判系统自动评判。难度分3个梯级：基础级、进阶级、登顶级。以个人独立竞技、团体计分的方式进行排名。</h5><h5 id="每届大赛分为模拟赛、初赛、决赛。"><a href="#每届大赛分为模拟赛、初赛、决赛。" class="headerlink" title="每届大赛分为模拟赛、初赛、决赛。"></a>每届大赛分为模拟赛、初赛、决赛。</h5><h5 id="模拟赛一样安排于初赛2-3周前，目的是让各参赛学校熟悉比赛系统。模拟赛题目均来源于PAT考试题库或GPLT往届比赛题库。模拟赛赛后不查重。"><a href="#模拟赛一样安排于初赛2-3周前，目的是让各参赛学校熟悉比赛系统。模拟赛题目均来源于PAT考试题库或GPLT往届比赛题库。模拟赛赛后不查重。" class="headerlink" title="模拟赛一样安排于初赛2-3周前，目的是让各参赛学校熟悉比赛系统。模拟赛题目均来源于PAT考试题库或GPLT往届比赛题库。模拟赛赛后不查重。"></a>模拟赛一样安排于初赛2-3周前，目的是让各参赛学校熟悉比赛系统。模拟赛题目均来源于PAT考试题库或GPLT往届比赛题库。模拟赛赛后不查重。</h5><h5 id="初赛一般定于5月中旬至6月上旬，采用在线竞技的方式进行，比赛时长3小时，初赛各校最多允许派3支队伍参赛。赛后通过代码查重检验（10分及以下的题目不查重）的高校，以各校得分最高的队伍进行最高分排序，排前80名的高校以及各省级行政区得分在400分以上的第一名高校获得决赛资格。"><a href="#初赛一般定于5月中旬至6月上旬，采用在线竞技的方式进行，比赛时长3小时，初赛各校最多允许派3支队伍参赛。赛后通过代码查重检验（10分及以下的题目不查重）的高校，以各校得分最高的队伍进行最高分排序，排前80名的高校以及各省级行政区得分在400分以上的第一名高校获得决赛资格。" class="headerlink" title="初赛一般定于5月中旬至6月上旬，采用在线竞技的方式进行，比赛时长3小时，初赛各校最多允许派3支队伍参赛。赛后通过代码查重检验（10分及以下的题目不查重）的高校，以各校得分最高的队伍进行最高分排序，排前80名的高校以及各省级行政区得分在400分以上的第一名高校获得决赛资格。"></a>初赛一般定于5月中旬至6月上旬，采用在线竞技的方式进行，比赛时长3小时，初赛各校最多允许派3支队伍参赛。赛后通过代码查重检验（10分及以下的题目不查重）的高校，以各校得分最高的队伍进行最高分排序，排前80名的高校以及各省级行政区得分在400分以上的第一名高校获得决赛资格。</h5><h5 id="决赛一般定于7月举行。获得决赛资格的高校每所学校最多可派3支队伍参赛，比赛时长2-5小时，比赛在全国设立多个赛区进行现场赛。"><a href="#决赛一般定于7月举行。获得决赛资格的高校每所学校最多可派3支队伍参赛，比赛时长2-5小时，比赛在全国设立多个赛区进行现场赛。" class="headerlink" title="决赛一般定于7月举行。获得决赛资格的高校每所学校最多可派3支队伍参赛，比赛时长2.5小时，比赛在全国设立多个赛区进行现场赛。"></a>决赛一般定于7月举行。获得决赛资格的高校每所学校最多可派3支队伍参赛，比赛时长2.5小时，比赛在全国设立多个赛区进行现场赛。</h5><h5 id="注册了初赛的队伍可参加模拟赛；初赛注册费为-200-元-队，不收会务费；决赛注册费为-200-元-队，会务费为-150-元-人。决赛各参赛队的交通及住宿费自理，竞赛承办及协办单位为参赛队提供竞赛当天的午餐、晚餐。"><a href="#注册了初赛的队伍可参加模拟赛；初赛注册费为-200-元-队，不收会务费；决赛注册费为-200-元-队，会务费为-150-元-人。决赛各参赛队的交通及住宿费自理，竞赛承办及协办单位为参赛队提供竞赛当天的午餐、晚餐。" class="headerlink" title="注册了初赛的队伍可参加模拟赛；初赛注册费为 200 元/队，不收会务费；决赛注册费为 200 元/队，会务费为 150 元/人。决赛各参赛队的交通及住宿费自理，竞赛承办及协办单位为参赛队提供竞赛当天的午餐、晚餐。"></a>注册了初赛的队伍可参加模拟赛；初赛注册费为 200 元/队，不收会务费；决赛注册费为 200 元/队，会务费为 150 元/人。决赛各参赛队的交通及住宿费自理，竞赛承办及协办单位为参赛队提供竞赛当天的午餐、晚餐。</h5><h4 id="3-中国大学生程序设计竞赛-CCPC"><a href="#3-中国大学生程序设计竞赛-CCPC" class="headerlink" title="(3)中国大学生程序设计竞赛(CCPC)"></a>(3)中国大学生程序设计竞赛(CCPC)</h4><h5 id="中国大学生程序设计竞赛（China-Collegiate-Programming-Contest，-CCPC）是由中国大学生程序设计竞赛协会主办的面向世界大学生的国际性年度赛事，旨在激励当代大学生运用计算机编程技术和技能来解决实际问题，激发其学习算法和程序设计的兴趣，培养其团队合作意识、创新能力和挑战精神。"><a href="#中国大学生程序设计竞赛（China-Collegiate-Programming-Contest，-CCPC）是由中国大学生程序设计竞赛协会主办的面向世界大学生的国际性年度赛事，旨在激励当代大学生运用计算机编程技术和技能来解决实际问题，激发其学习算法和程序设计的兴趣，培养其团队合作意识、创新能力和挑战精神。" class="headerlink" title="中国大学生程序设计竞赛（China Collegiate Programming Contest， CCPC）是由中国大学生程序设计竞赛协会主办的面向世界大学生的国际性年度赛事，旨在激励当代大学生运用计算机编程技术和技能来解决实际问题，激发其学习算法和程序设计的兴趣，培养其团队合作意识、创新能力和挑战精神。"></a>中国大学生程序设计竞赛（China Collegiate Programming Contest， CCPC）是由中国大学生程序设计竞赛协会主办的面向世界大学生的国际性年度赛事，旨在激励当代大学生运用计算机编程技术和技能来解决实际问题，激发其学习算法和程序设计的兴趣，培养其团队合作意识、创新能力和挑战精神。</h5><h5 id="中国大学生程序设计竞赛（简称CCPC）是由中国大学生程序设计竞赛组委会（以下简称组委会）组织的年度性系列赛事，由以下各项比赛组成："><a href="#中国大学生程序设计竞赛（简称CCPC）是由中国大学生程序设计竞赛组委会（以下简称组委会）组织的年度性系列赛事，由以下各项比赛组成：" class="headerlink" title="中国大学生程序设计竞赛（简称CCPC）是由中国大学生程序设计竞赛组委会（以下简称组委会）组织的年度性系列赛事，由以下各项比赛组成："></a>中国大学生程序设计竞赛（简称CCPC）是由中国大学生程序设计竞赛组委会（以下简称组委会）组织的年度性系列赛事，由以下各项比赛组成：</h5><h5 id="1）-每年8月举办1场网络赛；"><a href="#1）-每年8月举办1场网络赛；" class="headerlink" title="(1） 每年8月举办1场网络赛；"></a>(1） 每年8月举办1场网络赛；</h5><h5 id="2）-每年9月11月举办的34场分站赛；"><a href="#2）-每年9月11月举办的34场分站赛；" class="headerlink" title="(2） 每年9月11月举办的34场分站赛；"></a>(2） 每年9月<del>11月举办的3</del>4场分站赛；</h5><h5 id="3）-每年11月-12月举办的年度总决赛；"><a href="#3）-每年11月-12月举办的年度总决赛；" class="headerlink" title="(3） 每年11月~12月举办的年度总决赛；"></a>(3） 每年11月~12月举办的年度总决赛；</h5><h5 id="4）-每年举行的其他组委会认可的比赛，包括但不限于女生赛、省赛、地区邀请赛、全国邀请赛等。"><a href="#4）-每年举行的其他组委会认可的比赛，包括但不限于女生赛、省赛、地区邀请赛、全国邀请赛等。" class="headerlink" title="(4） 每年举行的其他组委会认可的比赛，包括但不限于女生赛、省赛、地区邀请赛、全国邀请赛等。"></a>(4） 每年举行的其他组委会认可的比赛，包括但不限于女生赛、省赛、地区邀请赛、全国邀请赛等。</h5><h5 id="网络赛、分站赛、年度总决赛的命题与裁判工作由组委会指定命题单位负责，其他比赛相关事项由比赛承办学校全权负责，组委会进行监督，保证比赛的公平公正公开。"><a href="#网络赛、分站赛、年度总决赛的命题与裁判工作由组委会指定命题单位负责，其他比赛相关事项由比赛承办学校全权负责，组委会进行监督，保证比赛的公平公正公开。" class="headerlink" title="网络赛、分站赛、年度总决赛的命题与裁判工作由组委会指定命题单位负责，其他比赛相关事项由比赛承办学校全权负责，组委会进行监督，保证比赛的公平公正公开。"></a>网络赛、分站赛、年度总决赛的命题与裁判工作由组委会指定命题单位负责，其他比赛相关事项由比赛承办学校全权负责，组委会进行监督，保证比赛的公平公正公开。</h5><h5 id="组队参赛，每个参赛队由3名队员和1名教练组成，参赛队员必须是所属高校在籍的本科生、专科生或研一学生，教练必须是所属高校在职教师，教练有责任保证参赛成员身份的真实性。每个参赛队员每年参加的分站赛不超过两场。"><a href="#组队参赛，每个参赛队由3名队员和1名教练组成，参赛队员必须是所属高校在籍的本科生、专科生或研一学生，教练必须是所属高校在职教师，教练有责任保证参赛成员身份的真实性。每个参赛队员每年参加的分站赛不超过两场。" class="headerlink" title="组队参赛，每个参赛队由3名队员和1名教练组成，参赛队员必须是所属高校在籍的本科生、专科生或研一学生，教练必须是所属高校在职教师，教练有责任保证参赛成员身份的真实性。每个参赛队员每年参加的分站赛不超过两场。"></a>组队参赛，每个参赛队由3名队员和1名教练组成，参赛队员必须是所属高校在籍的本科生、专科生或研一学生，教练必须是所属高校在职教师，教练有责任保证参赛成员身份的真实性。每个参赛队员每年参加的分站赛不超过两场。</h5><h5 id="比赛时长：5个小时。当比赛进行一定时间后，若出现不可预见的事件，组委会有权调整比赛时间长度，但必须及时通知所有参赛选手。"><a href="#比赛时长：5个小时。当比赛进行一定时间后，若出现不可预见的事件，组委会有权调整比赛时间长度，但必须及时通知所有参赛选手。" class="headerlink" title="比赛时长：5个小时。当比赛进行一定时间后，若出现不可预见的事件，组委会有权调整比赛时间长度，但必须及时通知所有参赛选手。"></a>比赛时长：5个小时。当比赛进行一定时间后，若出现不可预见的事件，组委会有权调整比赛时间长度，但必须及时通知所有参赛选手。</h5><h5 id="比赛模式：上机编程，实时评测，实时排名。比赛题目：10-13题。年度总决赛、分站赛题目为英文描述（个别词句可附中文注释），其他比赛可采用中文描述。"><a href="#比赛模式：上机编程，实时评测，实时排名。比赛题目：10-13题。年度总决赛、分站赛题目为英文描述（个别词句可附中文注释），其他比赛可采用中文描述。" class="headerlink" title="比赛模式：上机编程，实时评测，实时排名。比赛题目：10~13题。年度总决赛、分站赛题目为英文描述（个别词句可附中文注释），其他比赛可采用中文描述。"></a>比赛模式：上机编程，实时评测，实时排名。比赛题目：10~13题。年度总决赛、分站赛题目为英文描述（个别词句可附中文注释），其他比赛可采用中文描述。</h5><h5 id="比赛机器：每支参赛队共用1台机器。-比赛评测：采用机器实时评测，每通过一个题目升一个对应颜色的气球。"><a href="#比赛机器：每支参赛队共用1台机器。-比赛评测：采用机器实时评测，每通过一个题目升一个对应颜色的气球。" class="headerlink" title="比赛机器：每支参赛队共用1台机器。 比赛评测：采用机器实时评测，每通过一个题目升一个对应颜色的气球。"></a>比赛机器：每支参赛队共用1台机器。 比赛评测：采用机器实时评测，每通过一个题目升一个对应颜色的气球。</h5><h5 id="比赛封榜：比赛最后一小时不显示排名变化情况，但仍然升气球，颁奖后公布最终结果。"><a href="#比赛封榜：比赛最后一小时不显示排名变化情况，但仍然升气球，颁奖后公布最终结果。" class="headerlink" title="比赛封榜：比赛最后一小时不显示排名变化情况，但仍然升气球，颁奖后公布最终结果。"></a>比赛封榜：比赛最后一小时不显示排名变化情况，但仍然升气球，颁奖后公布最终结果。</h5><h5 id="竞赛语言：至少支持C、C-、Java三种语言。"><a href="#竞赛语言：至少支持C、C-、Java三种语言。" class="headerlink" title="竞赛语言：至少支持C、C++、Java三种语言。"></a>竞赛语言：至少支持C、C++、Java三种语言。</h5><h5 id="提交反馈：包括-Compilation-Error（编译错误）、Runtime-Error（运行错误）、Wrong-Answer（答案错误）、Time-Limit-Exceeded（超时）、Accepted（正确）等。"><a href="#提交反馈：包括-Compilation-Error（编译错误）、Runtime-Error（运行错误）、Wrong-Answer（答案错误）、Time-Limit-Exceeded（超时）、Accepted（正确）等。" class="headerlink" title="提交反馈：包括 Compilation Error（编译错误）、Runtime Error（运行错误）、Wrong Answer（答案错误）、Time Limit Exceeded（超时）、Accepted（正确）等。"></a>提交反馈：包括 Compilation Error（编译错误）、Runtime Error（运行错误）、Wrong Answer（答案错误）、Time Limit Exceeded（超时）、Accepted（正确）等。</h5><h4 id="4-国际大学生程序设计竞赛-ACM"><a href="#4-国际大学生程序设计竞赛-ACM" class="headerlink" title="(4)国际大学生程序设计竞赛(ACM)"></a>(4)国际大学生程序设计竞赛(ACM)</h4><h5 id="国际大学生程序设计竞赛（英文全称：International-Collegiate-Programming-Contest（简称ICPC））是由国际计算机协会（ACM）主办的，一项旨在展示大学生创新能力、团队精神和在压力下编写程序、分析和解决问题能力的年度竞赛。"><a href="#国际大学生程序设计竞赛（英文全称：International-Collegiate-Programming-Contest（简称ICPC））是由国际计算机协会（ACM）主办的，一项旨在展示大学生创新能力、团队精神和在压力下编写程序、分析和解决问题能力的年度竞赛。" class="headerlink" title="国际大学生程序设计竞赛（英文全称：International Collegiate Programming Contest（简称ICPC））是由国际计算机协会（ACM）主办的，一项旨在展示大学生创新能力、团队精神和在压力下编写程序、分析和解决问题能力的年度竞赛。"></a>国际大学生程序设计竞赛（英文全称：International Collegiate Programming Contest（简称ICPC））是由国际计算机协会（ACM）主办的，一项旨在展示大学生创新能力、团队精神和在压力下编写程序、分析和解决问题能力的年度竞赛。</h5><h5 id="ACM-ICPC以团队的形式代表各学校参赛，每队由至多3名队员组成。每位队员必须是在校学生，有一定的年龄限制，并且每年最多可以参加2站区域选拔赛。"><a href="#ACM-ICPC以团队的形式代表各学校参赛，每队由至多3名队员组成。每位队员必须是在校学生，有一定的年龄限制，并且每年最多可以参加2站区域选拔赛。" class="headerlink" title="ACM-ICPC以团队的形式代表各学校参赛，每队由至多3名队员组成。每位队员必须是在校学生，有一定的年龄限制，并且每年最多可以参加2站区域选拔赛。"></a>ACM-ICPC以团队的形式代表各学校参赛，每队由至多3名队员组成。每位队员必须是在校学生，有一定的年龄限制，并且每年最多可以参加2站区域选拔赛。</h5><h5 id="比赛期间，每队使用1台电脑需要在5个小时内使用C-C-、Java和Python中的一种编写程序解决7到13个问题。程序完成之后提交裁判运行，运行的结果会判定为正确或错误两种并及时通知参赛队。而且有趣的是每队在正确完成一题后，组织者将在其位置上升起一只代表该题颜色的气球，每道题目第一支解决掉它的队还会额外获得一个“FIRST-PROBLEM-SOLVED”的气球。"><a href="#比赛期间，每队使用1台电脑需要在5个小时内使用C-C-、Java和Python中的一种编写程序解决7到13个问题。程序完成之后提交裁判运行，运行的结果会判定为正确或错误两种并及时通知参赛队。而且有趣的是每队在正确完成一题后，组织者将在其位置上升起一只代表该题颜色的气球，每道题目第一支解决掉它的队还会额外获得一个“FIRST-PROBLEM-SOLVED”的气球。" class="headerlink" title="比赛期间，每队使用1台电脑需要在5个小时内使用C/C++、Java和Python中的一种编写程序解决7到13个问题。程序完成之后提交裁判运行，运行的结果会判定为正确或错误两种并及时通知参赛队。而且有趣的是每队在正确完成一题后，组织者将在其位置上升起一只代表该题颜色的气球，每道题目第一支解决掉它的队还会额外获得一个“FIRST PROBLEM SOLVED”的气球。"></a>比赛期间，每队使用1台电脑需要在5个小时内使用C/C++、Java和Python中的一种编写程序解决7到13个问题。程序完成之后提交裁判运行，运行的结果会判定为正确或错误两种并及时通知参赛队。而且有趣的是每队在正确完成一题后，组织者将在其位置上升起一只代表该题颜色的气球，每道题目第一支解决掉它的队还会额外获得一个“FIRST PROBLEM SOLVED”的气球。</h5><h5 id="1-参赛队伍最多由三名参赛队员组成。"><a href="#1-参赛队伍最多由三名参赛队员组成。" class="headerlink" title="1.参赛队伍最多由三名参赛队员组成。"></a>1.参赛队伍最多由三名参赛队员组成。</h5><h5 id="2-竞赛中命题10题左右，试题描述为英文，比赛时间为5个小时，前四个小时可以实时看到排名，最后一小时封榜，无法看到排名。"><a href="#2-竞赛中命题10题左右，试题描述为英文，比赛时间为5个小时，前四个小时可以实时看到排名，最后一小时封榜，无法看到排名。" class="headerlink" title="2.竞赛中命题10题左右，试题描述为英文，比赛时间为5个小时，前四个小时可以实时看到排名，最后一小时封榜，无法看到排名。"></a>2.竞赛中命题10题左右，试题描述为英文，比赛时间为5个小时，前四个小时可以实时看到排名，最后一小时封榜，无法看到排名。</h5><h5 id="3-竞赛可以使用的语言：Java-C-C-Kotlin-和-Python。"><a href="#3-竞赛可以使用的语言：Java-C-C-Kotlin-和-Python。" class="headerlink" title="3.竞赛可以使用的语言：Java, C, C++, Kotlin 和 Python。"></a>3.竞赛可以使用的语言：Java, C, C++, Kotlin 和 Python。</h5><h5 id="4-重点考察选手的算法和程序设计能力，不考察实际工程中常用的系统编程，多线程编程等等；"><a href="#4-重点考察选手的算法和程序设计能力，不考察实际工程中常用的系统编程，多线程编程等等；" class="headerlink" title="4.重点考察选手的算法和程序设计能力，不考察实际工程中常用的系统编程，多线程编程等等；"></a>4.重点考察选手的算法和程序设计能力，不考察实际工程中常用的系统编程，多线程编程等等；</h5><h5 id="5-选手可携带任何非电子类资料，包括书籍和打印出来的程序等，部分赛区会对选手携带的纸质资料做限制。"><a href="#5-选手可携带任何非电子类资料，包括书籍和打印出来的程序等，部分赛区会对选手携带的纸质资料做限制。" class="headerlink" title="5.选手可携带任何非电子类资料，包括书籍和打印出来的程序等，部分赛区会对选手携带的纸质资料做限制。"></a>5.选手可携带任何非电子类资料，包括书籍和打印出来的程序等，部分赛区会对选手携带的纸质资料做限制。</h5><h5 id="6-评委负责将结果（正确或出错的类型）通过网络尽快返回给选手，除此之外不提供任何额外帮助；"><a href="#6-评委负责将结果（正确或出错的类型）通过网络尽快返回给选手，除此之外不提供任何额外帮助；" class="headerlink" title="6.评委负责将结果（正确或出错的类型）通过网络尽快返回给选手，除此之外不提供任何额外帮助；"></a>6.评委负责将结果（正确或出错的类型）通过网络尽快返回给选手，除此之外不提供任何额外帮助；</h5><h5 id="7-每个题目对应一种颜色的气球，通过该题目的队伍会得到对应颜色气球。每道题目第一支解决掉它的队还会额外获得一个“FIRST-PROBLEM-SOLVED”的气球。"><a href="#7-每个题目对应一种颜色的气球，通过该题目的队伍会得到对应颜色气球。每道题目第一支解决掉它的队还会额外获得一个“FIRST-PROBLEM-SOLVED”的气球。" class="headerlink" title="7.每个题目对应一种颜色的气球，通过该题目的队伍会得到对应颜色气球。每道题目第一支解决掉它的队还会额外获得一个“FIRST PROBLEM SOLVED”的气球。"></a>7.每个题目对应一种颜色的气球，通过该题目的队伍会得到对应颜色气球。每道题目第一支解决掉它的队还会额外获得一个“FIRST PROBLEM SOLVED”的气球。</h5>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--高精度加法</title>
    <url>/2020/01/15/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8A%A0%E6%B3%95/</url>
    <content><![CDATA[<h3 id="1-高精度加法"><a href="#1-高精度加法" class="headerlink" title="1.高精度加法"></a>1.高精度加法</h3><h4 id="输入两个整数a和b，输出这两个整数的和。a和b都不超过100位"><a href="#输入两个整数a和b，输出这两个整数的和。a和b都不超过100位" class="headerlink" title="输入两个整数a和b，输出这两个整数的和。a和b都不超过100位"></a>输入两个整数a和b，输出这两个整数的和。a和b都不超过100位</h4><h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><h4 id="由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。"><a href="#由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。" class="headerlink" title="由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。"></a>由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。</h4><h4 id="定义一个数组A，A-0-用于存储a的个位，A-1-用于存储a的十位，依此类推。同样可以用一个数组B来存储b。"><a href="#定义一个数组A，A-0-用于存储a的个位，A-1-用于存储a的十位，依此类推。同样可以用一个数组B来存储b。" class="headerlink" title="定义一个数组A，A[0]用于存储a的个位，A[1]用于存储a的十位，依此类推。同样可以用一个数组B来存储b。"></a>定义一个数组A，A[0]用于存储a的个位，A[1]用于存储a的十位，依此类推。同样可以用一个数组B来存储b。</h4><h4 id="计算c-a-b的时候，首先将A-0-与B-0-相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C-0-，即C-0-等于-A-0-B-0-10。然后计算A-1-与B-1-相加，这时还应将低位进上来的值r也加起来，即C-1-应该是A-1-、B-1-和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C-1-中。依此类推，即可求出C的所有位。"><a href="#计算c-a-b的时候，首先将A-0-与B-0-相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C-0-，即C-0-等于-A-0-B-0-10。然后计算A-1-与B-1-相加，这时还应将低位进上来的值r也加起来，即C-1-应该是A-1-、B-1-和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C-1-中。依此类推，即可求出C的所有位。" class="headerlink" title="计算c  =  a  +  b的时候，首先将A[0]与B[0]相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C[0]，即C[0]等于(A[0]+B[0])%10。然后计算A[1]与B[1]相加，这时还应将低位进上来的值r也加起来，即C[1]应该是A[1]、B[1]和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C[1]中。依此类推，即可求出C的所有位。"></a>计算c  =  a  +  b的时候，首先将A[0]与B[0]相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C[0]，即C[0]等于(A[0]+B[0])%10。然后计算A[1]与B[1]相加，这时还应将低位进上来的值r也加起来，即C[1]应该是A[1]、B[1]和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C[1]中。依此类推，即可求出C的所有位。</h4><h4 id="最后将C输出即可。"><a href="#最后将C输出即可。" class="headerlink" title="最后将C输出即可。"></a>最后将C输出即可。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。"><a href="#输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。" class="headerlink" title="输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。"></a>输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="输出一行，表示a-b的值。"><a href="#输出一行，表示a-b的值。" class="headerlink" title="输出一行，表示a  +  b的值。"></a>输出一行，表示a  +  b的值。</h4><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20100122201001221234567890</span><br><span class="line">2010012220100122</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20100122203011233454668012</span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[200],b[200];</span><br><span class="line">int x[200],y[200],sum[200];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	scanf(&quot;%s&quot;,a);				//用字符数组接收两个非负整数</span><br><span class="line">	scanf(&quot;%s&quot;,b);</span><br><span class="line">	for(int i=0;i&lt;strlen(a);i++)//从个位数起将各位数存储到数组中</span><br><span class="line">		x[i]=a[strlen(a)-i-1]-&apos;0&apos;;</span><br><span class="line">	for(int i=0;i&lt;strlen(b);i++)</span><br><span class="line">		y[i]=b[strlen(b)-i-1]-&apos;0&apos;;</span><br><span class="line">	int len=strlen(a)&gt;strlen(b)?strlen(a):strlen(b),s,temp=0;</span><br><span class="line">	for(int i=0;i&lt;len;i++)//将对应位置数字相加，并存储到sum数组中，若该数大于10，向高位进1</span><br><span class="line">	&#123;</span><br><span class="line">		s=x[i]+y[i];</span><br><span class="line">		if(s+temp&gt;=10)</span><br><span class="line">		&#123;</span><br><span class="line">			sum[i]=(s+temp)%10;</span><br><span class="line">			temp=1;</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			sum[i]=s+temp;</span><br><span class="line">			temp=0;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;					</span><br><span class="line">	if(temp==1)			//数字处理完，若仍有进位，则最高为1，并存储在sum数组最高位</span><br><span class="line">	&#123;</span><br><span class="line">		sum[len]=1;</span><br><span class="line">		len++;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=len-1;i&gt;=0;i--)//逆序输出该数字</span><br><span class="line">		printf(&quot;%d&quot;,sum[i]);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-回文数-该题将回文数与高精度加法相结合"><a href="#2-回文数-该题将回文数与高精度加法相结合" class="headerlink" title="2.回文数(该题将回文数与高精度加法相结合)"></a>2.回文数(该题将回文数与高精度加法相结合)</h3><h4 id="若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。"><a href="#若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。" class="headerlink" title="若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。"></a>若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。</h4><h4 id="例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。"><a href="#例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。" class="headerlink" title="例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。"></a>例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。</h4><h4 id="又如：对于10进制数87："><a href="#又如：对于10进制数87：" class="headerlink" title="又如：对于10进制数87："></a>又如：对于10进制数87：</h4><h4 id="STEP1：87-78-165"><a href="#STEP1：87-78-165" class="headerlink" title="STEP1：87+78  =  165"></a>STEP1：87+78  =  165</h4><h4 id="STEP2：165-561-726"><a href="#STEP2：165-561-726" class="headerlink" title="STEP2：165+561  =  726"></a>STEP2：165+561  =  726</h4><h4 id="STEP3：726-627-1353"><a href="#STEP3：726-627-1353" class="headerlink" title="STEP3：726+627  =  1353"></a>STEP3：726+627  =  1353</h4><h4 id="STEP4：1353-3531-4884"><a href="#STEP4：1353-3531-4884" class="headerlink" title="STEP4：1353+3531  =  4884"></a>STEP4：1353+3531  =  4884</h4><h4 id="在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。"><a href="#在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。" class="headerlink" title="在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。"></a>在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。</h4><h4 id="写一个程序，给定一个N（2-lt-N-lt-10或N-16）进制数M（其中16进制数字为0-9与A-F），求最少经过几步可以得到回文数。"><a href="#写一个程序，给定一个N（2-lt-N-lt-10或N-16）进制数M（其中16进制数字为0-9与A-F），求最少经过几步可以得到回文数。" class="headerlink" title="写一个程序，给定一个N（2&lt; =N&lt; =10或N=16）进制数M（其中16进制数字为0-9与A-F），求最少经过几步可以得到回文数。"></a>写一个程序，给定一个N（2&lt; =N&lt; =10或N=16）进制数M（其中16进制数字为0-9与A-F），求最少经过几步可以得到回文数。</h4><h4 id="如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible-”"><a href="#如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible-”" class="headerlink" title="如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible!”"></a>如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible!”</h4><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="两行，N与M-100位，两数的最高位都不是0。"><a href="#两行，N与M-100位，两数的最高位都不是0。" class="headerlink" title="两行，N与M 100位，两数的最高位都不是0。"></a>两行，N与M 100位，两数的最高位都不是0。</h4><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="如果能在30步以内得到回文数，输出“STEP-xx”（不含引号），其中xx是步数；否则输出一行”Impossible-”（不含引号）"><a href="#如果能在30步以内得到回文数，输出“STEP-xx”（不含引号），其中xx是步数；否则输出一行”Impossible-”（不含引号）" class="headerlink" title="如果能在30步以内得到回文数，输出“STEP=xx”（不含引号），其中xx是步数；否则输出一行”Impossible!”（不含引号）"></a>如果能在30步以内得到回文数，输出“STEP=xx”（不含引号），其中xx是步数；否则输出一行”Impossible!”（不含引号）</h4><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9 </span><br><span class="line">87</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STEP=6</span><br></pre></td></tr></table></figure>

<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char c[100];</span><br><span class="line">int a[100],b[100];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,count=0;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	scanf(&quot;%s&quot;,c);</span><br><span class="line">	int len=strlen(c);</span><br><span class="line">	for(int i=0;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(c[i]&gt;=&apos;A&apos;)</span><br><span class="line">			a[i]=c[i]-&apos;7&apos;;</span><br><span class="line">		else</span><br><span class="line">			a[i]=c[i]-&apos;0&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">    	int flag=0,i;</span><br><span class="line">		for(i=0;i&lt;len;i++)</span><br><span class="line">			b[i]=a[i]+a[len-i-1];</span><br><span class="line">		for(i=0;i&lt;len;i++)      //该处进行相加时，和高精度加法相同，逐步求和，大于n,则高位进1.</span><br><span class="line">		&#123;</span><br><span class="line">			int temp=b[i];</span><br><span class="line">			b[i]=(temp+flag)%n;</span><br><span class="line">			if((flag+temp)&gt;=n)</span><br><span class="line">				flag=1;</span><br><span class="line">			else</span><br><span class="line">				flag=0;</span><br><span class="line">			a[i]=b[i];</span><br><span class="line">		&#125;</span><br><span class="line">		if(flag==1)</span><br><span class="line">		&#123;</span><br><span class="line">			a[len]=b[len]=1;</span><br><span class="line">			len++; </span><br><span class="line">		&#125;	</span><br><span class="line">		count++;</span><br><span class="line">		int fa=1;</span><br><span class="line">		for(int i=0;i&lt;len/2;i++)</span><br><span class="line">			if(b[i]!=b[len-i-1])</span><br><span class="line">			&#123;</span><br><span class="line">				fa=0;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		if(fa&amp;&amp;count&lt;30)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;STEP=%d\n&quot;,count);</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		if(count&gt;=30)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;Impossible!&quot;);</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--回文数</title>
    <url>/2020/01/13/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    <content><![CDATA[<h3 id="1-回文数-一"><a href="#1-回文数-一" class="headerlink" title="1.回文数(一)"></a>1.回文数(一)</h3><h4 id="123321是一个非常特殊的数，它从左边读和从右边读是一样的。"><a href="#123321是一个非常特殊的数，它从左边读和从右边读是一样的。" class="headerlink" title="123321是一个非常特殊的数，它从左边读和从右边读是一样的。"></a>123321是一个非常特殊的数，它从左边读和从右边读是一样的。</h4><h4 id="输入一个正整数n，-编程求所有这样的五位和六位十进制数，满足各位数字之和等于n-。"><a href="#输入一个正整数n，-编程求所有这样的五位和六位十进制数，满足各位数字之和等于n-。" class="headerlink" title="输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。"></a>输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入一行，包含一个正整数n。"><a href="#输入一行，包含一个正整数n。" class="headerlink" title="输入一行，包含一个正整数n。"></a>输入一行，包含一个正整数n。</h4><h4 id="数据规模和约定-1-lt-n-lt-54。"><a href="#数据规模和约定-1-lt-n-lt-54。" class="headerlink" title="数据规模和约定:1&lt;=n&lt;=54。"></a>数据规模和约定:1&lt;=n&lt;=54。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="按从小到大的顺序输出满足条件的整数，每个整数占一行。"><a href="#按从小到大的顺序输出满足条件的整数，每个整数占一行。" class="headerlink" title="按从小到大的顺序输出满足条件的整数，每个整数占一行。"></a>按从小到大的顺序输出满足条件的整数，每个整数占一行。</h4><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">52</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">899998</span><br><span class="line">989989</span><br><span class="line">998899</span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int change(int n,int i)				//将i进行高低位交换，并用sum记录i各位数字的和，如果sum和整数n完全相等，则返回这个数，否则返回0.</span><br><span class="line">&#123;</span><br><span class="line">	int m=0,sum=0;</span><br><span class="line">	while(i&gt;0)</span><br><span class="line">	&#123;</span><br><span class="line">		m=m*10+(i%10);</span><br><span class="line">		sum+=i%10;</span><br><span class="line">		i=i/10;</span><br><span class="line">	&#125;</span><br><span class="line">	if(sum==n)</span><br><span class="line">		return m;</span><br><span class="line">	else</span><br><span class="line">		return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	for(int i=10000;i&lt;=999999;i++)	//在最小的五位数和最大的六位数之间循环</span><br><span class="line">	&#123;</span><br><span class="line">		if(i==change(n,i))		//如果i是回文数并且满足各位数字之和等于n</span><br><span class="line">			printf(&quot;%d\n&quot;,i);		</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-回文数二"><a href="#2-回文数二" class="headerlink" title="2.回文数二)"></a>2.回文数二)</h3><h4 id="若一个数（首位不为0）从左到右读与从右到左读都是一样，这个数就叫做回文数，例如12521就是一个回文数。"><a href="#若一个数（首位不为0）从左到右读与从右到左读都是一样，这个数就叫做回文数，例如12521就是一个回文数。" class="headerlink" title="若一个数（首位不为0）从左到右读与从右到左读都是一样，这个数就叫做回文数，例如12521就是一个回文数。"></a>若一个数（首位不为0）从左到右读与从右到左读都是一样，这个数就叫做回文数，例如12521就是一个回文数。</h4><h4 id="给定一个正整数，把它的每一个位上的数字倒过来排列组成一个新数，然后与原数相加，如果是回文数则停止，如果不是，则重复这个操作，直到和为回文数为止。给定的数本身不为回文数。"><a href="#给定一个正整数，把它的每一个位上的数字倒过来排列组成一个新数，然后与原数相加，如果是回文数则停止，如果不是，则重复这个操作，直到和为回文数为止。给定的数本身不为回文数。" class="headerlink" title="给定一个正整数，把它的每一个位上的数字倒过来排列组成一个新数，然后与原数相加，如果是回文数则停止，如果不是，则重复这个操作，直到和为回文数为止。给定的数本身不为回文数。"></a>给定一个正整数，把它的每一个位上的数字倒过来排列组成一个新数，然后与原数相加，如果是回文数则停止，如果不是，则重复这个操作，直到和为回文数为止。给定的数本身不为回文数。</h4><h4 id="例如：87则有："><a href="#例如：87则有：" class="headerlink" title="例如：87则有："></a>例如：87则有：</h4><h4 id="STEP1-87-78-165"><a href="#STEP1-87-78-165" class="headerlink" title="STEP1: 87+78=165"></a>STEP1: 87+78=165</h4><h4 id="STEP2-165-561-726"><a href="#STEP2-165-561-726" class="headerlink" title="STEP2: 165+561=726"></a>STEP2: 165+561=726</h4><h4 id="STEP3-726-627-1353"><a href="#STEP3-726-627-1353" class="headerlink" title="STEP3: 726+627=1353"></a>STEP3: 726+627=1353</h4><h4 id="STEP4-1353-3531-4884"><a href="#STEP4-1353-3531-4884" class="headerlink" title="STEP4: 1353+3531=4884"></a>STEP4: 1353+3531=4884</h4><h4 id="编写一个程序，输入M（12-lt-M-lt-100）-输出最少经过几步可以得到回文数。如果在8步以内（含8步）不可能得到回文数，则输出0。"><a href="#编写一个程序，输入M（12-lt-M-lt-100）-输出最少经过几步可以得到回文数。如果在8步以内（含8步）不可能得到回文数，则输出0。" class="headerlink" title="编写一个程序，输入M（12&lt;=M&lt;=100）,输出最少经过几步可以得到回文数。如果在8步以内（含8步）不可能得到回文数，则输出0。"></a>编写一个程序，输入M（12&lt;=M&lt;=100）,输出最少经过几步可以得到回文数。如果在8步以内（含8步）不可能得到回文数，则输出0。</h4><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="第1行一个正整数L-代表测试数据的组数。"><a href="#第1行一个正整数L-代表测试数据的组数。" class="headerlink" title="第1行一个正整数L,代表测试数据的组数。"></a>第1行一个正整数L,代表测试数据的组数。</h4><h4 id="接下来L行每行一个整数M（12-lt-M-lt-100），M本身不为回文数"><a href="#接下来L行每行一个整数M（12-lt-M-lt-100），M本身不为回文数" class="headerlink" title="接下来L行每行一个整数M（12&lt;=M&lt;=100），M本身不为回文数"></a>接下来L行每行一个整数M（12&lt;=M&lt;=100），M本身不为回文数</h4><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="输出L行，第i行对应输入数据的第i-1行，输出最少需要的步数；如果步数大于8，则输出0。"><a href="#输出L行，第i行对应输入数据的第i-1行，输出最少需要的步数；如果步数大于8，则输出0。" class="headerlink" title="输出L行，第i行对应输入数据的第i+1行，输出最少需要的步数；如果步数大于8，则输出0。"></a>输出L行，第i行对应输入数据的第i+1行，输出最少需要的步数；如果步数大于8，则输出0。</h4><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">12</span><br><span class="line">87</span><br><span class="line">89</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int change(int n)     //将数的高低位进行交换</span><br><span class="line">&#123;</span><br><span class="line">	int m=0;</span><br><span class="line">	while(n&gt;0)</span><br><span class="line">	&#123;</span><br><span class="line">		m=m*10+(n%10);</span><br><span class="line">		n=n/10;</span><br><span class="line">	&#125;</span><br><span class="line">	return m;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);     //记录测试数据的组数</span><br><span class="line">	while(n--)</span><br><span class="line">	&#123;	</span><br><span class="line">		int count=0,num;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line">		while(1)</span><br><span class="line">		&#123;	</span><br><span class="line">			int m=change(num);</span><br><span class="line">			if(num==m||count&gt;8)	//该数为回文数并且变换次数大于8的话，跳出循环</span><br><span class="line">				break;</span><br><span class="line">			else</span><br><span class="line">			&#123;</span><br><span class="line">				num=num+m;</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if(count&lt;=8)</span><br><span class="line">			printf(&quot;%d\n&quot;,count);</span><br><span class="line">		else</span><br><span class="line">			printf(&quot;0\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-回文数-三"><a href="#3-回文数-三" class="headerlink" title="3.回文数(三)"></a>3.回文数(三)</h3><h4 id="一个正整数，如果交换高低位以后和原数相等-那么称这个数为回文数。比如121，2332都是文数，134567不是回文数。任意一个正整数，如果其不是回文数-将该数交换高低位以后和原数相加得到一个新的数-如果新数不是回文数，重复这个变换，直到得到回文数为止。例如，57变换后得到132-57-75-，132得到363-132-231-363是一个回文数。"><a href="#一个正整数，如果交换高低位以后和原数相等-那么称这个数为回文数。比如121，2332都是文数，134567不是回文数。任意一个正整数，如果其不是回文数-将该数交换高低位以后和原数相加得到一个新的数-如果新数不是回文数，重复这个变换，直到得到回文数为止。例如，57变换后得到132-57-75-，132得到363-132-231-363是一个回文数。" class="headerlink" title="一个正整数，如果交换高低位以后和原数相等,那么称这个数为回文数。比如121，2332都是文数，134567不是回文数。任意一个正整数，如果其不是回文数,将该数交换高低位以后和原数相加得到一个新的数,如果新数不是回文数，重复这个变换，直到得到回文数为止。例如，57变换后得到132(57+75)，132得到363(132 + 231), 363是一个回文数。"></a>一个正整数，如果交换高低位以后和原数相等,那么称这个数为回文数。比如121，2332都是文数，134567不是回文数。任意一个正整数，如果其不是回文数,将该数交换高低位以后和原数相加得到一个新的数,如果新数不是回文数，重复这个变换，直到得到回文数为止。例如，57变换后得到132(57+75)，132得到363(132 + 231), 363是一个回文数。</h4><h4 id="曾经有数学家猜想-对于任意正整数-经过有限次上述变换以后，一定能得出一个回文数。至至这个猜想还没有被证明是对的。现在请你通过编程来验证。"><a href="#曾经有数学家猜想-对于任意正整数-经过有限次上述变换以后，一定能得出一个回文数。至至这个猜想还没有被证明是对的。现在请你通过编程来验证。" class="headerlink" title="曾经有数学家猜想:对于任意正整数,经过有限次上述变换以后，一定能得出一个回文数。至至这个猜想还没有被证明是对的。现在请你通过编程来验证。"></a>曾经有数学家猜想:对于任意正整数,经过有限次上述变换以后，一定能得出一个回文数。至至这个猜想还没有被证明是对的。现在请你通过编程来验证。</h4><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入一行一个正整数n。"><a href="#输入一行一个正整数n。" class="headerlink" title="输入一行一个正整数n。"></a>输入一行一个正整数n。</h4><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="输出第一行一个正整数，-表示得到一个回文数的最少变换次数。"><a href="#输出第一行一个正整数，-表示得到一个回文数的最少变换次数。" class="headerlink" title="输出第一行一个正整数， 表示得到一个回文数的最少变换次数。"></a>输出第一行一个正整数， 表示得到一个回文数的最少变换次数。</h4><h4 id="接下来一行，输出变换过程，相邻的数之间用—-gt-”连接。输出格式可以参见样例。保证最后生成的数在int范围内。"><a href="#接下来一行，输出变换过程，相邻的数之间用—-gt-”连接。输出格式可以参见样例。保证最后生成的数在int范围内。" class="headerlink" title="接下来一行，输出变换过程，相邻的数之间用—&gt;”连接。输出格式可以参见样例。保证最后生成的数在int范围内。"></a>接下来一行，输出变换过程，相邻的数之间用—&gt;”连接。输出格式可以参见样例。保证最后生成的数在int范围内。</h4><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入:"></a>样例输入:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">349</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出:"></a>样例输出:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">349---&gt;1292---&gt;4213---&gt;7337</span><br></pre></td></tr></table></figure>

<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int change(int n)		//将数的高低位进行交换</span><br><span class="line">&#123;</span><br><span class="line">	int m=0;</span><br><span class="line">	while(n&gt;0)</span><br><span class="line">	&#123;</span><br><span class="line">		m=m*10+n%10;</span><br><span class="line">		n=n/10;</span><br><span class="line">	&#125;</span><br><span class="line">	return m;	</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,count=0,a[50];</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	while(1)</span><br><span class="line">	&#123;	</span><br><span class="line">		a[count++]=n;		//将n的值进行存储</span><br><span class="line">		int m=change(n);</span><br><span class="line">		if(m==n)			//将n与高低位交换后的数比较，看是否相等(判断是否是回文数)是的话跳出循环</span><br><span class="line">			break;</span><br><span class="line">		else				//否则将n和m相加</span><br><span class="line">			n=n+m;	</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%d\n&quot;,count-1);//输出变换的次数</span><br><span class="line">	printf(&quot;%d&quot;,a[0]);	   //输出第一个n的值，即n的初值</span><br><span class="line">	if(count==0)</span><br><span class="line">		printf(&quot;\n&quot;);	  //如果输入为回文数,直接输出换行</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		for(int i=1;i&lt;count;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(i==count)</span><br><span class="line">				printf(&quot;%d\n&quot;,a[i]);</span><br><span class="line">			else</span><br><span class="line">				printf(&quot;---&gt;%d&quot;,a[i]);	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;\n&quot;);	</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-回文数-四"><a href="#4-回文数-四" class="headerlink" title="4.回文数(四)"></a>4.回文数(四)</h3><h4 id="若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。"><a href="#若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。" class="headerlink" title="若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。"></a>若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。</h4><h4 id="例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。"><a href="#例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。" class="headerlink" title="例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。"></a>例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。</h4><h4 id="又如：对于10进制数87："><a href="#又如：对于10进制数87：" class="headerlink" title="又如：对于10进制数87："></a>又如：对于10进制数87：</h4><h4 id="STEP1：87-78-165"><a href="#STEP1：87-78-165" class="headerlink" title="STEP1：87+78  =  165"></a>STEP1：87+78  =  165</h4><h4 id="STEP2：165-561-726"><a href="#STEP2：165-561-726" class="headerlink" title="STEP2：165+561  =  726"></a>STEP2：165+561  =  726</h4><h4 id="STEP3：726-627-1353"><a href="#STEP3：726-627-1353" class="headerlink" title="STEP3：726+627  =  1353"></a>STEP3：726+627  =  1353</h4><h4 id="STEP4：1353-3531-4884"><a href="#STEP4：1353-3531-4884" class="headerlink" title="STEP4：1353+3531  =  4884"></a>STEP4：1353+3531  =  4884</h4><h4 id="在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。"><a href="#在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。" class="headerlink" title="在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。"></a>在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。</h4><h4 id="写一个程序，给定一个N（2-lt-N-lt-10或N-16）进制数M（其中16进制数字为0-9与A-F），求最少经过几步可以得到回文数。"><a href="#写一个程序，给定一个N（2-lt-N-lt-10或N-16）进制数M（其中16进制数字为0-9与A-F），求最少经过几步可以得到回文数。" class="headerlink" title="写一个程序，给定一个N（2&lt; =N&lt; =10或N=16）进制数M（其中16进制数字为0-9与A-F），求最少经过几步可以得到回文数。"></a>写一个程序，给定一个N（2&lt; =N&lt; =10或N=16）进制数M（其中16进制数字为0-9与A-F），求最少经过几步可以得到回文数。</h4><h4 id="如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible-”"><a href="#如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible-”" class="headerlink" title="如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible!”"></a>如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible!”</h4><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="两行，N与M-100位，两数的最高位都不是0。"><a href="#两行，N与M-100位，两数的最高位都不是0。" class="headerlink" title="两行，N与M 100位，两数的最高位都不是0。"></a>两行，N与M 100位，两数的最高位都不是0。</h4><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="如果能在30步以内得到回文数，输出“STEP-xx”（不含引号），其中xx是步数；否则输出一行”Impossible-”（不含引号）"><a href="#如果能在30步以内得到回文数，输出“STEP-xx”（不含引号），其中xx是步数；否则输出一行”Impossible-”（不含引号）" class="headerlink" title="如果能在30步以内得到回文数，输出“STEP=xx”（不含引号），其中xx是步数；否则输出一行”Impossible!”（不含引号）"></a>如果能在30步以内得到回文数，输出“STEP=xx”（不含引号），其中xx是步数；否则输出一行”Impossible!”（不含引号）</h4><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入:"></a>样例输入:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9 </span><br><span class="line">87</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出:"></a>样例输出:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STEP=6</span><br></pre></td></tr></table></figure>

<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char c[100];</span><br><span class="line">int a[100],b[100];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,count=0;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);					//记录进制N</span><br><span class="line">	scanf(&quot;%s&quot;,c);					//输入一个数，用字符数组c接收，可能包含A-F字符</span><br><span class="line">	int len=strlen(c);</span><br><span class="line">	for(int i=0;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(c[i]&gt;=&apos;A&apos;)</span><br><span class="line">			a[i]=c[i]-&apos;7&apos;;</span><br><span class="line">		else</span><br><span class="line">			a[i]=c[i]-&apos;0&apos;;</span><br><span class="line">	&#125;							   //将字符数组c[i]中每个字符转换为数字存储在a[i]整型数组中</span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">    	int flag=0,i;</span><br><span class="line">		for(i=0;i&lt;len;i++)</span><br><span class="line">			b[i]=a[i]+a[len-i-1];	//将a[i]中数字进行高低位相加</span><br><span class="line">		for(i=0;i&lt;len;i++)      //该处进行相加时，和高精度加法相同，逐步求和，大于n,则高位进1.</span><br><span class="line">		&#123;</span><br><span class="line">			int temp=b[i];</span><br><span class="line">			b[i]=(temp+flag)%n;</span><br><span class="line">			if((flag+temp)&gt;=n)</span><br><span class="line">				flag=1;</span><br><span class="line">			else</span><br><span class="line">				flag=0;</span><br><span class="line">			a[i]=b[i];			//将经过处理的b[i]中数字赋值给a[i]</span><br><span class="line">		&#125;</span><br><span class="line">		if(flag==1)</span><br><span class="line">		&#123;</span><br><span class="line">			a[len]=b[len]=1;</span><br><span class="line">			len++; </span><br><span class="line">		&#125;						//如果相加最高位进1，则重新开辟空间，存储进位1</span><br><span class="line">		count++;</span><br><span class="line">		int fa=1;				//设置标志位,判断高低位是否相等，即判断是否是回文数，不是则跳出循环</span><br><span class="line">		for(int i=0;i&lt;len/2;i++)</span><br><span class="line">			if(b[i]!=b[len-i-1])</span><br><span class="line">			&#123;</span><br><span class="line">				fa=0;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		if(fa&amp;&amp;count&lt;30)		//如果是回文数,并且变换次数小于30则输出变换次数，跳出循环</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;STEP=%d\n&quot;,count);</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		if(count&gt;=30)			//如果变换次数大于30次，则跳出循环</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;Impossible!&quot;);</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT--乙 1018 锤子剪刀布</title>
    <url>/2020/01/11/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--PAT%20%E4%B9%99%201018%20%E9%94%A4%E5%AD%90%E5%89%AA%E5%88%80%E5%B8%83/</url>
    <content><![CDATA[<h2 id="1018-锤子剪刀布-题解"><a href="#1018-锤子剪刀布-题解" class="headerlink" title="1018 锤子剪刀布(题解)"></a>1018 锤子剪刀布(题解)</h2><h4 id="大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示："><a href="#大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：" class="headerlink" title="大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示："></a>大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：</h4><p><img src="http://p.caigoubao.cc/628034/724da598-b37f-4f1f-99b4-71459654ce3a.jpg" alt="图片"></p>
<h4 id="现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。"><a href="#现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。" class="headerlink" title="现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。"></a>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><h4 id="输入第-1-行给出正整数-N（≤10-5-即双方交锋的次数。随后-N-行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C-代表“锤子”、J-代表“剪刀”、B-代表“布”，第-1-个字母代表甲方，第-2-个代表乙方，中间有-1-个空格。"><a href="#输入第-1-行给出正整数-N（≤10-5-即双方交锋的次数。随后-N-行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C-代表“锤子”、J-代表“剪刀”、B-代表“布”，第-1-个字母代表甲方，第-2-个代表乙方，中间有-1-个空格。" class="headerlink" title="输入第 1 行给出正整数 N（≤10 5)即双方交锋的次数。随后 N 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C 代表“锤子”、J 代表“剪刀”、B 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。"></a>输入第 1 行给出正整数 N（≤10 5)即双方交锋的次数。随后 N 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C 代表“锤子”、J 代表“剪刀”、B 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><h4 id="输出第-1、2-行分别给出甲、乙的胜、平、负次数，数字间以-1-个空格分隔。第-3-行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有-1-个空格。如果解不唯一，则输出按字母序最小的解。"><a href="#输出第-1、2-行分别给出甲、乙的胜、平、负次数，数字间以-1-个空格分隔。第-3-行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有-1-个空格。如果解不唯一，则输出按字母序最小的解。" class="headerlink" title="输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。"></a>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</h4><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">C J</span><br><span class="line">J B</span><br><span class="line">C B</span><br><span class="line">B B</span><br><span class="line">B C</span><br><span class="line">C C</span><br><span class="line">C B</span><br><span class="line">J B</span><br><span class="line">B C</span><br><span class="line">J J</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 3 2</span><br><span class="line">2 3 5</span><br><span class="line">B B</span><br></pre></td></tr></table></figure>

<p>代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	int j[4]=&#123;0,0,0,0&#125;;      //j[0],j[1],j[2],分别记录甲获胜时各种手势的次数.j[3]记录平局的次数</span><br><span class="line">	int y[4]=&#123;0,0,0,0&#125;;		 //y[0],y[1],y[2],分别记录乙获胜时各种手势的次数.</span><br><span class="line">	char a,b;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);			 //接收双方交战的次数</span><br><span class="line">	for(int i=0;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		getchar();</span><br><span class="line">		scanf(&quot;%c %c&quot;,&amp;a,&amp;b);//接收双方的手势</span><br><span class="line">		if(a==b) </span><br><span class="line">			++(j[3]);		 //记录平局的次数</span><br><span class="line">		else				 //分别记录甲乙获胜时各种手势的次数</span><br><span class="line">		&#123;</span><br><span class="line">			if((a==&apos;C&apos;)&amp;&amp;(b==&apos;J&apos;))</span><br><span class="line">				++(j[0]);	</span><br><span class="line">			if((a==&apos;J&apos;)&amp;&amp;(b==&apos;B&apos;))</span><br><span class="line">				++(j[1]);</span><br><span class="line">			if((a==&apos;B&apos;)&amp;&amp;(b==&apos;C&apos;))</span><br><span class="line">				++(j[2]);</span><br><span class="line">			if((a==&apos;J&apos;)&amp;&amp;(b==&apos;C&apos;)) </span><br><span class="line">				++(y[0]);	</span><br><span class="line">			if((a==&apos;B&apos;)&amp;&amp;(b==&apos;J&apos;)) </span><br><span class="line">				++(y[1]);</span><br><span class="line">			if((a==&apos;C&apos;)&amp;&amp;(b==&apos;B&apos;))</span><br><span class="line">				++(y[2]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	int sum=j[0]+j[1]+j[2];	//甲获胜的总次数</span><br><span class="line">	printf(&quot;%d %d %d\n&quot;,sum,j[3],n-sum-j[3]);//甲输的次数为交战总次数减平局次数和甲获胜次数</span><br><span class="line">	printf(&quot;%d %d %d\n&quot;,n-sum-j[3],j[3],sum);//乙获胜的次数为甲输的次数</span><br><span class="line">	int jmax=0,ymax=0;				//分别记录甲乙获胜手势次数最大值的数组下标</span><br><span class="line">	for(int i=0;i&lt;3;i++)	</span><br><span class="line">	&#123;</span><br><span class="line">		if(j[i]&gt;j[jmax]&amp;&amp;j[i]!=0)</span><br><span class="line">			jmax=i;</span><br><span class="line">		if(y[i]&gt;y[ymax]&amp;&amp;y[i]!=0)</span><br><span class="line">			ymax=i;</span><br><span class="line">	&#125;</span><br><span class="line">	char jj,yy;//分别记录甲乙获胜最多的手势</span><br><span class="line">	if((jmax==0&amp;&amp;j[0]&gt;j[2])||(jmax==1&amp;&amp;j[0]==j[1]))</span><br><span class="line">		jj=&apos;C&apos;;//1.最大值下标为0，并且C的次数大于B 2.最大值下标为1，C的次数和J的次数相等（CJ次数相等）</span><br><span class="line">	if(jmax==1&amp;&amp;j[1]&gt;j[0]&amp;&amp;j[1]&gt;j[2])</span><br><span class="line">		jj=&apos;J&apos;;//最大值下标为1，并且j的次数大于C和B</span><br><span class="line">	if((jmax==2)||(jmax==0&amp;&amp;j[0]==j[2])||(jmax==1&amp;&amp;j[1]==j[2])||(jmax==0&amp;&amp;j[0]==j[1]==j[2]==0))//1.最大值下标为2 2.最大值下标为0，C的次数等于B的次数 (CB次数相等)3.最大值下标为1，J的次数等于B的次数(JB次数相等) 4.BCJ次数完全相等，并等于零时.</span><br><span class="line">	jj=&apos;B&apos;;</span><br><span class="line">	if((ymax==0&amp;&amp;y[0]&gt;y[2])||(ymax==1&amp;&amp;y[0]==y[1]))</span><br><span class="line">		yy=&apos;C&apos;;</span><br><span class="line">	if(ymax==1&amp;&amp;y[1]&gt;y[0]&amp;&amp;y[1]&gt;y[2])</span><br><span class="line">		yy=&apos;J&apos;;</span><br><span class="line">	if((ymax==2)||(ymax==0&amp;&amp;y[0]==y[2])||(ymax==1&amp;&amp;y[1]==y[2])||(ymax==0&amp;&amp;y[0]==y[1]==y[2]))</span><br><span class="line">		yy=&apos;B&apos;;</span><br><span class="line">	printf(&quot;%c %c&quot;,jj,yy);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="众所周知，石头剪刀步的规则是这样的"><a href="#众所周知，石头剪刀步的规则是这样的" class="headerlink" title="众所周知，石头剪刀步的规则是这样的:"></a>众所周知，石头剪刀步的规则是这样的:</h4><h4 id="在一局游戏中，双方各自出石头、剪刀、步其一。"><a href="#在一局游戏中，双方各自出石头、剪刀、步其一。" class="headerlink" title="在一局游戏中，双方各自出石头、剪刀、步其一。"></a>在一局游戏中，双方各自出石头、剪刀、步其一。</h4><h4 id="胜负关系如下"><a href="#胜负关系如下" class="headerlink" title="胜负关系如下:"></a>胜负关系如下:</h4><p><img src="http://p.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132256921879153750.PNG" alt="图片"></p>
<h4 id="甲和乙进行了多轮游戏，甲总共出了A次石头，B次剪刀-C次布；乙总共出了X次石头-Y次剪刀-Z次布。你需要求出甲最多获胜多少局。"><a href="#甲和乙进行了多轮游戏，甲总共出了A次石头，B次剪刀-C次布；乙总共出了X次石头-Y次剪刀-Z次布。你需要求出甲最多获胜多少局。" class="headerlink" title="甲和乙进行了多轮游戏，甲总共出了A次石头，B次剪刀,C次布；乙总共出了X次石头,Y次剪刀,Z次布。你需要求出甲最多获胜多少局。"></a>甲和乙进行了多轮游戏，甲总共出了A次石头，B次剪刀,C次布；乙总共出了X次石头,Y次剪刀,Z次布。你需要求出甲最多获胜多少局。</h4><h4 id="输入描述；"><a href="#输入描述；" class="headerlink" title="输入描述；"></a>输入描述；</h4><h5 id="第一行-三个非负整数-A-B-C。"><a href="#第一行-三个非负整数-A-B-C。" class="headerlink" title="第一行,三个非负整数,A,B,C。"></a>第一行,三个非负整数,A,B,C。</h5><h5 id="第二行-三个非负整数-X-Y-Z。"><a href="#第二行-三个非负整数-X-Y-Z。" class="headerlink" title="第二行,三个非负整数,X,Y,Z。"></a>第二行,三个非负整数,X,Y,Z。</h5><h5 id="保证A-B-C-X-Y-Z。"><a href="#保证A-B-C-X-Y-Z。" class="headerlink" title="保证A+B+C=X+Y+Z。"></a>保证A+B+C=X+Y+Z。</h5><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h4><h5 id="输出一行，一个整数表示答案"><a href="#输出一行，一个整数表示答案" class="headerlink" title="输出一行，一个整数表示答案"></a>输出一行，一个整数表示答案</h5><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">114514 0 0</span><br><span class="line">0 114514 0</span><br></pre></td></tr></table></figure>

<h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">114514</span><br></pre></td></tr></table></figure>

<p>代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int a[3],b[3];	//两个数组分别记录甲乙两人石头剪刀布各自的次数</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	long long sum=0;</span><br><span class="line">	scanf(&quot;%d %d %d&quot;,&amp;a[0],&amp;a[1],&amp;a[2]);</span><br><span class="line">	scanf(&quot;%d %d %d&quot;,&amp;b[0],&amp;b[1],&amp;b[2]);</span><br><span class="line">	sum=sum+(a[0]&gt;=b[1]?b[1]:a[0]);		//甲出石头乙出剪刀次数最少则为甲获胜的次数</span><br><span class="line">	sum=sum+(a[1]&gt;=b[2]?b[2]:a[1]);</span><br><span class="line">	sum=sum+(a[2]&gt;=b[0]?b[0]:a[2]);</span><br><span class="line">	printf(&quot;%lld&quot;,sum);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT 乙</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--数组解题</title>
    <url>/2020/01/09/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E6%95%B0%E7%BB%84%E8%A7%A3%E9%A2%98/</url>
    <content><![CDATA[<h3 id="1-开灯问题"><a href="#1-开灯问题" class="headerlink" title="1.开灯问题"></a>1.开灯问题</h3><h4 id="描述-有-n-盏灯，编号为-1-n，第-1-个人把所有灯打开，第-2-个人按下所有编号为-2-的倍数的开关（这些灯将被关掉），第-3-个人按下所有编号为-3-的倍数的开关（其中关掉的灯将被打开，开着的灯将被关闭），依此类推。一共有-k-个人，问最后有哪些灯开着？"><a href="#描述-有-n-盏灯，编号为-1-n，第-1-个人把所有灯打开，第-2-个人按下所有编号为-2-的倍数的开关（这些灯将被关掉），第-3-个人按下所有编号为-3-的倍数的开关（其中关掉的灯将被打开，开着的灯将被关闭），依此类推。一共有-k-个人，问最后有哪些灯开着？" class="headerlink" title="描述: 有 n 盏灯，编号为 1~n，第 1 个人把所有灯打开，第 2 个人按下所有编号为 2 的倍数的开关（这些灯将被关掉），第 3 个人按下所有编号为 3 的倍数的开关（其中关掉的灯将被打开，开着的灯将被关闭），依此类推。一共有 k 个人，问最后有哪些灯开着？"></a>描述: 有 n 盏灯，编号为 1~n，第 1 个人把所有灯打开，第 2 个人按下所有编号为 2 的倍数的开关（这些灯将被关掉），第 3 个人按下所有编号为 3 的倍数的开关（其中关掉的灯将被打开，开着的灯将被关闭），依此类推。一共有 k 个人，问最后有哪些灯开着？</h4><h4 id="输入"><a href="#输入" class="headerlink" title="输入:"></a>输入:</h4><h5 id="输入一组数据-n和k"><a href="#输入一组数据-n和k" class="headerlink" title="输入一组数据:n和k"></a>输入一组数据:n和k</h5><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><h5 id="输出开着灯的编号"><a href="#输出开着灯的编号" class="headerlink" title="输出开着灯的编号"></a>输出开着灯的编号</h5><h4 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h4><pre><code>7 3</code></pre><h4 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h4><pre><code>1 5 6 7</code></pre><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int light[1005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,k,count=0;</span><br><span class="line">	memset(light,0,sizeof(light));  //memset()函数可将数组进行初始化为0或者-1。sizeof()可求整型数组的长度，strlen()可求字符数组的长度。</span><br><span class="line">	scanf(&quot;%d %d&quot;,&amp;n,&amp;k);</span><br><span class="line">	for(int i=1;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		for(int j=1;j&lt;=k;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(i%j==0)</span><br><span class="line">				light[i]++;			//如果是第几个人的倍数，则进行标记计数。</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=1;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(light[i]%2)				//如果计数为奇数，则灯开着。</span><br><span class="line">		&#123;</span><br><span class="line">			if(count==0)	      </span><br><span class="line">				printf(&quot;%d&quot;,i);</span><br><span class="line">			else</span><br><span class="line">				printf(&quot; %d&quot;,i);</span><br><span class="line">			count++;	</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-剩下的树"><a href="#2-剩下的树" class="headerlink" title="2.剩下的树"></a>2.剩下的树</h3><h4 id="有一个长度为整数L-1-lt-L-lt-10000-的马路，可以想象成数轴上长度为L的一个线段，起点是坐标原点，在每个整数坐标点有一棵树，即在0-1-2，…，L共L-1个位置上有L-1棵树。现在要移走一些树，移走的树的区间用一对数字表示，如-100-200表示移走从100到200之间（包括端点）所有的树。可能有M-1-lt-M-lt-100-个区间，区间之间可能有重叠。现在要求移走所有区间的树之后剩下的树的个数。"><a href="#有一个长度为整数L-1-lt-L-lt-10000-的马路，可以想象成数轴上长度为L的一个线段，起点是坐标原点，在每个整数坐标点有一棵树，即在0-1-2，…，L共L-1个位置上有L-1棵树。现在要移走一些树，移走的树的区间用一对数字表示，如-100-200表示移走从100到200之间（包括端点）所有的树。可能有M-1-lt-M-lt-100-个区间，区间之间可能有重叠。现在要求移走所有区间的树之后剩下的树的个数。" class="headerlink" title="有一个长度为整数L(1&lt;=L&lt;=10000)的马路，可以想象成数轴上长度为L的一个线段，起点是坐标原点，在每个整数坐标点有一棵树，即在0,1,2，…，L共L+1个位置上有L+1棵树。现在要移走一些树，移走的树的区间用一对数字表示，如 100 200表示移走从100到200之间（包括端点）所有的树。可能有M(1&lt;=M&lt;=100)个区间，区间之间可能有重叠。现在要求移走所有区间的树之后剩下的树的个数。"></a>有一个长度为整数L(1&lt;=L&lt;=10000)的马路，可以想象成数轴上长度为L的一个线段，起点是坐标原点，在每个整数坐标点有一棵树，即在0,1,2，…，L共L+1个位置上有L+1棵树。现在要移走一些树，移走的树的区间用一对数字表示，如 100 200表示移走从100到200之间（包括端点）所有的树。可能有M(1&lt;=M&lt;=100)个区间，区间之间可能有重叠。现在要求移走所有区间的树之后剩下的树的个数。</h4><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入:"></a>输入:</h4><h5 id="两个整数L-1-lt-L-lt-10000-和M-1-lt-M-lt-100-。接下来有M组整数，每组有一对数字。"><a href="#两个整数L-1-lt-L-lt-10000-和M-1-lt-M-lt-100-。接下来有M组整数，每组有一对数字。" class="headerlink" title="两个整数L(1&lt;=L&lt;=10000)和M(1&lt;=M&lt;=100)。接下来有M组整数，每组有一对数字。"></a>两个整数L(1&lt;=L&lt;=10000)和M(1&lt;=M&lt;=100)。接下来有M组整数，每组有一对数字。</h5><h4 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h4><h5 id="可能有多组输入数据，对于每组输入数据，输出一个数，表示移走所有区间的树之后剩下的树的个数。"><a href="#可能有多组输入数据，对于每组输入数据，输出一个数，表示移走所有区间的树之后剩下的树的个数。" class="headerlink" title="可能有多组输入数据，对于每组输入数据，输出一个数，表示移走所有区间的树之后剩下的树的个数。"></a>可能有多组输入数据，对于每组输入数据，输出一个数，表示移走所有区间的树之后剩下的树的个数。</h5><h4 id="样例输入：-1"><a href="#样例输入：-1" class="headerlink" title="样例输入："></a>样例输入：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 2</span><br><span class="line">1 2</span><br><span class="line">0 2</span><br><span class="line">11 2</span><br><span class="line">1 5</span><br><span class="line">4 7</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>

<h4 id="样例输出：-1"><a href="#样例输出：-1" class="headerlink" title="样例输出："></a>样例输出：</h4><pre><code>2
5</code></pre><h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int tree[10005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int L,M;</span><br><span class="line">	while(scanf(&quot;%d %d&quot;,&amp;L,&amp;M)&amp;&amp; L||M )</span><br><span class="line">	&#123;</span><br><span class="line">		memset(tree,0,sizeof(tree));</span><br><span class="line">		int count=0;</span><br><span class="line">		while(M--)</span><br><span class="line">		&#123;</span><br><span class="line">			int x,y;</span><br><span class="line">			getchar();</span><br><span class="line">			scanf(&quot;%d %d&quot;,&amp;x,&amp;y);</span><br><span class="line">			for(int i=x;i&lt;=y;i++)</span><br><span class="line">				tree[i]=1;		       //如果该树在本区间，则进行标记</span><br><span class="line">		&#125;</span><br><span class="line">		for(int i=0;i&lt;=L;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(tree[i]==0)			   //如果该树未被标记，该树为剩下的树，再进行计数。</span><br><span class="line">				count++;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;%d\n&quot;,count);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--结构体</title>
    <url>/2020/01/07/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    <content><![CDATA[<h3 id="1-结构体的定义"><a href="#1-结构体的定义" class="headerlink" title="1.结构体的定义"></a>1.结构体的定义</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct Name&#123;</span><br><span class="line">//一些基本的数据结构或者自定义的数据类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-访问结构体内的元素"><a href="#2-访问结构体内的元素" class="headerlink" title="2.访问结构体内的元素"></a>2.访问结构体内的元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct student&#123;</span><br><span class="line">	int id;</span><br><span class="line">	char name[20];</span><br><span class="line">	student *next;</span><br><span class="line">&#125;stu,*p;</span><br></pre></td></tr></table></figure>

<h4 id="1-方法一"><a href="#1-方法一" class="headerlink" title="(1)方法一:"></a>(1)方法一:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stu.id;</span><br><span class="line">stu.name;</span><br><span class="line">stu.next;</span><br></pre></td></tr></table></figure>

<h4 id="2-方法二"><a href="#2-方法二" class="headerlink" title="(2)方法二:"></a>(2)方法二:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(*p).id;</span><br><span class="line">(*p).name;</span><br><span class="line">(*p).next;</span><br></pre></td></tr></table></figure>

<h4 id="3-方法三"><a href="#3-方法三" class="headerlink" title="(3)方法三:"></a>(3)方法三:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p-&gt;id;</span><br><span class="line">p-&gt;name;</span><br><span class="line">p-&gt;next;</span><br></pre></td></tr></table></figure>

<h3 id="3-结构体的初始化"><a href="#3-结构体的初始化" class="headerlink" title="3.结构体的初始化"></a>3.结构体的初始化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct student&#123;</span><br><span class="line">	int id;</span><br><span class="line">	char gender;</span><br><span class="line">	student()&#123;&#125;</span><br><span class="line">	student(int _id)&#123;</span><br><span class="line">	id=_id;</span><br><span class="line">	&#125;</span><br><span class="line">	student(int _id,char _gender)&#123;</span><br><span class="line">	id=_id;</span><br><span class="line">	gender=_gender;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4.例题:"></a>4.例题:</h3><h4 id="设有若干个人员的数据，其中包含学生和教师。学生的数据中包括：号码、姓名、性别、职业、班级。教师的数据包括：号码、姓名、性别、职业、职务。可以看出，学生和教师所包含的数据是不同的。现在要求把这些数据放在同一个表格中储存，使用结构体中的共用体实现。结构体定义如下："><a href="#设有若干个人员的数据，其中包含学生和教师。学生的数据中包括：号码、姓名、性别、职业、班级。教师的数据包括：号码、姓名、性别、职业、职务。可以看出，学生和教师所包含的数据是不同的。现在要求把这些数据放在同一个表格中储存，使用结构体中的共用体实现。结构体定义如下：" class="headerlink" title="设有若干个人员的数据，其中包含学生和教师。学生的数据中包括：号码、姓名、性别、职业、班级。教师的数据包括：号码、姓名、性别、职业、职务。可以看出，学生和教师所包含的数据是不同的。现在要求把这些数据放在同一个表格中储存，使用结构体中的共用体实现。结构体定义如下："></a>设有若干个人员的数据，其中包含学生和教师。学生的数据中包括：号码、姓名、性别、职业、班级。教师的数据包括：号码、姓名、性别、职业、职务。可以看出，学生和教师所包含的数据是不同的。现在要求把这些数据放在同一个表格中储存，使用结构体中的共用体实现。结构体定义如下：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">    int num;</span><br><span class="line">    char name[10];</span><br><span class="line">    char sex;</span><br><span class="line">    char job;</span><br><span class="line">    union &#123;</span><br><span class="line">        int class;</span><br><span class="line">        char position[10];</span><br><span class="line">    &#125;category;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="在以上的结构体中，如果job项为s（学生），则第5项为class（班级）；如果job项是t（教师），则第5项为position（职务）。"><a href="#在以上的结构体中，如果job项为s（学生），则第5项为class（班级）；如果job项是t（教师），则第5项为position（职务）。" class="headerlink" title="在以上的结构体中，如果job项为s（学生），则第5项为class（班级）；如果job项是t（教师），则第5项为position（职务）。"></a>在以上的结构体中，如果job项为s（学生），则第5项为class（班级）；如果job项是t（教师），则第5项为position（职务）。</h4><h4 id="输入几个人员的数据，将其保存在以上包含共用体的结构体数组中，并输出"><a href="#输入几个人员的数据，将其保存在以上包含共用体的结构体数组中，并输出" class="headerlink" title="输入几个人员的数据，将其保存在以上包含共用体的结构体数组中，并输出"></a>输入几个人员的数据，将其保存在以上包含共用体的结构体数组中，并输出</h4><h4 id="Sample-input"><a href="#Sample-input" class="headerlink" title="Sample input:"></a>Sample input:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">101 Li f s 501</span><br><span class="line">102 Wang m t prof</span><br></pre></td></tr></table></figure>

<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">101 Li f s 501</span><br><span class="line">102 Wang m t prof</span><br></pre></td></tr></table></figure>

<h4 id="解答如下"><a href="#解答如下" class="headerlink" title="解答如下:"></a>解答如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">struct person&#123;</span><br><span class="line">    int num;</span><br><span class="line">    char name[10];</span><br><span class="line">    char sex;</span><br><span class="line">    char job;</span><br><span class="line">    union &#123;</span><br><span class="line">        int classnum;</span><br><span class="line">        char position[10];</span><br><span class="line">    &#125;category;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	person p[20];</span><br><span class="line">	int n;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	for(int i=0;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%d %s %c %c&quot;,&amp;p[i].num,p[i].name,&amp;p[i].sex,&amp;p[i].job);</span><br><span class="line">		if(p[i].job==&apos;s&apos;)</span><br><span class="line">			scanf(&quot; %d&quot;,&amp;p[i].category.classnum);</span><br><span class="line">		else</span><br><span class="line">			scanf(&quot; %s&quot;,p[i].category.position);</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=0;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%d %s %c %c&quot;,p[i].num,p[i].name,p[i].sex,p[i].job);</span><br><span class="line">		if(p[i].job==&apos;s&apos;)</span><br><span class="line">			printf(&quot; %d\n&quot;,p[i].category.classnum);</span><br><span class="line">		else</span><br><span class="line">			printf(&quot; %s\n&quot;,p[i].category.position);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体练习"><a href="#结构体练习" class="headerlink" title="结构体练习"></a><a href="http://codeup.cn/contest.php?cid=100000572" target="_blank" rel="noopener">结构体练习</a></h2>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--指针</title>
    <url>/2020/01/05/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h3 id="1-指针变量的赋值"><a href="#1-指针变量的赋值" class="headerlink" title="1.指针变量的赋值"></a>1.指针变量的赋值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a;</span><br><span class="line">int* p=&amp;a;</span><br></pre></td></tr></table></figure>

<p>上面的代码也可以写成:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a;</span><br><span class="line">int* p;</span><br><span class="line">p=&amp;a;</span><br></pre></td></tr></table></figure>

<h3 id="2-指针变量作为函数参数-数值交换"><a href="#2-指针变量作为函数参数-数值交换" class="headerlink" title="2.指针变量作为函数参数(数值交换)"></a>2.指针变量作为函数参数(数值交换)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void change(int *p,int *q)</span><br><span class="line">&#123;</span><br><span class="line">	int temp=*p;</span><br><span class="line">	*p=*q;</span><br><span class="line">	*q=temp;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a=1,b=2;</span><br><span class="line">	printf(&quot;%d %d\n&quot;,a,b);</span><br><span class="line">	change(&amp;a,&amp;b);</span><br><span class="line">	printf(&quot;%d %d\n&quot;,a,b);</span><br><span class="line">	return 0;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-指针的引用进行数值交换"><a href="#3-指针的引用进行数值交换" class="headerlink" title="3.指针的引用进行数值交换"></a>3.指针的引用进行数值交换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void change(int &amp;p,int &amp;q)</span><br><span class="line">&#123;</span><br><span class="line">	int temp=p;</span><br><span class="line">	p=q;</span><br><span class="line">	q=temp;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a=1,b=2;</span><br><span class="line">	printf(&quot;%d %d\n&quot;,a,b);</span><br><span class="line">	change(a,b);</span><br><span class="line">	printf(&quot;%d %d\n&quot;,a,b);</span><br><span class="line">	return 0;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-指针变量作为函数参数对数组进行交换"><a href="#4-指针变量作为函数参数对数组进行交换" class="headerlink" title="4.指针变量作为函数参数对数组进行交换"></a>4.指针变量作为函数参数对数组进行交换</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void change(char** a,char** b)//输入的参数是二级指针（指针的地址）</span><br><span class="line">&#123;</span><br><span class="line">    char* temp;//对指针（内容的地址）进行改变</span><br><span class="line">    temp= *a;//改变一件事，要传入它的地址，改变地址，就要传入地址的地址 </span><br><span class="line">    *a= *b;//地址和指针temp等同 </span><br><span class="line">    *b=temp;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a[10]=&quot;abcd&quot;,b[10]=&quot;wxyz&quot;;</span><br><span class="line">    char *p=a,*q=b;</span><br><span class="line">    printf(&quot;%s %s\n&quot;,p,q);</span><br><span class="line">    change(&amp;p,&amp;q);</span><br><span class="line">    printf(&quot;%s %s\n&quot;,p,q); </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void change(char *p,char *q)</span><br><span class="line">&#123;</span><br><span class="line">	char temp[10];</span><br><span class="line">	strcpy(temp,p);</span><br><span class="line">	strcpy(p,q);</span><br><span class="line">	strcpy(q,temp);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char a[10]=&quot;abcd&quot;,b[10]=&quot;wxyz&quot;;</span><br><span class="line">	printf(&quot;%s %s\n&quot;,a,b);</span><br><span class="line">	change(a,b);</span><br><span class="line">	printf(&quot;%s %s\n&quot;,a,b);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="指针练习"><a href="#指针练习" class="headerlink" title="指针练习"></a><a href="http://codeup.cn/contest.php?cid=100000571" target="_blank" rel="noopener">指针练习</a></h2>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--基本输入输出(二)</title>
    <url>/2020/01/03/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA(%E4%BA%8C)/</url>
    <content><![CDATA[<h3 id="1-输入scanf-sscanf-输出printf-sprintf"><a href="#1-输入scanf-sscanf-输出printf-sprintf" class="headerlink" title="1.输入scanf() sscanf()输出printf() sprintf()"></a>1.输入scanf() sscanf()输出printf() sprintf()</h3><h4 id="1-scanf-和printf"><a href="#1-scanf-和printf" class="headerlink" title="(1)scanf()和printf()"></a>(1)scanf()和printf()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(&quot;%d&quot;,n);</span><br></pre></td></tr></table></figure>

<pre><code>事实上上面的写法其实可以表示成下面的样子，其中screen表示屏幕:</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scanf(screen,&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(screen,&quot;%d&quot;,n);</span><br></pre></td></tr></table></figure>

<pre><code>可以发现，scanf的输入其实是把screen的内容以&quot;%d&quot;的格式传输到n中(即从左至右)。
而printf的输出则是将n以&quot;%d&quot;的格式传输到screen上(即从右至左)。</code></pre><h4 id="2-sscanf-和sprintf"><a href="#2-sscanf-和sprintf" class="headerlink" title="(2)sscanf()和sprintf()"></a>(2)sscanf()和sprintf()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char str[100]; </span><br><span class="line">sscanf(str,&quot;%d&quot;,&amp;n);</span><br><span class="line">sprintf(str,&quot;%d&quot;,n);</span><br></pre></td></tr></table></figure>

<pre><code>上面sscanf写法的作用是把字符数组str中的内容以&quot;%d&quot;的格式写到n中(仍然是从左至右)。</code></pre><p>​       而sprintf写法的作用是将n以”%d”的格式写到str字符数组中(从右至左)。</p>
<h3 id="2-scanf-和-cin"><a href="#2-scanf-和-cin" class="headerlink" title="2. scanf() 和 cin"></a>2. scanf() 和 cin</h3><h4 id="1-优点："><a href="#1-优点：" class="headerlink" title="(1)优点："></a>(1)优点：</h4><p>cin/cout：方便。<br>scanf/printf： 控制读入简单直观，读入时间快。</p>
<h4 id="2-缺点："><a href="#2-缺点：" class="headerlink" title="(2)缺点："></a>(2)缺点：</h4><p>cin/cout：控制输入数据时打起来比较麻烦，需要记一些函数，读入时间慢。<br>scanf/printf：容易打错。</p>
<h3 id="3-竞赛中常见输入格式"><a href="#3-竞赛中常见输入格式" class="headerlink" title="3.竞赛中常见输入格式"></a>3.竞赛中常见输入格式</h3><h4 id="1-while···EOF型"><a href="#1-while···EOF型" class="headerlink" title="(1)while···EOF型"></a>(1)while···EOF型</h4><p>​     scanf函数的返回值为其成功读入的参数的个数。<br>​     scanf(“%d%d”,&amp;a,&amp;b)成功读入两个整数a,b那么scanf的返回值就是2。<br>​     正常控制台的输入一般是不会失败的，只有在读取文件时达到文件末尾导致的无法读取现象，才会读入失败，这个时候，scanf函数会返回-1而不是0，且c语言中使用EOF(即End Of File)来代表-1。<br>读入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int n;</span><br><span class="line">while(scanf(&quot;%d&quot;,&amp;n) != EOF)&#123;</span><br><span class="line">       ···</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>读入字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(scanf(&quot;%s&quot;,str) != EOF)&#123;</span><br><span class="line">       ···</span><br><span class="line">&#125;</span><br><span class="line">while(gets(str) != NULL)&#123;</span><br><span class="line">       ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-while···break型"><a href="#2-while···break型" class="headerlink" title="(2)while···break型"></a>(2)while···break型</h4><p>​     这种类型是while···EOF型的延伸，要求当输入的数据满足某个条件时停止输入。<br>​    这种类型有两种写法，一种是在while···EOF的内部进行判断，当满足退出条件时中断当前while循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a,b;</span><br><span class="line">while(scanf(&quot;%d %d&quot;,&amp;a,&amp;b) != EOF)&#123;</span><br><span class="line">       if(a==0&amp;&amp;b==0)</span><br><span class="line">           break;</span><br><span class="line">       printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>   另一种简洁的写法是，把退出条件的判断放到while语句中，令其与scanf用逗号隔开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a,b;</span><br><span class="line">while(scanf(&quot;%d %d&quot;,&amp;a,&amp;b) , a || b)&#123;</span><br><span class="line">       printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-while-T-型"><a href="#3-while-T-型" class="headerlink" title="(3)while(T- -)型"></a>(3)while(T- -)型</h4><p>   在这种类型中通常给出测试数据的组数，然后才给出相应数量组数的输入数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int T,a,b;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">while(T--)</span><br><span class="line">&#123;</span><br><span class="line">	scanf(&quot;%d %d&quot;,&amp;a,&amp;b);</span><br><span class="line">	printf(&quot;%d&quot;,a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-竞赛中常见的输出格式"><a href="#4-竞赛中常见的输出格式" class="headerlink" title="4.竞赛中常见的输出格式"></a>4.竞赛中常见的输出格式</h3><h4 id="1-正常输出"><a href="#1-正常输出" class="headerlink" title="(1)正常输出"></a>(1)正常输出</h4><p>   这种输出类型要求需要每两组输出数据中间没有额外的空行和空格</p>
<h4 id="2-每组数据输出之后都要额外增加一个空行"><a href="#2-每组数据输出之后都要额外增加一个空行" class="headerlink" title="(2)每组数据输出之后都要额外增加一个空行"></a>(2)每组数据输出之后都要额外增加一个空行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a,b;</span><br><span class="line">while(scanf(&quot;%d %d&quot;,&amp;a,&amp;b) != EOF)&#123;</span><br><span class="line">       printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">       printf(&quot;\n&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-两组数据之间有一个空行，最后一组数据后面没有空行"><a href="#3-两组数据之间有一个空行，最后一组数据后面没有空行" class="headerlink" title="(3)两组数据之间有一个空行，最后一组数据后面没有空行"></a>(3)两组数据之间有一个空行，最后一组数据后面没有空行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int T,a,b;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">while(T--)</span><br><span class="line">&#123;</span><br><span class="line">	scanf(&quot;%d %d&quot;,&amp;a,&amp;b);</span><br><span class="line">	printf(&quot;%d&quot;,a+b);</span><br><span class="line">	if(T&gt;0)</span><br><span class="line">	   printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与这种要求类似的要求是:输出一行N个整数，每两个整数之间用空格隔开，最后一个整数后面不允许加上空格,做法类似.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(int i=0;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;%d&quot;,s[i]);</span><br><span class="line">	if(i&lt;N-1)</span><br><span class="line">		printf(&quot; &quot;);</span><br><span class="line">	else</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="竞赛常见输入输出练习"><a href="#竞赛常见输入输出练习" class="headerlink" title="竞赛常见输入输出练习"></a><a href="http://codeup.cn/contest.php?cid=100000574" target="_blank" rel="noopener">竞赛常见输入输出练习</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--基本输入输出(一)</title>
    <url>/2020/01/01/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA(%E4%B8%80)/</url>
    <content><![CDATA[<h3 id="1-浅析scanf-和gets-和getchar"><a href="#1-浅析scanf-和gets-和getchar" class="headerlink" title="1.浅析scanf()和gets()和getchar()"></a>1.浅析scanf()和gets()和getchar()</h3><h4 id="1-1-scanf-中-c格式可以读入单个字符包含空格和换行符"><a href="#1-1-scanf-中-c格式可以读入单个字符包含空格和换行符" class="headerlink" title="1.1 scanf()中%c格式可以读入单个字符包含空格和换行符"></a>1.1 scanf()中%c格式可以读入单个字符包含空格和换行符</h4><p><img src="http://p.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7.PNG" alt="图片"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char a,b,c;</span><br><span class="line">	scanf(&quot;%c%c%c&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">	printf(&quot;%c%c%c&quot;,a,b,c);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-scanf-中-s格式可以读入一行字符串，但读入时以空格和换行作为结束标志"><a href="#1-2-scanf-中-s格式可以读入一行字符串，但读入时以空格和换行作为结束标志" class="headerlink" title="1.2 scanf()中%s格式可以读入一行字符串，但读入时以空格和换行作为结束标志"></a>1.2 scanf()中%s格式可以读入一行字符串，但读入时以空格和换行作为结束标志</h4><p><img src="http://p.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132251679424622500.PNG" alt="图"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char a[10];</span><br><span class="line">	scanf(&quot;%s&quot;,&amp;a);</span><br><span class="line">	printf(&quot;%s&quot;,a);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-getchar-函数"><a href="#2-getchar-函数" class="headerlink" title="2 getchar()函数"></a>2 getchar()函数</h4><h5 id="一个字符一个字符的读入"><a href="#一个字符一个字符的读入" class="headerlink" title="一个字符一个字符的读入"></a>一个字符一个字符的读入</h5><p><img src="http://p.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132251687153997500.PNG" alt="图"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char a,b,c;</span><br><span class="line">	a=getchar();</span><br><span class="line">	getchar();</span><br><span class="line">	b=getchar();</span><br><span class="line">	c=getchar();</span><br><span class="line">	putchar(a);</span><br><span class="line">	putchar(b);</span><br><span class="line">	putchar(c);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-gets-函数"><a href="#3-gets-函数" class="headerlink" title="3 gets()函数"></a>3 gets()函数</h4><h5 id="就算输入的字符串中有空格也可以直接输入，直至回车结束。"><a href="#就算输入的字符串中有空格也可以直接输入，直至回车结束。" class="headerlink" title="就算输入的字符串中有空格也可以直接输入，直至回车结束。"></a>就算输入的字符串中有空格也可以直接输入，直至回车结束。</h5><p><img src="http://p.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132251696832591250.PNG" alt="图"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char str[10];</span><br><span class="line">	gets(str);</span><br><span class="line">	printf(&quot;%s&quot;,str);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-getline-函数"><a href="#4-getline-函数" class="headerlink" title="4 getline()函数"></a>4 getline()函数</h4><h5 id="想读入一整行，则使用getline函数。"><a href="#想读入一整行，则使用getline函数。" class="headerlink" title="想读入一整行，则使用getline函数。"></a>想读入一整行，则使用getline函数。</h5><p><img src="http://p.caigoubao.cc/628034/%E6%8D%95%E8%8E%B7_132251701887903750.PNG" alt="图"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char str[100];</span><br><span class="line">	cin.getline(str,100);</span><br><span class="line">	cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-例题-统计字符串"><a href="#2-例题-统计字符串" class="headerlink" title="2.例题:统计字符串"></a>2.例题:统计字符串</h3><h4 id="描述-1-输入一行字符，分别统计出其中英文字母，数字，空格和其他字符的个数。"><a href="#描述-1-输入一行字符，分别统计出其中英文字母，数字，空格和其他字符的个数。" class="headerlink" title="描述: 1.输入一行字符，分别统计出其中英文字母，数字，空格和其他字符的个数。"></a>描述: 1.输入一行字符，分别统计出其中英文字母，数字，空格和其他字符的个数。</h4><h4 id="输入"><a href="#输入" class="headerlink" title="输入:"></a>输入:</h4><h5 id="一行字符"><a href="#一行字符" class="headerlink" title="一行字符"></a>一行字符</h5><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><h5 id="统计值"><a href="#统计值" class="headerlink" title="统计值"></a>统计值</h5><h4 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h4><pre><code>akls&amp;jflj123 #sadf918u32*4 asdf91(u)</code></pre><h4 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h4><pre><code>18 11 2 5</code></pre><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char c;</span><br><span class="line">	int letters=0,numbers=0,spaces=0,others=0;</span><br><span class="line">	while((c=getchar())!=&apos;\n&apos;)    //逐个读取字符，包含空格，直至读取到换行符，并赋值给字符c，再进行判断。</span><br><span class="line">	&#123;</span><br><span class="line">		if(c==&apos; &apos;)</span><br><span class="line">			spaces++;</span><br><span class="line">		else if(c&gt;=&apos;0&apos;&amp;&amp;c&lt;=&apos;9&apos;)</span><br><span class="line">			numbers++;</span><br><span class="line">		else if((c&gt;=&apos;A&apos;&amp;&amp;c&lt;=&apos;Z&apos;)||(c&gt;=&apos;a&apos;&amp;&amp;c&lt;=&apos;z&apos;))</span><br><span class="line">			letters++;</span><br><span class="line">		else</span><br><span class="line">			others++;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%d %d %d %d\n&quot;,letters,numbers,spaces,others);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构(单链表的逆置)</title>
    <url>/2019/09/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE)/</url>
    <content><![CDATA[<p>注意事项：逆置后，一定要将头结点指向首元结点，修改尾结点的指向，并且将尾结点的next域置为空，可以通过逆置后再进行尾插测试结果是否正确。</p>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><h4 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想:"></a>算法思想:</h4><h5 id="从原链表的首元结点开始，依次遍历，将后一节点指向前一个节点，直至原链表的节点为空。"><a href="#从原链表的首元结点开始，依次遍历，将后一节点指向前一个节点，直至原链表的节点为空。" class="headerlink" title="从原链表的首元结点开始，依次遍历，将后一节点指向前一个节点，直至原链表的节点为空。"></a>从原链表的首元结点开始，依次遍历，将后一节点指向前一个节点，直至原链表的节点为空。</h5><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template &lt;class ElemType&gt;</span><br><span class="line">	void LinkList&lt;ElemType&gt;::Inverse()</span><br><span class="line">	&#123;</span><br><span class="line">		LinkNode&lt;ElemType&gt; *p,*q,*s;</span><br><span class="line">		p=head-&gt;next;</span><br><span class="line">		q=p-&gt;next;</span><br><span class="line">		while(q)</span><br><span class="line">		&#123;</span><br><span class="line">			s=q-&gt;next;</span><br><span class="line">			q-&gt;next=p;</span><br><span class="line">			p=q;</span><br><span class="line">			q=s;</span><br><span class="line">		&#125;</span><br><span class="line">		tail=head-&gt;next;</span><br><span class="line">		head-&gt;next-&gt;next=NULL;</span><br><span class="line">		head-&gt;next=p;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><h4 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想:"></a>算法思想:</h4><h5 id="首先让原链表的尾节点指向首元结点，将各个节点依次紧贴尾结点的后面进行尾插，直至执行到原链表尾结点的前一个节点。"><a href="#首先让原链表的尾节点指向首元结点，将各个节点依次紧贴尾结点的后面进行尾插，直至执行到原链表尾结点的前一个节点。" class="headerlink" title="首先让原链表的尾节点指向首元结点，将各个节点依次紧贴尾结点的后面进行尾插，直至执行到原链表尾结点的前一个节点。"></a>首先让原链表的尾节点指向首元结点，将各个节点依次紧贴尾结点的后面进行尾插，直至执行到原链表尾结点的前一个节点。</h5><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template &lt;class ElemType&gt;</span><br><span class="line">	void LinkList&lt;ElemType&gt;::Inverse()</span><br><span class="line">	&#123;</span><br><span class="line">		int i=1;</span><br><span class="line">		LinkNode&lt;ElemType&gt; *p,*q;</span><br><span class="line">		p=head-&gt;next;</span><br><span class="line">		while(i&lt;len)</span><br><span class="line">		&#123;</span><br><span class="line">			q=p-&gt;next;</span><br><span class="line">			p-&gt;next=tail-&gt;next;</span><br><span class="line">			tail-&gt;next=p;</span><br><span class="line">			p=q;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		tail=head-&gt;next;</span><br><span class="line">		head-&gt;next=q;</span><br><span class="line">		tail-&gt;next=NULL;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><h5 id="算法思想-首先让链表首元节点初始为空，表中节点从原链表中依次“删除”，再逐个插入链表的表头（即“头插”到逆置链表中），使它成为逆置链表的“新”的第一个结点，直至原链表为空。"><a href="#算法思想-首先让链表首元节点初始为空，表中节点从原链表中依次“删除”，再逐个插入链表的表头（即“头插”到逆置链表中），使它成为逆置链表的“新”的第一个结点，直至原链表为空。" class="headerlink" title="算法思想:首先让链表首元节点初始为空，表中节点从原链表中依次“删除”，再逐个插入链表的表头（即“头插”到逆置链表中），使它成为逆置链表的“新”的第一个结点，直至原链表为空。"></a>算法思想:首先让链表首元节点初始为空，表中节点从原链表中依次“删除”，再逐个插入链表的表头（即“头插”到逆置链表中），使它成为逆置链表的“新”的第一个结点，直至原链表为空。</h5><h4 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template &lt;class ElemType&gt;</span><br><span class="line">	void LinkList&lt;ElemType&gt;::Inverse()</span><br><span class="line">	&#123;</span><br><span class="line">		LinkNode&lt;ElemType&gt; *p=head-&gt;next,*q;</span><br><span class="line">		tail=head-&gt;next;</span><br><span class="line">		head-&gt;next=NULL;</span><br><span class="line">		while(p)</span><br><span class="line">		&#123;</span><br><span class="line">			q=p;</span><br><span class="line">			p=p-&gt;next;</span><br><span class="line">			q-&gt;next=head-&gt;next;</span><br><span class="line">			head-&gt;next=q;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>win10下使用anaconda安装pytorch和torchvision</title>
    <url>/2019/09/20/win10%E4%B8%8B%E4%BD%BF%E7%94%A8anaconda%E5%AE%89%E8%A3%85pytorch%E5%92%8Ctorchvision/</url>
    <content><![CDATA[<h3 id="1-输入sscanf-scanf-输出sprintf-printf"><a href="#1-输入sscanf-scanf-输出sprintf-printf" class="headerlink" title="1.输入sscanf scanf 输出sprintf printf"></a>1.输入sscanf scanf 输出sprintf printf</h3><h4 id="1-scanf-和printf"><a href="#1-scanf-和printf" class="headerlink" title="(1)scanf()和printf()"></a>(1)scanf()和printf()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(&quot;%d&quot;,n);</span><br></pre></td></tr></table></figure>

<p>​      事实上上面的写法其实可以表示成下面的样子，其中screen表示屏幕:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scanf(screen,&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(screen,&quot;%d&quot;,n);</span><br></pre></td></tr></table></figure>

<p>​      可以发现，scanf的输入其实是把screen的内容以”%d”的格式传输到n中(即从左至右)。<br>      而printf的输出则是将n以”%d”的格式传输到screen上(即从右至左)。</p>
<h4 id="2-sscanf-和sprintf"><a href="#2-sscanf-和sprintf" class="headerlink" title="(2)sscanf()和sprintf()"></a>(2)sscanf()和sprintf()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char str[100]; </span><br><span class="line">sscanf(str,&quot;%d&quot;,&amp;n);</span><br><span class="line">sprintf(str,&quot;%d&quot;,n);</span><br></pre></td></tr></table></figure>

<p>​       上面sscanf写法的作用是把字符数组str中的内容以”%d”的格式写到n中(仍然是从左至右)。<br>​       而sprintf写法的作用是将n以”%d”的格式写到str字符数组中(从右至左)。</p>
<h3 id="2-scanf-和-cin"><a href="#2-scanf-和-cin" class="headerlink" title="2. scanf() 和 cin"></a>2. scanf() 和 cin</h3><h4 id="1-优点："><a href="#1-优点：" class="headerlink" title="(1)优点："></a>(1)优点：</h4><p>cin/cout：方便。<br>scanf/printf： 控制读入简单直观，读入时间快。</p>
<h4 id="2-缺点："><a href="#2-缺点：" class="headerlink" title="(2)缺点："></a>(2)缺点：</h4><p>cin/cout：控制输入数据时打起来比较麻烦，需要记一些函数，读入时间慢。<br>scanf/printf：容易打错。</p>
<h3 id="3-竞赛中常见输入格式"><a href="#3-竞赛中常见输入格式" class="headerlink" title="3.竞赛中常见输入格式"></a>3.竞赛中常见输入格式</h3><h4 id="1-while···EOF型"><a href="#1-while···EOF型" class="headerlink" title="(1)while···EOF型"></a>(1)while···EOF型</h4><p>​     scanf函数的返回值为其成功读入的参数的个数。<br>​     scanf(“%d%d”,&amp;a,&amp;b)成功读入两个整数a,b那么scanf的返回值就是2。<br>​     正常控制台的输入一般是不会失败的，只有在读取文件时达到文件末尾导致的无法读取现象，才会读入失败，这个时候，scanf函数会返回-1而不是0，且c语言中使用EOF(即End Of File)来代表-1。<br>读入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int n;</span><br><span class="line">while(scanf(&quot;%d&quot;,&amp;n) != EOF)&#123;</span><br><span class="line">       ···</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>读入字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(scanf(&quot;%s&quot;,str) != EOF)&#123;</span><br><span class="line">       ···</span><br><span class="line">&#125;</span><br><span class="line">while(gets(str) != NULL)&#123;</span><br><span class="line">       ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-while···break型"><a href="#2-while···break型" class="headerlink" title="(2)while···break型"></a>(2)while···break型</h4><p>​     这种类型是while···EOF型的延伸，要求当输入的数据满足某个条件时停止输入。<br>​    这种类型有两种写法，一种是在while···EOF的内部进行判断，当满足退出条件时中断当前while循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a,b;</span><br><span class="line">while(scanf(&quot;%d %d&quot;,&amp;a,&amp;b) != EOF)&#123;</span><br><span class="line">       if(a==0&amp;&amp;b==0)</span><br><span class="line">           break;</span><br><span class="line">       printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>   另一种简洁的写法是，把退出条件的判断放到while语句中，令其与scanf用逗号隔开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a,b;</span><br><span class="line">while(scanf(&quot;%d %d&quot;,&amp;a,&amp;b) , a || b)&#123;</span><br><span class="line">       printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-while-T–-型"><a href="#3-while-T–-型" class="headerlink" title="(3)while(T–)型"></a>(3)while(T–)型</h4><p>   在这种类型中通常给出测试数据的组数，然后才给出相应数量组数的输入数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int T,a,b;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">while(T--)</span><br><span class="line">&#123;</span><br><span class="line">	scanf(&quot;%d %d&quot;,&amp;a,&amp;b);</span><br><span class="line">	printf(&quot;%d&quot;,a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-竞赛中常见的输出格式"><a href="#4-竞赛中常见的输出格式" class="headerlink" title="4.竞赛中常见的输出格式"></a>4.竞赛中常见的输出格式</h3><h4 id="1-正常输出"><a href="#1-正常输出" class="headerlink" title="(1)正常输出"></a>(1)正常输出</h4><p>   这种输出类型要求需要每两组输出数据中间没有额外的空行和空格</p>
<h4 id="2-每组数据输出之后都要额外增加一个空行"><a href="#2-每组数据输出之后都要额外增加一个空行" class="headerlink" title="(2)每组数据输出之后都要额外增加一个空行"></a>(2)每组数据输出之后都要额外增加一个空行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a,b;</span><br><span class="line">while(scanf(&quot;%d %d&quot;,&amp;a,&amp;b) != EOF)&#123;</span><br><span class="line">       printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">       printf(&quot;\n&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-两组数据之间有一个空行，最后一组数据后面没有空行"><a href="#3-两组数据之间有一个空行，最后一组数据后面没有空行" class="headerlink" title="(3)两组数据之间有一个空行，最后一组数据后面没有空行"></a>(3)两组数据之间有一个空行，最后一组数据后面没有空行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int T,a,b;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">while(T--)</span><br><span class="line">&#123;</span><br><span class="line">	scanf(&quot;%d %d&quot;,&amp;a,&amp;b);</span><br><span class="line">	printf(&quot;%d&quot;,a+b);</span><br><span class="line">	if(T&gt;0)</span><br><span class="line">	   printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与这种要求类似的要求是:输出一行N个整数，每两个整数之间用空格隔开，最后一个整数后面不允许加上空格,做法类似.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(int i=0;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;%d&quot;,s[i]);</span><br><span class="line">	if(i&lt;N-1)</span><br><span class="line">		printf(&quot; &quot;);</span><br><span class="line">	else</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://codeup.cn/contest.php?cid=100000574" target="_blank" rel="noopener">竞赛常见输入输出练习</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客优化</tag>
      </tags>
  </entry>
  <entry>
    <title>免费图床工具的使用</title>
    <url>/2019/09/10/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="hexo-s生成静态网页时报错ERROR-ENOENT-no-such-file-or-directory"><a href="#hexo-s生成静态网页时报错ERROR-ENOENT-no-such-file-or-directory" class="headerlink" title="hexo s生成静态网页时报错ERROR ENOENT: no such file or directory"></a>hexo s生成静态网页时报错ERROR ENOENT: no such file or directory</h1><p><img src="https://s2.ax1x.com/2019/07/30/eJHbDO.png" alt="图片"></p>
<h3 id="blog-themes-next下主题配置文件-config-yml出现错误"><a href="#blog-themes-next下主题配置文件-config-yml出现错误" class="headerlink" title="blog\themes\next下主题配置文件_config.yml出现错误"></a>blog\themes\next下主题配置文件_config.yml出现错误</h3><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><h3 id="利用工具YAML-Validator检查主题配置文件-config-yml"><a href="#利用工具YAML-Validator检查主题配置文件-config-yml" class="headerlink" title="利用工具YAML Validator检查主题配置文件_config.yml"></a>利用工具<a href="http://tc.qj61.cn//" target="_blank" rel="noopener">YAML Validator</a>检查主题配置文件_config.yml</h3>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇文章</title>
    <url>/2019/08/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="1-标题："><a href="#1-标题：" class="headerlink" title="1.标题："></a>1.标题：</h1><p><em>效果如下</em>：</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h1 id="2-列表："><a href="#2-列表：" class="headerlink" title="2.列表："></a>2.列表：</h1><p><em>代码如下</em>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 列表1</span><br><span class="line">- 列表2</span><br><span class="line">    a 子列表a</span><br><span class="line">    b 子列表b</span><br><span class="line">- 列表3</span><br></pre></td></tr></table></figure>

<p><em>效果如下</em>：</p>
<ul>
<li>列表1</li>
<li>列表2<br>  a 子列表a<br>  b 子列表b</li>
<li>列表3</li>
</ul>
<h1 id="3-字体："><a href="#3-字体：" class="headerlink" title="3.字体："></a>3.字体：</h1><p><em>代码如下</em>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*字体是斜线的哦*</span><br><span class="line">**字体是加粗的哦**</span><br></pre></td></tr></table></figure>

<p><em>效果如下</em>：</p>
<p><em>字体是斜线的哦</em><br><strong>字体是加粗的哦</strong></p>
<h1 id="4-线条："><a href="#4-线条：" class="headerlink" title="4.线条："></a>4.线条：</h1><p><em>代码如下</em>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure>

<p><em>效果如下</em>：</p>
<hr>
<hr>
<h1 id="5-超链接："><a href="#5-超链接：" class="headerlink" title="5.超链接："></a>5.超链接：</h1><p><em>代码如下</em>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Daybreak-Zheng](http://Daybreak-Zheng.github.io)</span><br></pre></td></tr></table></figure>

<p><em>效果如下</em>：<br><a href="http://Daybreak-Zheng.github.io">Daybreak-Zheng</a></p>
<h1 id="6-图片："><a href="#6-图片：" class="headerlink" title="6.图片："></a>6.图片：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片](https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2155360369,1171411213&amp;fm=26&amp;gp=0.jpg)</span><br></pre></td></tr></table></figure>

<p><em>效果如下</em>：<br><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2155360369,1171411213&fm=26&gp=0.jpg" alt="图片"></p>
<h1 id="7-代码块："><a href="#7-代码块：" class="headerlink" title="7.代码块："></a>7.代码块：</h1><p><em>代码如下(代码前运用Tab键）</em>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;&lt;/html&gt;</span><br><span class="line">	&lt;html&gt;</span><br><span class="line">	    &lt;head&gt;</span><br><span class="line">	       &lt;title&gt;Daybreak-Zheng&lt;/title&gt;</span><br><span class="line">	    &lt;/head&gt;</span><br><span class="line">	    &lt;body&gt;</span><br><span class="line">	       &lt;p&gt;Hello World!&lt;/p&gt;</span><br><span class="line">	    &lt;/body&gt;</span><br><span class="line">	&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><em>效果如下</em>：</p>
<pre><code>&lt;html&gt;&lt;/html&gt;
&lt;html&gt;
    &lt;head&gt;
       &lt;title&gt;Daybreak-Zheng&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
       &lt;p&gt;Hello World!&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre><h1 id="8-引用"><a href="#8-引用" class="headerlink" title="8.引用"></a>8.引用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;我的内容是引用的哦</span><br></pre></td></tr></table></figure>

<p><em>效果如下</em>：</p>
<blockquote>
<p>我的内容是引用的哦</p>
</blockquote>
<h1 id="更多Markdown语法"><a href="#更多Markdown语法" class="headerlink" title="更多Markdown语法"></a><a href="http://www.markdown.cn/#block-elements" target="_blank" rel="noopener">更多Markdown语法</a></h1>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Markdown 语法</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next主题博客优化(三）提高加载速度,优化性能</title>
    <url>/2019/08/01/next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%963/</url>
    <content><![CDATA[<center>hexo next主题提高加载速度,优化性能</center>

<h2 id="1-主题源加载优化-fonts-lug-ustc-edu-cn为中科大的源-相比之前能更快"><a href="#1-主题源加载优化-fonts-lug-ustc-edu-cn为中科大的源-相比之前能更快" class="headerlink" title="1.主题源加载优化(fonts.lug.ustc.edu.cn为中科大的源,相比之前能更快)"></a>1.主题源加载优化(fonts.lug.ustc.edu.cn为中科大的源,相比之前能更快)</h2><h3 id="blog-themes-next下主题配置文件-config-yml中"><a href="#blog-themes-next下主题配置文件-config-yml中" class="headerlink" title="blog\themes\next下主题配置文件_config.yml中"></a>blog\themes\next下主题配置文件_config.yml中</h3><h4 id="原文件："><a href="#原文件：" class="headerlink" title="原文件："></a>原文件：</h4><p><img src="https://b2.bmp.ovh/imgs/2019/08/662bd45443e44d3f.png" alt="图片"></p>
<h4 id="修改为："><a href="#修改为：" class="headerlink" title="修改为："></a>修改为：</h4><p><img src="https://b2.bmp.ovh/imgs/2019/08/a862453a5e061c0b.png" alt="图片"></p>
<h2 id="2-配置hexo-neat压缩插件"><a href="#2-配置hexo-neat压缩插件" class="headerlink" title="2.配置hexo-neat压缩插件"></a>2.配置hexo-neat压缩插件</h2><h3 id="在站点根目录下安装hexo-neat"><a href="#在站点根目录下安装hexo-neat" class="headerlink" title="在站点根目录下安装hexo-neat"></a>在站点根目录下安装hexo-neat</h3><h4 id="博客目录下运行："><a href="#博客目录下运行：" class="headerlink" title="博客目录下运行："></a>博客目录下运行：</h4><p><img src="https://i.bmp.ovh/imgs/2019/08/6ceb9d5c364cdee6.png" alt="图片"></p>
<h4 id="如果报错，选择克隆插件，然后手动复制到插件目录里node-modules下"><a href="#如果报错，选择克隆插件，然后手动复制到插件目录里node-modules下" class="headerlink" title="如果报错，选择克隆插件，然后手动复制到插件目录里node_modules下"></a>如果报错，选择克隆插件，然后手动复制到插件目录里node_modules下</h4><p><img src="https://i.bmp.ovh/imgs/2019/08/a02626eb7e43a607.png" alt></p>
<h3 id="站点配置文件添加相关配置"><a href="#站点配置文件添加相关配置" class="headerlink" title="站点配置文件添加相关配置"></a>站点配置文件添加相关配置</h3><h4 id="在blog-themes-next下主题配置文件-config-yml末尾添加如下代码（根据需求进行配置）："><a href="#在blog-themes-next下主题配置文件-config-yml末尾添加如下代码（根据需求进行配置）：" class="headerlink" title="在blog\themes\next下主题配置文件_config.yml末尾添加如下代码（根据需求进行配置）："></a>在blog\themes\next下主题配置文件_config.yml末尾添加如下代码（根据需求进行配置）：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hexo-neat</span><br><span class="line"># 博文压缩</span><br><span class="line">neat_enable: true</span><br><span class="line"># 压缩html</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line"># 压缩css  </span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &apos;**/*.min.css&apos;</span><br><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &apos;**/*.min.js&apos;</span><br><span class="line">    - &apos;**/jquery.fancybox.pack.js&apos;</span><br><span class="line">    - &apos;**/index.js&apos;</span><br></pre></td></tr></table></figure>

<h3 id="跳过压缩文件的正确方式："><a href="#跳过压缩文件的正确方式：" class="headerlink" title="跳过压缩文件的正确方式："></a>跳过压缩文件的正确方式：</h3><h4 id="如果按照官方插件的文档说明来配置exclude，因为配置的文件的路径错误，不会起到任何作用。需要给这些文件指定正确的路径，万能的配置方式如下："><a href="#如果按照官方插件的文档说明来配置exclude，因为配置的文件的路径错误，不会起到任何作用。需要给这些文件指定正确的路径，万能的配置方式如下：" class="headerlink" title="如果按照官方插件的文档说明来配置exclude，因为配置的文件的路径错误，不会起到任何作用。需要给这些文件指定正确的路径，万能的配置方式如下："></a>如果按照官方插件的文档说明来配置exclude，因为配置的文件的路径错误，不会起到任何作用。需要给这些文件指定正确的路径，万能的配置方式如下：</h4><p><img src="https://i.bmp.ovh/imgs/2019/08/65e81e6bea427439.png" alt></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客优化</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next主题博客优化(二)解决报错问题</title>
    <url>/2019/07/30/next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%962/</url>
    <content><![CDATA[<h1 id="hexo-s生成静态网页时报错ERROR-ENOENT-no-such-file-or-directory"><a href="#hexo-s生成静态网页时报错ERROR-ENOENT-no-such-file-or-directory" class="headerlink" title="hexo s生成静态网页时报错ERROR ENOENT: no such file or directory"></a>hexo s生成静态网页时报错ERROR ENOENT: no such file or directory</h1><p><img src="https://s2.ax1x.com/2019/07/30/eJHbDO.png" alt="图片"></p>
<h3 id="blog-themes-next下主题配置文件-config-yml出现错误"><a href="#blog-themes-next下主题配置文件-config-yml出现错误" class="headerlink" title="blog\themes\next下主题配置文件_config.yml出现错误"></a>blog\themes\next下主题配置文件_config.yml出现错误</h3><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><h3 id="利用工具YAML-Validator检查主题配置文件-config-yml"><a href="#利用工具YAML-Validator检查主题配置文件-config-yml" class="headerlink" title="利用工具YAML Validator检查主题配置文件_config.yml"></a>利用工具<a href="https://yamlvalidator.com/" target="_blank" rel="noopener">YAML Validator</a>检查主题配置文件_config.yml</h3>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows cmd简单操作入门</title>
    <url>/2019/07/30/Windows%20CMD%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="hexo-s生成静态网页时报错ERROR-ENOENT-no-such-file-or-directory"><a href="#hexo-s生成静态网页时报错ERROR-ENOENT-no-such-file-or-directory" class="headerlink" title="hexo s生成静态网页时报错ERROR ENOENT: no such file or directory"></a>hexo s生成静态网页时报错ERROR ENOENT: no such file or directory</h1><p><img src="https://s2.ax1x.com/2019/07/30/eJHbDO.png" alt="图片"></p>
<h3 id="blog-themes-next下主题配置文件-config-yml出现错误"><a href="#blog-themes-next下主题配置文件-config-yml出现错误" class="headerlink" title="blog\themes\next下主题配置文件_config.yml出现错误"></a>blog\themes\next下主题配置文件_config.yml出现错误</h3><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><h3 id="利用工具YAML-Validator检查主题配置文件-config-yml"><a href="#利用工具YAML-Validator检查主题配置文件-config-yml" class="headerlink" title="利用工具YAML Validator检查主题配置文件_config.yml"></a>利用工具<a href="https://yamlvalidator.com/" target="_blank" rel="noopener">YAML Validator</a>检查主题配置文件_config.yml</h3>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客优化</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next主题博客优化(一)鼠标点击出现爱心效果</title>
    <url>/2019/07/22/next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%961/</url>
    <content><![CDATA[<h1 id="鼠标点击出现爱心效果"><a href="#鼠标点击出现爱心效果" class="headerlink" title="鼠标点击出现爱心效果"></a>鼠标点击出现爱心效果</h1><h3 id="在blog-themes-next-source-js下创建clicklove-js文件"><a href="#在blog-themes-next-source-js下创建clicklove-js文件" class="headerlink" title="在blog/themes/next/source/js下创建clicklove.js文件"></a>在blog/themes/next/source/js下创建clicklove.js文件</h3><p><img src="https://s2.ax1x.com/2019/07/22/eiBQiV.png" alt="图片"></p>
<h3 id="clicklove-js文件代码如下："><a href="#clicklove-js文件代码如下：" class="headerlink" title="clicklove.js文件代码如下："></a>clicklove.js文件代码如下：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>

<h3 id="打开blog-themes-next-layout-layout-swig文件并添加代码："><a href="#打开blog-themes-next-layout-layout-swig文件并添加代码：" class="headerlink" title="打开blog\themes\next\layout_layout.swig文件并添加代码："></a>打开blog\themes\next\layout_layout.swig文件并添加代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="单步执行如下命令："><a href="#单步执行如下命令：" class="headerlink" title="单步执行如下命令："></a>单步执行如下命令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客优化</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛--进制转换</title>
    <url>/2019/01/31/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B--111/</url>
    <content><![CDATA[<h3 id="1-又一版A-B"><a href="#1-又一版A-B" class="headerlink" title="1.又一版A+B"></a>1.又一版A+B</h3><h4 id="输入两个不超过整型定义的非负10进制整数A和B-lt-231-1-，输出A-B的m-1-lt-m-lt-10-进制数。"><a href="#输入两个不超过整型定义的非负10进制整数A和B-lt-231-1-，输出A-B的m-1-lt-m-lt-10-进制数。" class="headerlink" title="输入两个不超过整型定义的非负10进制整数A和B(&lt;=231-1)，输出A+B的m (1 &lt; m &lt;10)进制数。"></a>输入两个不超过整型定义的非负10进制整数A和B(&lt;=231-1)，输出A+B的m (1 &lt; m &lt;10)进制数。</h4><h4 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="测试输入包含若干测试用例。每个测试用例占一行，给出m和A，B的值。当m为0时输入结束。"><a href="#测试输入包含若干测试用例。每个测试用例占一行，给出m和A，B的值。当m为0时输入结束。" class="headerlink" title="测试输入包含若干测试用例。每个测试用例占一行，给出m和A，B的值。当m为0时输入结束。"></a>测试输入包含若干测试用例。每个测试用例占一行，给出m和A，B的值。当m为0时输入结束。</h5><h4 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="每个测试用例的输出占一行，输出A-B的m进制数。"><a href="#每个测试用例的输出占一行，输出A-B的m进制数。" class="headerlink" title="每个测试用例的输出占一行，输出A+B的m进制数。"></a>每个测试用例的输出占一行，输出A+B的m进制数。</h5><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 4 5</span><br><span class="line">8 123 456</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1001</span><br><span class="line">1103</span><br></pre></td></tr></table></figure>

<h4 id="hint-注意输入的两个数相加后的结果可能会超过int和long的范围。"><a href="#hint-注意输入的两个数相加后的结果可能会超过int和long的范围。" class="headerlink" title="hint:注意输入的两个数相加后的结果可能会超过int和long的范围。"></a>hint:注意输入的两个数相加后的结果可能会超过int和long的范围。</h4><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><h4 id="1-题目为非负整数，0也可以，要用do-while循环。"><a href="#1-题目为非负整数，0也可以，要用do-while循环。" class="headerlink" title="(1)题目为非负整数，0也可以，要用do while循环。"></a>(1)题目为非负整数，0也可以，要用do while循环。</h4><h4 id="2-每个测试用例占一行-输出要及时换行。"><a href="#2-每个测试用例占一行-输出要及时换行。" class="headerlink" title="(2)每个测试用例占一行,输出要及时换行。"></a>(2)每个测试用例占一行,输出要及时换行。</h4><h4 id="3-最最最重要，WA50-搞了好久，在hint-a和b必须也是long-long型，否则超出范围"><a href="#3-最最最重要，WA50-搞了好久，在hint-a和b必须也是long-long型，否则超出范围" class="headerlink" title="(3)最最最重要，WA50%,搞了好久，在hint,a和b必须也是long long型，否则超出范围."></a>(3)最最最重要，WA50%,搞了好久，在hint,a和b必须也是long long型，否则超出范围.</h4><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int c[100];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	long long a,b;</span><br><span class="line">	int m;</span><br><span class="line">	while(scanf(&quot;%d&quot;,&amp;m) &amp;&amp; m)		//先输入m并判断是否等于0</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%lld%lld&quot;,&amp;a,&amp;b);</span><br><span class="line">		long long sum=a+b;</span><br><span class="line">		int count=0;</span><br><span class="line">		do&#123;</span><br><span class="line">			c[count++]=sum%m;</span><br><span class="line">			sum=sum/m;</span><br><span class="line">		&#125;while(sum&gt;0);</span><br><span class="line">		for(int i=count-1;i&gt;=0;i--)//逆序打印输出</span><br><span class="line">			printf(&quot;%d&quot;,c[i]);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-数制转换"><a href="#2-数制转换" class="headerlink" title="2.数制转换"></a>2.数制转换</h3><h4 id="求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。"><a href="#求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。" class="headerlink" title="求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。"></a>求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。不同进制的表示符号为（0，1，…，9，a，b，…，f）或者（0，1，…，9，A，B，…，F）。</h4><h4 id="输入信息-1"><a href="#输入信息-1" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入只有一行，包含三个整数a，n，b。a表示其后的n-是a进制整数，b表示欲将a进制整数n转换成b进制整数。a，b是十进制整数，2-lt-a，b-lt-16。"><a href="#输入只有一行，包含三个整数a，n，b。a表示其后的n-是a进制整数，b表示欲将a进制整数n转换成b进制整数。a，b是十进制整数，2-lt-a，b-lt-16。" class="headerlink" title="输入只有一行，包含三个整数a，n，b。a表示其后的n 是a进制整数，b表示欲将a进制整数n转换成b进制整数。a，b是十进制整数，2 =&lt; a，b &lt;= 16。"></a>输入只有一行，包含三个整数a，n，b。a表示其后的n 是a进制整数，b表示欲将a进制整数n转换成b进制整数。a，b是十进制整数，2 =&lt; a，b &lt;= 16。</h5><h4 id="输出信息-1"><a href="#输出信息-1" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="可能有多组测试数据，对于每组数据，输出包含一行，该行有一个整数为转换后的b进制数。输出时字母符号全部用大写表示，即（0，1，…，9，A，B，…，F）。"><a href="#可能有多组测试数据，对于每组数据，输出包含一行，该行有一个整数为转换后的b进制数。输出时字母符号全部用大写表示，即（0，1，…，9，A，B，…，F）。" class="headerlink" title="可能有多组测试数据，对于每组数据，输出包含一行，该行有一个整数为转换后的b进制数。输出时字母符号全部用大写表示，即（0，1，…，9，A，B，…，F）。"></a>可能有多组测试数据，对于每组数据，输出包含一行，该行有一个整数为转换后的b进制数。输出时字母符号全部用大写表示，即（0，1，…，9，A，B，…，F）。</h5><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 123 10</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">27</span><br></pre></td></tr></table></figure>

<h4 id="思路-将要转换的数字通过字符串输入，转换为10进制数，10进制数再进行转换，存储在字符串中，逆序输出。"><a href="#思路-将要转换的数字通过字符串输入，转换为10进制数，10进制数再进行转换，存储在字符串中，逆序输出。" class="headerlink" title="思路:将要转换的数字通过字符串输入，转换为10进制数，10进制数再进行转换，存储在字符串中，逆序输出。"></a>思路:将要转换的数字通过字符串输入，转换为10进制数，10进制数再进行转换，存储在字符串中，逆序输出。</h4><h4 id="注意-输入可以是大小写的a-输出则统一为大写，WA50-。"><a href="#注意-输入可以是大小写的a-输出则统一为大写，WA50-。" class="headerlink" title="注意:输入可以是大小写的a,输出则统一为大写，WA50%。"></a>注意:输入可以是大小写的a,输出则统一为大写，WA50%。</h4><h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[50],b[50];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,m;</span><br><span class="line">	while(scanf(&quot;%d%s%d&quot;,&amp;n,a,&amp;m)==3)</span><br><span class="line">	&#123;</span><br><span class="line">		int l=strlen(a),temp=1;</span><br><span class="line">		long long sum=0;</span><br><span class="line">		for(int i=l-1;i&gt;=0;i--)		//从低位开始循环</span><br><span class="line">		&#123;</span><br><span class="line">			if(a[i]&gt;=&apos;A&apos;&amp;&amp;a[i]&lt;=&apos;F&apos;)//若该字符为A-F,转换为10-15的数字</span><br><span class="line">				sum+=(a[i]-&apos;7&apos;)*temp;</span><br><span class="line">			if(a[i]&gt;=&apos;a&apos;&amp;&amp;a[i]&lt;=&apos;F&apos;)//若该字符为a-f,转换为10-15的数字</span><br><span class="line">				sum+=(a[i]-&apos;A&apos;-22)*temp;</span><br><span class="line">			if(a[i]&gt;=&apos;0&apos;&amp;&amp;a[i]&lt;=&apos;9&apos;)//若该字符为0-0,转换为0-9的数字</span><br><span class="line">				sum+=(a[i]-&apos;0&apos;)*temp;//该数字与对应的权重相乘累加求和</span><br><span class="line">			temp*=n;//计算每位数上的权重</span><br><span class="line">		&#125;</span><br><span class="line">		int count=0;</span><br><span class="line">		do&#123;</span><br><span class="line">			if(sum%m&gt;=10)		//如果取余的数字大于10,转换为A-F的字符</span><br><span class="line">			 	b[count++]=(sum%m)+&apos;7&apos;;</span><br><span class="line">			else				//否则转换为0-9字符</span><br><span class="line">				b[count++]=(sum%m)+&apos;0&apos;;</span><br><span class="line">			sum=sum/m;</span><br><span class="line">		&#125;while(sum&gt;0);</span><br><span class="line">		for(int i=count-1;i&gt;=0;i--)//逆序打印输出</span><br><span class="line">		    printf(&quot;%c&quot;,b[i]);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-进制转换"><a href="#3-进制转换" class="headerlink" title="3.进制转换"></a>3.进制转换</h3><h4 id="将一个长度最多为30位数字的十进制非负整数转换为二进制数输出。"><a href="#将一个长度最多为30位数字的十进制非负整数转换为二进制数输出。" class="headerlink" title="将一个长度最多为30位数字的十进制非负整数转换为二进制数输出。"></a>将一个长度最多为30位数字的十进制非负整数转换为二进制数输出。</h4><h4 id="输入信息-2"><a href="#输入信息-2" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="多组数据，每行为一个长度不超过30位的十进制非负整数。-注意是10进制数字的个数可能有30个，而非30bits的整数）"><a href="#多组数据，每行为一个长度不超过30位的十进制非负整数。-注意是10进制数字的个数可能有30个，而非30bits的整数）" class="headerlink" title="多组数据，每行为一个长度不超过30位的十进制非负整数。(注意是10进制数字的个数可能有30个，而非30bits的整数）"></a>多组数据，每行为一个长度不超过30位的十进制非负整数。(注意是10进制数字的个数可能有30个，而非30bits的整数）</h5><h4 id="输出信息-2"><a href="#输出信息-2" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="每行输出对应的二进制数。"><a href="#每行输出对应的二进制数。" class="headerlink" title="每行输出对应的二进制数。"></a>每行输出对应的二进制数。</h5><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">985</span><br><span class="line">211</span><br><span class="line">1126</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1111011001</span><br><span class="line">11010011</span><br><span class="line">10001100110</span><br></pre></td></tr></table></figure>

<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h4><h5 id="1-多组输入输出"><a href="#1-多组输入输出" class="headerlink" title="(1)多组输入输出"></a>(1)多组输入输出</h5><h5 id="2-起初想用long-long-型存储，题目要求30位，long-long最多20位，用字符数组接收"><a href="#2-起初想用long-long-型存储，题目要求30位，long-long最多20位，用字符数组接收" class="headerlink" title="(2)起初想用long long 型存储，题目要求30位，long long最多20位，用字符数组接收"></a>(2)起初想用long long 型存储，题目要求30位，long long最多20位，用字符数组接收</h5><h5 id="3-保存二进制数的数组，要大一些，我开辟了50的空间，一直报RE50-的错误。"><a href="#3-保存二进制数的数组，要大一些，我开辟了50的空间，一直报RE50-的错误。" class="headerlink" title="(3)保存二进制数的数组，要大一些，我开辟了50的空间，一直报RE50%的错误。"></a>(3)保存二进制数的数组，要大一些，我开辟了50的空间，一直报RE50%的错误。</h5><h4 id="思路-用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。"><a href="#思路-用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。" class="headerlink" title="思路:用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。"></a>思路:用字符数组接收，将每个字符转换为整型，从最后一个数字开始逐步除二取余，存储在新数组中，再将整个数除二存储。</h4><h4 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char a[35];</span><br><span class="line">	while(scanf(&quot;%s&quot;,a)==1)</span><br><span class="line">	&#123;</span><br><span class="line">		int len=strlen(a);</span><br><span class="line">		int b[35]=&#123;0&#125;;</span><br><span class="line">		for(int i=0;i&lt;len;i++)//从高位开始，将每个字符转换为对应的数字</span><br><span class="line">			b[i]=a[i]-&apos;0&apos;;</span><br><span class="line">		int k=0,num=0;</span><br><span class="line">		int z[100]=&#123;0&#125;;		//存储进制数的数组，空间要开辟的足够大</span><br><span class="line">		while(k&lt;len)</span><br><span class="line">		&#123;</span><br><span class="line">			int q=0;</span><br><span class="line">			z[num++]=(b[len-1])%2;//从最后一位开始逐步取余</span><br><span class="line">			for(int j=k;j&lt;len;j++)//将原数除以二并存储</span><br><span class="line">			&#123;</span><br><span class="line">				int temp=b[j];</span><br><span class="line">				b[j]=(b[j]+q)/2;//从最高位开始，如果是偶数，可以除尽，q=0;如果是奇数，会余1给下一位，下一位加10之后再进行除法运算。</span><br><span class="line">				if(temp%2)</span><br><span class="line">					q=10;</span><br><span class="line">				else</span><br><span class="line">					q=0;</span><br><span class="line">			&#125;</span><br><span class="line">			if(b[k]==0)</span><br><span class="line">				k++;</span><br><span class="line">		&#125;</span><br><span class="line">		for(int i=num-1;i&gt;=0;i--)</span><br><span class="line">			printf(&quot;%d&quot;,z[i]);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-日期累加"><a href="#4-日期累加" class="headerlink" title="4.日期累加"></a>4.日期累加</h3><h4 id="设计一个程序能计算一个日期加上若干天后是什么日期。"><a href="#设计一个程序能计算一个日期加上若干天后是什么日期。" class="headerlink" title="设计一个程序能计算一个日期加上若干天后是什么日期。"></a>设计一个程序能计算一个日期加上若干天后是什么日期。</h4><h4 id="输入信息-3"><a href="#输入信息-3" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入第一行表示样例个数m，接下来m行每行四个整数分别表示年月日和累加的天数。"><a href="#输入第一行表示样例个数m，接下来m行每行四个整数分别表示年月日和累加的天数。" class="headerlink" title="输入第一行表示样例个数m，接下来m行每行四个整数分别表示年月日和累加的天数。"></a>输入第一行表示样例个数m，接下来m行每行四个整数分别表示年月日和累加的天数。</h5><h4 id="输出信息-3"><a href="#输出信息-3" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出m行，每行按yyyy-mm-dd的个数输出。"><a href="#输出m行，每行按yyyy-mm-dd的个数输出。" class="headerlink" title="输出m行，每行按yyyy-mm-dd的个数输出。"></a>输出m行，每行按yyyy-mm-dd的个数输出。</h5><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2008 2 3 100</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2008-05-13</span><br></pre></td></tr></table></figure>

<h4 id="代码如下-3"><a href="#代码如下-3" class="headerlink" title="代码如下:"></a>代码如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int month[13][2]=&#123;&#123;0,0&#125;,&#123;31,31&#125;,&#123;28,29&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;,&#123;30,30&#125;,&#123;31,31&#125;&#125;;</span><br><span class="line">bool Isleap(int year)</span><br><span class="line">&#123;</span><br><span class="line">	return ((year%4==0&amp;&amp;year%10!=0)||(year%400==0));</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,y,m,d,count;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	while(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%d%d%d%d&quot;,&amp;y,&amp;m,&amp;d,&amp;count);</span><br><span class="line">		while(count--)				//该题为3的变式，累加count次即可</span><br><span class="line">		&#123;</span><br><span class="line">			d++;</span><br><span class="line">			if(d==month[m][Isleap(y)]+1)</span><br><span class="line">			&#123;</span><br><span class="line">				m++;</span><br><span class="line">				d=1;</span><br><span class="line">			&#125;</span><br><span class="line">			if(m==13)</span><br><span class="line">			&#123;</span><br><span class="line">				y++;</span><br><span class="line">				m=1;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;%04d-%02d-%02d\n&quot;,y,m,d);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-日期计算"><a href="#5-日期计算" class="headerlink" title="5.日期计算"></a>5.日期计算</h3><h4 id="已知2011年11月11日是星期五，问YYYY年MM月DD日是星期几？注意考虑闰年的情况。尤其是逢百年不闰，逢400年闰的情况。"><a href="#已知2011年11月11日是星期五，问YYYY年MM月DD日是星期几？注意考虑闰年的情况。尤其是逢百年不闰，逢400年闰的情况。" class="headerlink" title="已知2011年11月11日是星期五，问YYYY年MM月DD日是星期几？注意考虑闰年的情况。尤其是逢百年不闰，逢400年闰的情况。"></a>已知2011年11月11日是星期五，问YYYY年MM月DD日是星期几？注意考虑闰年的情况。尤其是逢百年不闰，逢400年闰的情况。</h4><h4 id="输入信息-4"><a href="#输入信息-4" class="headerlink" title="输入信息:"></a>输入信息:</h4><h5 id="输入只有一行"><a href="#输入只有一行" class="headerlink" title="输入只有一行"></a>输入只有一行</h5><h5 id="YYYY-MM-DD"><a href="#YYYY-MM-DD" class="headerlink" title="YYYY MM DD"></a>YYYY MM DD</h5><h4 id="输出信息-4"><a href="#输出信息-4" class="headerlink" title="输出信息:"></a>输出信息:</h4><h5 id="输出只有一行"><a href="#输出只有一行" class="headerlink" title="输出只有一行"></a>输出只有一行</h5><h5 id="W"><a href="#W" class="headerlink" title="W"></a>W</h5><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入:"></a>样例输入:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2011 11 11</span><br></pre></td></tr></table></figure>

<h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出:"></a>样例输出:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="代码如下-4"><a href="#代码如下-4" class="headerlink" title="代码如下:"></a>代码如下:</h4><p><img src="http://p.haituie.com/628034/%E6%8D%95%E8%8E%B7_132257276562747500.PNG" alt="图"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
</search>
